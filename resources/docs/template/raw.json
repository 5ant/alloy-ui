{"majorversion": 3, "classmap": {"Paginator": {"name": "Paginator", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-paginator/main.png\"/></p>\nA base class for Paginator, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Set of controls to navigate through paged data</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Paginator({\ncontainers: '.paginatorA',\ntotal: 10,\nmaxPageLinks: 10,\nrowsPerPage: 1,\nrowsPerPageOptions: [ 1, 3, 5, 7 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Paginator.html#configattributes\">Configuration Attributes</a> available for\nPaginator."}], "namespace": "", "module": "aui-paginator", "events": {"stateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stateChange", "description": "Fires when the value for the configuration attribute 'state' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalLabelChange", "description": "Fires when the value for the configuration attribute 'totalLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevPageLinkChange", "description": "Fires when the value for the configuration attribute 'prevPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkChange", "description": "Fires when the value for the configuration attribute 'firstPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "prevPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "prevPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'prevPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "templateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "templateChange", "description": "Fires when the value for the configuration attribute 'template' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageOptionsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageOptionsChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageOptions' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalChange", "description": "Fires when the value for the configuration attribute 'total' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageElChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageChange", "description": "Fires when the value for the configuration attribute 'page' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinkContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkContentChange", "description": "Fires when the value for the configuration attribute 'pageLinkContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageChange", "description": "Fires when the value for the configuration attribute 'rowsPerPage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportLabelTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportLabelTemplateChange", "description": "Fires when the value for the configuration attribute 'pageReportLabelTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'alwaysVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalPagesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalPagesChange", "description": "Fires when the value for the configuration attribute 'totalPages' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxPageLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxPageLinksChange", "description": "Fires when the value for the configuration attribute 'maxPageLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalElChange", "description": "Fires when the value for the configuration attribute 'totalEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinkTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkTemplateChange", "description": "Fires when the value for the configuration attribute 'pageLinkTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkChange", "description": "Fires when the value for the configuration attribute 'lastPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "containersChange", "description": "Fires when the value for the configuration attribute 'containers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportElChange", "description": "Fires when the value for the configuration attribute 'pageReportEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkChange", "description": "Fires when the value for the configuration attribute 'nextPageLink' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageContainerTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageContainerTemplateChange", "description": "Fires when the value for the configuration attribute 'pageContainerTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"pageReportLabelTemplate": {"default": "'({page} of {totalPages})'", "type": "String", "description": "Template for the\n<a href=\"Paginator.html#config_pageReportEl\">pageReportEl</a> content.\nNote the placeholders for the page {page} and the total pages\n{totalPages}.", "guessedname": "pageReportLabelTemplate", "guessedtype": "property"}, "prevPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nprev link element.", "guessedname": "prevPageLink", "guessedtype": "property"}, "pageLinkTemplate": {"default": "Generated anchor HTML element.", "type": "String", "description": "HTML Template for the link elements.", "guessedname": "pageLinkTemplate", "guessedtype": "property"}, "pageReportEl": {"default": "Generated span HTML element.", "type": "String", "description": "Node element to display the page report (i.e., (1 of 100)).", "guessedname": "pageReportEl", "guessedtype": "property"}, "prevPageLinkLabel": {"default": "'&lt; prev'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_prevPageLink\">prevPageLink</a> element.", "guessedname": "prevPageLinkLabel", "guessedtype": "property"}, "pageLinkContent": {"default": "Basic function to set the html of the page element with the page number.", "type": "function", "description": "<p>Function which set the content of the each page element. The passed\nfunction receive as arguments the reference for the page element\nnode, the page number and the index of the page element.</p>\nExample:\n<pre><code>function(pageEl, pageNumber, index) {\npageEl.html(pageNumber);\n}</code></pre>", "guessedname": "pageLinkContent", "guessedtype": "property"}, "firstPageLinkLabel": {"default": "'first'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_firstPageLink\">firstPageLink</a> element.", "guessedname": "firstPageLinkLabel", "guessedtype": "property"}, "rowsPerPageOptions": {"default": "[]", "type": "Array", "description": "Array to be displayed on the generated HTML Select element with the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>\ninformation. (i.e., [1,3,5,7], will display these values on the\nselect)", "guessedname": "rowsPerPageOptions", "guessedtype": "property"}, "total": {"default": "0", "type": "Number", "description": "Total number of records to paginate through.", "guessedname": "total", "guessedtype": "property"}, "totalLabel": {"default": "'(Total {total})'", "type": "String", "description": "The label markup to the total information.", "guessedname": "totalLabel", "guessedtype": "property"}, "state": {"default": "{}", "type": "Object", "description": "Generates information to the <code>changeRequest</code> event. See\n<a href=\"Paginator.html#method_changeRequest\">changeRequest</a>.", "guessedname": "state", "guessedtype": "property"}, "template": {"default": "'{FirstPageLink} {PrevPageLink} {PageLinks} {NextPageLink} {LastPageLink} {CurrentPageReport} {Total} {RowsPerPageSelect}'", "type": "String", "description": "Template used to render controls. The string will be used as\ninnerHTML on all specified container nodes. Bracketed keys (e.g.\n{pageLinks}) in the string will be replaced with an instance of the\nso named ui component.", "guessedname": "template", "guessedtype": "property"}, "firstPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nfirst link element.", "guessedname": "firstPageLink", "guessedtype": "property"}, "pageContainerTemplate": {"default": "Generated span HTML element.", "type": "String", "description": "HTML Template for the page links container.", "guessedname": "pageContainerTemplate", "guessedtype": "property"}, "containers": {"default": "null", "type": "Node | String", "description": "The Paginator controls UI could be displayed in more than one\ncontainer (i.e., in the header and footer of a list). Pass a\n<a href=\"NodeList.html\">NodeList</a> or a selector to grab the\ncontainers.", "guessedname": "containers", "guessedtype": "property"}, "lastPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nlast link element.", "guessedname": "lastPageLink", "guessedtype": "property"}, "nextPageLink": {"default": "Generated anchor element.", "type": "Node | String", "description": "The <a href=\"Node.html\">Node</a> or template to be used as the\nnext link element.", "guessedname": "nextPageLink", "guessedtype": "property"}, "maxPageLinks": {"default": "10", "type": "Number", "description": "The max number of page links to be displayed. If lower than the\ntotal number of pages they are still navigable using next and prev\nlinks.", "guessedname": "maxPageLinks", "guessedtype": "property"}, "rowsPerPageEl": {"default": "Generated select HTML element.", "type": "Node | String", "description": "Node element to display the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>.", "guessedname": "rowsPerPageEl", "guessedtype": "property"}, "nextPageLinkLabel": {"default": "'next &gt;'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_nextPageLink\">nextPageLink</a> element.", "guessedname": "nextPageLinkLabel", "guessedtype": "property"}, "rowsPerPage": {"default": "1", "type": "Number", "description": "Number of records constituting a \"page\".", "guessedname": "rowsPerPage", "guessedtype": "property"}, "totalEl": {"default": "Generated span HTML element.", "type": "String", "description": "Node element to display the total information.", "guessedname": "totalEl", "guessedtype": "property"}, "totalPages": {"default": "0", "type": "Number", "description": "Number of pages. Calculated based on the\n<a href=\"Paginator.html#config_total\">total</a> divided by the\n<a href=\"Paginator.html#config_rowsPerPage\">rowsPerPage</a>.", "guessedname": "totalPages", "guessedtype": "property"}, "lastPageLinkLabel": {"default": "'last'", "type": "String", "description": "The label used as content of the\n<a href=\"Paginator.html#config_lastPageLink\">lastPageLink</a> element.", "guessedname": "lastPageLinkLabel", "guessedtype": "property"}, "page": {"default": "1", "type": "Number", "description": "Page to display on initial paint.", "guessedname": "page", "guessedtype": "property"}, "alwaysVisible": {"default": "true", "type": "boolean", "description": "If true the Paginator will be always visible, even when the number\nof pages is 0. To hide the paginator controls automatically when\nthere is no pages to display use <code>false</code>.", "guessedname": "alwaysVisible", "guessedtype": "property"}}, "methods": {"_setTotal": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"Paginator.html#config_total\">total</a>.", "protected": "", "params": [{"type": "Number", "name": "v", "description": ""}], "guessedname": "_setTotal", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the Paginator class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "_getState": {"return": {"type": "Object", "description": "State object."}, "description": "Private getter for <a href=\"Paginator.html#config_state\">state</a>.", "protected": "", "params": [{"type": "Object", "name": "v", "description": " Current state object."}], "guessedname": "_getState", "guessedtype": "function"}, "_beforeSetState": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires before the value of the\n<a href=\"Paginator.html#config_state\">state</a> attribute change.", "guessedname": "_beforeSetState", "guessedtype": "function"}, "setState": {"params": [{"type": "Object", "name": "v", "description": " New state object."}], "description": "Public setter for <a href=\"Paginator.html#config_state\">state</a>.", "guessedname": "setState", "guessedtype": "function"}, "_onClickPrevLinkEl": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Click event handler for the\n<a href=\"Paginator.html#config_prevLinkEl\">prevLinkEl</a>.", "guessedname": "_onClickPrevLinkEl", "guessedtype": "function"}, "hasNextPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a next page.", "guessedname": "hasNextPage", "guessedtype": "function"}, "_afterSetState": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Paginator.html#config_state\">state</a> attribute change.", "guessedname": "_afterSetState", "guessedtype": "function"}, "_setState": {"return": {"type": "Object", "description": ""}, "description": "Private setter for <a href=\"Paginator.html#config_state\">state</a>.", "protected": "", "params": [{"type": "Object", "name": "v", "description": " New state object."}], "guessedname": "_setState", "guessedtype": "function"}, "eachContainer": {"params": [{"type": "function", "name": "fn", "description": " Callback"}], "description": "Loop through all\n<a href=\"Paginator.html#config_containers\">containers</a> and execute the\npassed callback.", "guessedname": "eachContainer", "guessedtype": "function"}, "changeRequest": {"description": "Fires <a href=\"Paginator.html#event_changeRequest\">changeRequest</a>\nevent. This is the most important event because it's responsible to\nupdate the UI, invoked <code>.setState(newState)</code> to update the\nUI.", "guessedname": "changeRequest", "guessedtype": "function"}, "_getTemplate": {"return": {"type": "String", "description": "Current template."}, "description": "Getter for <a href=\"Paginator.html#config_template\">template</a>.", "protected": "", "params": [{"type": "String", "name": "v", "description": " Current template."}], "guessedname": "_getTemplate", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Paginator UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_delegateDOM": {"protected": "", "description": "Delegate DOM events on the Paginator UI.", "guessedname": "_delegateDOM", "guessedtype": "function"}, "_renderTemplateUI": {"protected": "", "description": "Render the UI controls based on the\n<a href=\"Paginator.html#config_template\">template</a>.", "guessedname": "_renderTemplateUI", "guessedtype": "function"}, "_bindDOMEvents": {"protected": "", "description": "Bind DOM events on the Paginator UI.", "guessedname": "_bindDOMEvents", "guessedtype": "function"}, "hasPage": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "Number", "name": "page", "description": ""}], "description": "Check if the <code>page</code> exists.", "guessedname": "hasPage", "guessedtype": "function"}, "hasPrevPage": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a previous page.", "guessedname": "hasPrevPage", "guessedtype": "function"}, "_onClickPageLinkEl": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Click event handler for the\n<a href=\"Paginator.html#config_pageLinkEl\">pageLinkEl</a>.", "guessedname": "_onClickPageLinkEl", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Paginator UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onClickFirstLinkEl": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Click event handler for the\n<a href=\"Paginator.html#config_firstLinkEl\">firstLinkEl</a>.", "guessedname": "_onClickFirstLinkEl", "guessedtype": "function"}, "_renderRowsPerPageOptions": {"protected": "", "description": "Render rows per page options.", "guessedname": "_renderRowsPerPageOptions", "guessedtype": "function"}, "_onClickLastLinkEl": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Click event handler for the\n<a href=\"Paginator.html#config_lastLinkEl\">lastLinkEl</a>.", "guessedname": "_onClickLastLinkEl", "guessedtype": "function"}, "_syncPageLinksUI": {"protected": "", "description": "Sync the Paginator links UI.", "guessedname": "_syncPageLinksUI", "guessedtype": "function"}, "_onClickNextLinkEl": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Click event handler for the\n<a href=\"Paginator.html#config_nextLinkEl\">nextLinkEl</a>.", "guessedname": "_onClickNextLinkEl", "guessedtype": "function"}, "calculateRange": {"return": {"type": "Object", "description": "Object containing the start and end information."}, "params": [{"type": "Type", "name": "name", "description": " description"}], "description": "Create a range to display on the pageLinks, keep the current page on\ncenter.", "guessedname": "calculateRange", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Paginator. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-paginator.js", "shortname": "Paginator", "properties": {"Paginator.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "templatesCache": {"protected": "", "type": "String", "description": "Cached template after <a href=\"YUI.html#method_substitute\">YUI\nsubstitute</a> were applied.", "guessedname": "templatesCache", "guessedtype": "property"}, "Paginator.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Paginator.", "guessedname": "ATTRS", "guessedtype": "property"}, "lastState": {"protected": "", "type": "Object | null", "description": "Store the last state object used on the <a href=\"Paginator.html#method_changeRequest\">changeRequest</a> event.", "guessedname": "lastState", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-paginator/main.png\"/></p>\nA base class for Paginator, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Set of controls to navigate through paged data</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Paginator({\ncontainers: '.paginatorA',\ntotal: 10,\nmaxPageLinks: 10,\nrowsPerPage: 1,\nrowsPerPageOptions: [ 1, 3, 5, 7 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"Paginator.html#configattributes\">Configuration Attributes</a> available for\nPaginator."}, "ImageViewer": {"name": "ImageViewer", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-image-viewer-base/main.png\"/></p>\nA base class for ImageViewer, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageViewer({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageViewer.html#configattributes\">Configuration Attributes</a> available for\nImageViewer."}], "namespace": "", "module": "aui-image-viewer", "events": {"preloadAllImagesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preloadAllImagesChange", "description": "Fires when the value for the configuration attribute 'preloadAllImages' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "load": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the load event. Fired when a image is laoded."}, "infoTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoTemplateChange", "description": "Fires when the value for the configuration attribute 'infoTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loaderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loaderChange", "description": "Fires when the value for the configuration attribute 'loader' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "request": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the request event. Fired when a image is requested."}, "linksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "linksChange", "description": "Fires when the value for the configuration attribute 'links' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageAnimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageAnimChange", "description": "Fires when the value for the configuration attribute 'imageAnim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showCloseChange", "description": "Fires when the value for the configuration attribute 'showClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "infoElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "infoElChange", "description": "Fires when the value for the configuration attribute 'infoEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentIndexChange", "description": "Fires when the value for the configuration attribute 'currentIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowRightElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowRightElChange", "description": "Fires when the value for the configuration attribute 'arrowRightEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalLinksChange", "description": "Fires when the value for the configuration attribute 'totalLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "arrowLeftElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowLeftElChange", "description": "Fires when the value for the configuration attribute 'arrowLeftEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showArrowsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showArrowsChange", "description": "Fires when the value for the configuration attribute 'showArrows' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionFromTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionFromTitleChange", "description": "Fires when the value for the configuration attribute 'captionFromTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "anim": {"type": "{Event.Custom}", "params": [{"type": "Event.Facade", "name": "event", "description": " The load event."}], "description": "Handles the anim event. Fired when the image anim ends."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionElChange", "description": "Fires when the value for the configuration attribute 'captionEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingElChange", "description": "Fires when the value for the configuration attribute 'loadingEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "loadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingChange", "description": "Fires when the value for the configuration attribute 'loading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "imageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "imageChange", "description": "Fires when the value for the configuration attribute 'image' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "captionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "captionChange", "description": "Fires when the value for the configuration attribute 'caption' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "centeredChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "centeredChange", "description": "Fires when the value for the configuration attribute 'centered' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closeElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closeElChange", "description": "Fires when the value for the configuration attribute 'closeEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"links": {"type": "String | NodeList", "description": "Selector or NodeList containing the links where the ImageViewer\nextracts the information to generate the thumbnails.", "guessedname": "links", "guessedtype": "property"}, "image": {"description": "Image node element used to load the images.", "default": "Generated img element.", "readonly": "", "guessedname": "image", "guessedtype": "property", "type": "Node"}, "totalLinks": {"description": "Helper attribute to get the <code>size</code> of the <a\nhref=\"ImageViewer.html#config_links\">links</a> NodeList.", "default": "true", "readonly": "", "guessedname": "totalLinks", "guessedtype": "property", "type": "boolean"}, "arrowRightEl": {"description": "The element to be used as arrow right.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowRightEl", "guessedtype": "property", "type": "Node"}, "infoTemplate": {"default": "'Image {current} of {total}'", "type": "String", "description": "String template used to display the information.", "guessedname": "infoTemplate", "guessedtype": "property"}, "loader": {"default": "Generated HTML div element.", "type": "Node", "description": "HTML element to house the <code>img</code> which is being loaded.", "guessedname": "loader", "guessedtype": "property"}, "infoEl": {"description": "The element to be used as info.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "infoEl", "guessedtype": "property", "type": "Node"}, "preloadAllImages": {"default": "false", "type": "boolean", "description": "Preload all images grabbed from the <a\nhref=\"ImageViewer.html#config_links\">links</a> attribute.", "guessedname": "preloadAllImages", "guessedtype": "property"}, "closeEl": {"description": "The element to be used as close.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "closeEl", "guessedtype": "property", "type": "Node"}, "captionFromTitle": {"default": "true", "type": "boolean", "description": "If <code>true</code> the <a\nhref=\"ImageViewer.html#config_caption\">caption</a> will be pulled\nfrom the title DOM attribute.", "guessedname": "captionFromTitle", "guessedtype": "property"}, "imageAnim": {"default": "Predefined <a href=\"Anim.html\">Anim</a> configuration.", "type": "Object", "description": "Configuration attributes passed to the <a href=\"Anim.html\">Anim</a>\nclass.", "guessedname": "imageAnim", "guessedtype": "property"}, "loading": {"default": "false", "type": "boolean", "description": "Whether the image is during a loading state.", "guessedname": "loading", "guessedtype": "property"}, "showClose": {"default": "true", "type": "boolean", "description": "Show close icon control.", "guessedname": "showClose", "guessedtype": "property"}, "showArrows": {"default": "true", "type": "boolean", "description": "Show the arrow controls.", "guessedname": "showArrows", "guessedtype": "property"}, "anim": {"default": "true", "type": "boolean", "description": "If <code>true</code> the navigation is animated.", "guessedname": "anim", "guessedtype": "property"}, "arrowLeftEl": {"description": "The element to be used as arrow left.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "arrowLeftEl", "guessedtype": "property", "type": "Node"}, "centered": {"default": "true", "type": "boolean", "description": "If <code>true</code> the Overlay with the image will be positioned\non the center of the viewport.", "guessedname": "centered", "guessedtype": "property"}, "captionEl": {"description": "The element to be used as caption.", "default": "Generated HTML div element.", "readonly": "", "guessedname": "captionEl", "guessedtype": "property", "type": "Node"}, "loadingEl": {"default": "Generated HTML div element.", "type": "Node", "description": "The element to be used as loading.", "guessedname": "loadingEl", "guessedtype": "property"}, "caption": {"default": "''", "type": "String", "description": "The caption of the displayed image.", "guessedname": "caption", "guessedtype": "property"}, "currentIndex": {"default": "0", "type": "Number", "description": "Index of the current image.", "guessedname": "currentIndex", "guessedtype": "property"}, "modal": {"default": "{ opacity: .8, background: '#000' }", "type": "boolean | Object", "description": "Displays the modal <a href=\"OverlayMask.html\">OverlayMask</a> on\nthe viewport. Set to <code>false</code> to disable.", "guessedname": "modal", "guessedtype": "property"}}, "methods": {"preloadImage": {"params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Preload an image based on its <code>index</code>.", "guessedname": "preloadImage", "guessedtype": "function"}, "_getInfoTemplate": {"return": {"type": "String", "description": "Parsed string."}, "description": "Get the <a href=\"ImageViewer.html#config_info\">info</a> template.", "protected": "", "params": [{"type": "String", "name": "v", "description": " template"}], "guessedname": "_getInfoTemplate", "guessedtype": "function"}, "hasNext": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a next element to navigate.", "guessedname": "hasNext", "guessedtype": "function"}, "show": {"description": "Show the ImageViewer UI.", "guessedname": "show", "guessedtype": "function"}, "_onClickRightArrow": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the right arrow icon.", "guessedname": "_onClickRightArrow", "guessedtype": "function"}, "showLoading": {"description": "Show the loading icon.", "guessedname": "showLoading", "guessedtype": "function"}, "hasLink": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Check if there is a node reference for the <code>currentIndex</code>.", "guessedname": "hasLink", "guessedtype": "function"}, "preloadAllImages": {"description": "Preload all images.", "guessedname": "preloadAllImages", "guessedtype": "function"}, "getLink": {"return": {"type": "Node", "description": ""}, "params": [{"type": "Number", "name": "currentIndex", "description": ""}], "description": "Get the Node reference to the <code>currentIndex</code> element from\nthe <a href=\"ImageViewer.html#config_links\">links</a>.", "guessedname": "getLink", "guessedtype": "function"}, "close": {"description": "Close the ImageViewer.", "guessedname": "close", "guessedtype": "function"}, "_afterLoadingChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_loading\">loading</a> attribute change.", "guessedname": "_afterLoadingChange", "guessedtype": "function"}, "hideMask": {"description": "Hide the <a href=\"OverlayMask.html\">OverlayMask</a> used when <a\nhref=\"ImageViewer.html#config_modal\">modal</a> is <code>true</code>.", "guessedname": "hideMask", "guessedtype": "function"}, "_renderControls": {"protected": "", "description": "Render the controls UI.", "guessedname": "_renderControls", "guessedtype": "function"}, "next": {"description": "Load the next image.", "guessedname": "next", "guessedtype": "function"}, "hasPrev": {"return": {"type": "boolean", "description": ""}, "description": "Check if there is a previous element to navigate.", "guessedname": "hasPrev", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the ImageViewer UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "loadImage": {"params": [{"type": "String", "name": "src", "description": " Image src."}], "description": "Load an image <code>src</code> on the ImageViewer.", "guessedname": "loadImage", "guessedtype": "function"}, "_renderFooter": {"protected": "", "description": "Render the footer UI.", "guessedname": "_renderFooter", "guessedtype": "function"}, "_syncCaptionUI": {"protected": "", "description": "Sync the caption UI.", "guessedname": "_syncCaptionUI", "guessedtype": "function"}, "_onClickLinks": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the links.", "guessedname": "_onClickLinks", "guessedtype": "function"}, "showMask": {"description": "Show the the OverlayMask used on the <a\nhref=\"ImageViewer.html#config_modal\">modal</a>.", "guessedname": "showMask", "guessedtype": "function"}, "_onClickCloseEl": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the close icon.", "guessedname": "_onClickCloseEl", "guessedtype": "function"}, "_syncControlsUI": {"protected": "", "description": "Sync the controls UI.", "guessedname": "_syncControlsUI", "guessedtype": "function"}, "_syncInfoUI": {"protected": "", "description": "Sync the info UI.", "guessedname": "_syncInfoUI", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_visible\">visible</a> attribute change.", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the ImageViewer class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "_onClickLeftArrow": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event on the left arrow icon.", "guessedname": "_onClickLeftArrow", "guessedtype": "function"}, "_syncImageViewerUI": {"protected": "", "description": "Sync the ImageViewer UI.", "guessedname": "_syncImageViewerUI", "guessedtype": "function"}, "hideControls": {"description": "Hide all UI controls (i.e., arrows, close icon etc).", "guessedname": "hideControls", "guessedtype": "function"}, "getCurrentLink": {"return": {"type": "Node", "description": ""}, "description": "Get the current loaded node link reference.", "guessedname": "getCurrentLink", "guessedtype": "function"}, "_onKeyInteraction": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Handles the key interaction (i.e., next, prev etc).", "guessedname": "_onKeyInteraction", "guessedtype": "function"}, "_onLoadImage": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires on a image load.", "guessedname": "_onLoadImage", "guessedtype": "function"}, "_afterRender": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the ImageViewer render phase.", "guessedname": "_afterRender", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ImageViewer. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-image-viewer-base.js", "shortname": "ImageViewer", "properties": {"ImageViewer.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "_keyHandler": {"protected": "", "type": "EventHandler", "description": "Handler for the key events.", "guessedname": "_keyHandler", "guessedtype": "property"}, "activeImage": {"protected": "", "type": "Number", "description": "The index of the active image.", "guessedname": "activeImage", "guessedtype": "property"}, "ImageViewer.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ImageViewer.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-image-viewer-base/main.png\"/></p>\nA base class for ImageViewer, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageViewer({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageViewer.html#configattributes\">Configuration Attributes</a> available for\nImageViewer."}, "A.HTML5": {"name": "A.HTML5", "namespace": "", "module": "aui-node", "guessedname": "HTML5", "methods": {"IECreateFix": {"return": {"type": "Node | DocumentFragment", "description": ""}, "params": [{"type": "Node | DocumentFragment", "name": "frag", "description": " Fragment to be fixed."}, {"type": "String", "name": "content", "description": " HTML to be set (using innerHTML) on the <code>frag</code>."}], "description": "Receives a <code>frag</code> and a HTML content. This method\nshivs the HTML5 nodes appended to a Node or fragment which is not\non the document yet.", "guessedname": "IECreateFix", "guessedtype": "function"}, "_doBeforeCreate": {"return": {"type": "DocumentFragment", "description": ""}, "description": "AOP listener to the A.DOM._create method. This method\nintercepts all the calls to the A.DOM._create and append the\ngenerated fragment to <a\nhref=\"A.HTML5.html#property_A.HTML._fragHTML5Shived\">A.HTML._fragHTML5Shived</a>,\nthis fixes the IE bug for painting the HTML5 nodes on the HTML\nfragment.", "protected": "", "params": [{"type": "String", "name": "html", "description": " HTML content"}, {"type": "String", "name": "doc", "description": ""}, {"type": "String", "name": "tag", "description": ""}], "guessedname": "_doBeforeCreate", "guessedtype": "function"}}, "file": "aui-node-html5.js", "guessedtype": "property", "shortname": "A.HTML5", "properties": {"A.HTML._fragHTML5Shived": {"protected": "", "type": "DocumentFragment (shived)", "description": "A global DocumentFragment already HTML5 shived, for performance\nreasons. (i.e., all nodes and its HTML5 children appended to this\nfragment iherits the styles on IE).", "guessedname": "_fragHTML5Shived", "guessedtype": "property"}}, "description": "<p>An object that encapsulates util methods for HTML5 shiving.</p>\n<h2>What is a \"shiv\"?</h1>\n<p>To the world, a shiv is a slang term for a sharp object used as a\nknife-like weapon. To Internet Explorer, a shiv is a script that, when\nexecuted, forces the browser to recognize HTML5 elements.</p>"}, "Component": {"name": "Component", "configs": {"owner": {"deprecated": "See <a href=\"WidgetParent.html\">WidgetParent</a>.", "type": "Widget", "description": "A Component that will fire the same events as the current Component.", "guessedname": "owner", "guessedtype": "property"}, "hideClass": {"default": "'aui-helper-hidden'", "type": "String", "description": "css class added to hide the <code>boundingBox</code> when\n<a href=\"Component.html#config_visible\">visible</a> is set to\n<code>false</code>.", "guessedname": "hideClass", "guessedtype": "property"}, "cssClass": {"default": "null", "type": "String", "description": "CSS class to be automatically added to the <code>boundingBox</code>.", "guessedname": "cssClass", "guessedtype": "property"}, "render": {"default": "false", "type": "boolean", "description": "If <code>true</code> the render phase will be autimatically invoked\npreventing the <code>.render()</code> manual call.", "guessedname": "render", "guessedtype": "property"}, "relayEvents": {"default": "true", "type": "boolean", "description": "When set to <code>true</code> the events on this Component are also\nfired on the <a href=\"Component.html#config_owner\">owner</a> Component.", "guessedname": "relayEvents", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for Component, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li></li>\n</ul>\nCheck the list of <a href=\"Component.html#configattributes\">Configuration Attributes</a> available for\nComponent."}], "namespace": "", "module": "aui-component", "events": {"relayEventsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "relayEventsChange", "description": "Fires when the value for the configuration attribute 'relayEvents' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "ownerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "ownerChange", "description": "Fires when the value for the configuration attribute 'owner' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "renderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderChange", "description": "Fires when the value for the configuration attribute 'render' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cssClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cssClassChange", "description": "Fires when the value for the configuration attribute 'cssClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideClassChange", "description": "Fires when the value for the configuration attribute 'hideClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Component", "methods": {"_setComponentClassNames": {"protected": "", "description": "Set the class names on the Component <code>contentBox</code>.", "guessedname": "_setComponentClassNames", "guessedtype": "function"}, "_afterComponentVisibleChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Component.html#config_visible\">visible</a> attribute change.", "guessedname": "_afterComponentVisibleChange", "guessedtype": "function"}, "clone": {"return": {"type": "Widget", "description": "Cloned instance."}, "params": [{"type": "Object", "name": "config", "description": ""}], "description": "Clone the current Component.", "guessedname": "clone", "guessedtype": "function"}, "_setOwnerComponent": {"guessedname": "_setOwnerComponent", "params": [{"type": "Widget", "name": "ownerComponent", "description": ""}], "description": "Setter for\n<a href=\"Component.html#property__ownerComponent\">_ownerComponent</a>\nproperty.", "private": "", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Component instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_afterCssClassChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Component.html#config_cssClass\">cssClass</a> attribute change.", "guessedname": "_afterCssClassChange", "guessedtype": "function"}, "toggle": {"description": "Toggle the visibility of the Panel toggling the value of the\n<a href=\"Widget.html#config_visible\">visible</a> attribute.", "guessedname": "toggle", "guessedtype": "function"}, "_afterComponentRelayEventsChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Component.html#config_relayEvents\">relayEvents</a> attribute change.", "guessedname": "_afterComponentRelayEventsChange", "guessedtype": "function"}, "_relayEvents": {"protected": "", "description": "Fires the events onthe\n<a href=\"Component.html#config_owner\">owner</a>.", "guessedname": "_relayEvents", "guessedtype": "function"}, "_setRelayEvents": {"protected": "", "params": [{"type": "boolean", "name": "relayEvents", "description": ""}], "description": "Setter for <a href=\"Component.html#config_relayEvents\">relayEvents</a>.", "guessedname": "_setRelayEvents", "guessedtype": "function"}, "_afterComponentDestroy": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Invoked after the destroy phase. Removes the\n<code>boundingBox</code> from the DOM.", "guessedname": "_afterComponentDestroy", "guessedtype": "function"}, "_uiSetCssClass": {"protected": "", "params": [{"type": "String", "name": "newVal", "description": ""}, {"type": "String", "name": "prevVal", "description": ""}], "description": "Applies the CSS classes to the <code>boundingBox</code> and\n<code>contentBox</code>.", "guessedname": "_uiSetCssClass", "guessedtype": "function"}, "_afterComponentOwnerChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Component.html#config_owner\">owner</a> attribute change.", "guessedname": "_afterComponentOwnerChange", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "aui-component.js", "guessedtype": "function", "shortname": "Component", "properties": {"Component.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Component.", "guessedname": "ATTRS", "guessedtype": "property"}, "Component.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for Component, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li></li>\n</ul>\nCheck the list of <a href=\"Component.html#configattributes\">Configuration Attributes</a> available for\nComponent."}, "OverlayLoading": {"name": "OverlayLoading", "configs": {"messageEl": {"default": "Generated HTML div element.", "type": "String", "description": "Node element to display the message.", "guessedname": "messageEl", "guessedtype": "property"}, "strings": {"default": "{ loading: 'Loading&hellip;' }", "type": "Object", "description": "Strings used on the OverlayLoading. See\n<a href=\"Widget.html#method_strings\">strings</a>.", "guessedname": "strings", "guessedtype": "property"}, "target": {"default": "null", "type": "Node | Widget", "description": "Node where the mask will be positioned and re-dimensioned.", "guessedname": "target", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-loading/main.png\"/></p>\nA base class for OverlayLoading, providing:\n<ul>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n<li>Display a centered \"loading\" message on the masked node</li>\n</ul>\nQuick Example:<br/>\n<pre><code>node.plug(A.OverlayLoading, { background: '#000' });</code></pre>\nCheck the list of <a href=\"OverlayLoading.html#configattributes\">Configuration Attributes</a> available for\nOverlayLoading."}], "namespace": "", "module": "aui-overlay", "events": {"messageElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "messageElChange", "description": "Fires when the value for the configuration attribute 'messageEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stringsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stringsChange", "description": "Fires when the value for the configuration attribute 'strings' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "OverlayLoading", "methods": {"hide": {"description": "Invoke the\n<a href=\"OverlayLoading.html#property_overlayMask\">overlayMask</a>\n<code>hide</code> method."}, "show": {"description": "Invoke the\n<a href=\"OverlayLoading.html#property_overlayMask\">overlayMask</a>\n<code>show</code> method."}, "_createDynamicAttrs": {"protected": "", "params": [{"type": "Object", "name": "config", "description": " Object literal specifying widget configuration properties."}], "description": "Create dynamic attributes listeners to invoke the setter on\n<a href=\"OverlayLoading.html#property_overlayMask\">overlayMask</a> after\nthe attribute is set on the OverlayLoading instance.", "guessedname": "_createDynamicAttrs", "guessedtype": "function"}, "refreshMask": {"description": "Invoke the\n<a href=\"OverlayLoading.html#property_overlayMask\">overlayMask</a>\n<code>refreshMask</code> method.", "guessedname": "refreshMask", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during OverlayLoading instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "toggle": {"description": "Invoke the\n<a href=\"OverlayLoading.html#property_overlayMask\">overlayMask</a>\n<code>toggle</code> method."}, "_afterVisibleChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"OverlayLoading.html#config_visible\">visible</a> attribute change.", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayLoading UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_bindOverlayMaskUI": {"protected": "", "description": "Bind events to the\n<a href=\"OverlayLoading.html#property_overlayMask\">overlayMask</a>.", "guessedname": "_bindOverlayMaskUI", "guessedtype": "function"}, "_renderOverlayMask": {"protected": "", "description": "Render\n<a href=\"OverlayLoading.html#property_overlayMask\">overlayMask</a>\ninstance.", "guessedname": "_renderOverlayMask", "guessedtype": "function"}, "centerMessage": {"description": "Center the\n<a href=\"OverlayLoading.html#config_messageEl\">messageEl</a> with the\n<a href=\"OverlayLoading.html#config_target\">target</a> node.", "guessedname": "centerMessage", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the OverlayLoading. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "aui-overlay-loading.js", "guessedtype": "function", "shortname": "OverlayLoading", "properties": {"OverlayLoading.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}, "overlayMask": {"protected": "", "type": "OverlayMask", "description": "Stores the <a href=\"OverlayMask.html\">OverlayMask</a> used\ninternally.", "guessedname": "overlayMask", "guessedtype": "property"}, "OverlayLoading.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "OverlayLoading.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayLoading.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-loading/main.png\"/></p>\nA base class for OverlayLoading, providing:\n<ul>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n<li>Display a centered \"loading\" message on the masked node</li>\n</ul>\nQuick Example:<br/>\n<pre><code>node.plug(A.OverlayLoading, { background: '#000' });</code></pre>\nCheck the list of <a href=\"OverlayLoading.html#configattributes\">Configuration Attributes</a> available for\nOverlayLoading."}, "A.Node": {"name": "A.Node", "constructors": [{"description": "Augment the <a href=\"Node.html\">YUI3 Node</a> with more util methods.\nCheck the list of <a href=\"Node.html#methods\">Methods</a> available for\nAUI Node."}], "namespace": "", "module": "aui-node", "methods": {"_getText": {"guessedname": "_getText", "params": [{"type": "Native NodeList", "name": "childNodes", "description": ""}], "description": "Extract text content from the passed nodes.", "private": "", "guessedtype": "function"}, "show": {"chainable": "", "params": [{"type": "string", "name": "cssClass", "description": " Class name to hide the element. Optional."}], "description": "<p>Show the node removing a css class used to hide it. Use the same\nclassName added using the <a href=\"A.Node.html#method_hide\">hide</a>\nmethod. If <code>cssClass</code> is not passed as argument, the\nclassName 'aui-helper-hidden' will be used by default.</p>\n<p><string>NOTE:</string> This method assume that your node were hidden\nbecause of the 'aui-helper-hidden' css class were being used. This won't\nmanipulate the inline <code>style.display</code> property.</p>", "guessedname": "show", "guessedtype": "function"}, "text": {"params": [{"type": "String", "name": "text", "description": " A string of text to set as the content of the node instance."}], "description": "<p>Get or Set the combined text contents of the node instance,\nincluding it's descendants. If the <code>text</code>\nis passed it's set the content of the element, otherwise it works as a\ngetter for the current content.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.text('Setting new text content');\n// Alert the value of the current content\nalert( node.text() );\n</code></pre>", "guessedname": "text", "guessedtype": "function"}, "getDOM": {"return": {"type": "HTMLNode", "description": "The DOM node bound to the Node instance."}, "description": "Retrieves the DOM node bound to a Node instance. See\n<a href=\"Node.html#method_getDOMNode\">getDOMNode</a>.", "guessedname": "getDOM", "guessedtype": "function"}, "resetId": {"chainable": "", "params": [{"type": "String", "name": "prefix", "description": " Optional prefix for the guid."}], "description": "Generate an unique identifier and reset the id attribute of the node\ninstance using the new value. Invokes the\n<a href=\"A.Node.html#method_guid\">guid</a>.", "guessedname": "resetId", "guessedtype": "function"}, "toggle": {"chainable": "", "params": [{"type": "String", "name": "cssClass", "description": " Class name to hide or show the element. Optional."}], "description": "<p>Displays or hide the node instance.</p>\n<p><string>NOTE:</string> This method assume that your node were hidden\nbecause of the 'aui-helper-hidden' css class were being used. This won't\nmanipulate the inline <code>style.display</code> property.</p>", "guessedname": "toggle", "guessedtype": "function"}, "outerHTML": {"return": {"type": "string", "description": "The outerHTML of the given element."}, "description": "Gets the outerHTML of a node, which islike innerHTML, except that it\nactually contains the HTML of the node itself.", "guessedname": "outerHTML", "guessedtype": "function"}, "guid": {"return": {"type": "String", "description": "The current id of the node"}, "params": [{"type": "string", "name": "prefix", "description": " optional guid prefix"}], "description": "Set the id of the Node instance if the object does not have one. The\ngenerated id is based on a guid created by the\n<a href=\"YUI.html#method_stamp\">stamp</a> method.", "guessedname": "guid", "guessedtype": "function"}, "hide": {"chainable": "", "params": [{"type": "string", "name": "cssClass", "description": " Class name to hide the element. Optional."}], "description": "<p>Hide the node adding a css class on it. If <code>cssClass</code> is not\npassed as argument, the className 'aui-helper-hidden' will be used by\ndefault.</p>\n<p><string>NOTE:</string> This method assume that your node were visible\nbecause the absence of 'aui-helper-hidden' css class. This won't\nmanipulate the inline <code>style.display</code> property.</p>", "guessedname": "hide", "guessedtype": "function"}, "val": {"params": [{"type": "string", "name": "value", "description": " Value to be set. Optional."}], "description": "<p>Get or Set the value attribute of the node instance. If the\n<code>value</code> is passed it's set the value of the element,\notherwise it works as a getter for the current value.</p>\nExample:\n<pre><code>var input = A.one('#inputId');\ninput.val('Setting new input value');\n// Alert the value of the input\nalert( input.val() );\n</code></pre>", "guessedname": "val", "guessedtype": "function"}, "unselectable": {"chainable": "", "description": "Disables text selection for this element (normalized across browsers).", "guessedname": "unselectable", "guessedtype": "function"}, "html": {"params": [{"type": "string", "name": "value", "description": " A string of html to set as the content of the node instance."}], "description": "<p>Get or Set the HTML contents of the node. If the <code>value</code>\nis passed it's set the content of the element, otherwise it works as a\ngetter for the current content.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.html('Setting new HTML');\n// Alert the value of the current content\nalert( node.html() );\n</code></pre>", "guessedname": "html", "guessedtype": "function"}, "empty": {"chainable": "", "description": "<p>This method removes not only child (and other descendant) elements,\nbut also any text within the set of matched elements. This is because,\naccording to the DOM specification, any string of text within an element\nis considered a child node of that element.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.empty();\n</code></pre>", "guessedname": "empty", "guessedtype": "function"}, "placeAfter": {"chainable": "", "params": [{"type": "Node", "name": "newNode", "description": " Node to insert."}], "description": "<p>Inserts a <code>newNode</code> after the node instance (i.e., as the next\nsibling). If the reference node has no parent, then does nothing.</p>\nExample:\n<pre><code>var titleNode = A.one('#titleNode');\nvar descriptionNode = A.one('#descriptionNode');\n// the description is usually shown after the title\ntitleNode.placeAfter(descriptionNode);\n</code></pre>", "guessedname": "placeAfter", "guessedtype": "function"}, "center": {"chainable": "", "params": [{"type": "Node | String", "name": "centerWith", "description": " Node to center with"}], "description": "<p>Centralize the current Node instance with the passed\n<code>centerWith</code> Node, if not specified, the body will be\nused.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\n// Center the <code>node</code> with the <code>#container</code>.\nnode.center('#container');\n</code></pre>", "guessedname": "center", "guessedtype": "function"}, "selectable": {"chainable": "", "description": "Enables text selection for this element (normalized across browsers).", "guessedname": "selectable", "guessedtype": "function"}, "swallowEvent": {"chainable": "", "params": [{"type": "String/Array", "name": "eventName", "description": " an event or array of events to stop from bubbling"}, {"type": "Boolean", "name": "preventDefault", "description": " (optional) true to prevent the default action too"}], "description": "<p>Stops the specified event(s) from bubbling and optionally prevents the\ndefault action.</p>\nExample:\n<pre><code>var anchor = A.one('a#anchorId');\nanchor.swallowEvent('click');\n</code></pre>", "guessedname": "swallowEvent", "guessedtype": "function"}, "radioClass": {"chainable": "", "params": [{"type": "String", "name": "cssClass", "description": ""}], "description": "Add one or more CSS classes to an element and remove the class(es)\nfrom the siblings of the element.", "guessedname": "radioClass", "guessedtype": "function"}, "placeBefore": {"chainable": "", "params": [{"type": "Node", "name": "newNode", "description": " Node to insert."}], "description": "<p>Inserts a <code>newNode</code> before the node instance (i.e., as the previous\nsibling). If the reference node has no parent, then does nothing.</p>\nExample:\n<pre><code>var descriptionNode = A.one('#descriptionNode');\nvar titleNode = A.one('#titleNode');\n// the title is usually shown before the description\ndescriptionNode.placeBefore(titleNode);\n</code></pre>", "guessedname": "placeBefore", "guessedtype": "function"}, "prependTo": {"chainable": "", "params": [{"type": "Node | String", "name": "selector", "description": " A selector, element, HTML string, Node"}], "description": "<p>Inserts the node instance to the begining of the <code>selector</code>\nnode (i.e., insert before the <code>firstChild</code> of the\n<code>selector</code>).</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.prependTo('body');\n</code></pre>", "guessedname": "prependTo", "guessedtype": "function"}, "attr": {"return": {"type": "String", "description": ""}, "params": [{"type": "String", "name": "name", "description": " The name of the attribute"}, {"type": "String", "name": "value", "description": " The value of the attribute to be set. Optional."}], "description": "<p>Get or Set the value of an attribute for the first element in the\nset of matched elements. If only the <code>name</code> is passed it\nworks as a getter.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\nnode.attr('title', 'Setting a new title attribute');\n// Alert the value of the title attribute: 'Setting a new title attribute'\nalert( node.attr('title') );\n</code></pre>", "guessedname": "attr", "guessedtype": "function"}, "appendTo": {"return": {"type": "String", "description": ""}, "description": "<p>Insert the node instance to the end of the <code>selector</code>\nelement.</p>\nExample:\n<pre><code>var node = A.one('#nodeId');\n// using another Node instance\nvar body = A.one('body');\nnode.appendTo(body);\n// using a CSS selector\nnode.appendTo('#container');\n</code></pre>", "chainable": "", "params": [{"type": "Node | String", "name": "selector", "description": " A selector, element, HTML string, Node"}], "guessedname": "appendTo", "guessedtype": "function"}}, "uses": ["Node"], "file": "aui-node-base.js", "shortname": "A.Node", "description": "Augment the <a href=\"Node.html\">YUI3 Node</a> with more util methods.\nCheck the list of <a href=\"Node.html#methods\">Methods</a> available for\nAUI Node."}, "Tooltip": {"name": "Tooltip", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tooltip/main.png\"/></p>\nA base class for Tooltip, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Additional information when hovering over a target element</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Tooltip({\ntrigger: '#element',\nalign: { points: [ 'lc', 'rc' ] },\nbodyContent: 'Simple tooltip'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Tooltip.html#configattributes\">Configuration Attributes</a> available for\nTooltip."}], "namespace": "", "module": "aui-tooltip", "events": {"alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideDelayChange", "description": "Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"anim": {"default": "{ show: false }", "type": "Object", "description": "See <a href=\"OverlayContextPanel.html#config_anim\">OverlayContextPanel anim</a>.", "guessedname": "anim", "guessedtype": "property"}, "hideOn": {"default": "mouseout", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">OverlayContext showOn</a>.", "guessedname": "hideOn", "guessedtype": "property"}, "title": {"default": "false", "type": "boolean", "description": "Use the content of the <code>title</code> attribute as the Tooltip\ncontent.", "guessedname": "title", "guessedtype": "property"}, "align": {"default": "{ node: null, points: [ BL, TR ] }", "type": "Object", "description": "See <a href=\"Overlay.html#config_align\">OverlayContextPanel align</a>.", "guessedname": "align", "guessedtype": "property"}, "showOn": {"default": "mouseover", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">OverlayContext showOn</a>.", "guessedname": "showOn", "guessedtype": "property"}, "hideDelay": {"default": "500", "type": "Number", "description": "See <a href=\"OverlayContext.html#config_hideDelay\">OverlayContext hideDelay</a>.", "guessedname": "hideDelay", "guessedtype": "property"}}, "methods": {"bindUI": {"protected": "", "description": "Bind the events on the Tooltip UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_afterBodyChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Fires after the attribute <code>bodyContent</code> change.", "guessedname": "_afterBodyChange", "guessedtype": "function"}, "_loadBodyContentFromTitle": {"protected": "", "params": [{"type": "Node", "name": "currentNode", "description": " Current node being used by the Tooltip"}], "description": "Use the <code>title</code> content of the <code>currentNode</code> as\nthe content of the Tooltip.", "guessedname": "_loadBodyContentFromTitle", "guessedtype": "function"}, "show": {"description": "Over-ride the <code>show</code> to invoke the\n<a href=\"Tooltip.html#method__loadBodyContentFromTitle\">_loadBodyContentFromTitle</a>.\nSee <a href=\"OverlayContext.html#config_show\">OverlayContext show</a>.", "guessedname": "show", "guessedtype": "function"}}, "extends": "OverlayContextPanel", "superclass": "OverlayContextPanel", "file": "aui-tooltip.js", "shortname": "Tooltip", "properties": {"Tooltip.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Tooltip.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Tooltip.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tooltip/main.png\"/></p>\nA base class for Tooltip, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Additional information when hovering over a target element</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Tooltip({\ntrigger: '#element',\nalign: { points: [ 'lc', 'rc' ] },\nbodyContent: 'Simple tooltip'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Tooltip.html#configattributes\">Configuration Attributes</a> available for\nTooltip."}, "OverlayContextManager": {"name": "OverlayContextManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayContextManager:"}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayContextManager", "static": "", "superclass": "OverlayManager", "file": "aui-overlay-context.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "OverlayContextManager", "description": "A base class for OverlayContextManager:"}, "FormManager": {"name": "FormManager", "constructors": [{"params": [{"type": "String", "name": "form_name", "description": "  The name attribute of the HTML form."}, {"type": "Object", "name": "config", "description": "  Configuration.\n<code>status_node</code> is an optional element in which to display\noverall status.  <code>default_value_map</code> is an optional\nmapping of form element names to default values.  Default values\nencoded in the markup will be merged into this map, but values\npassed to the constructor will take precedence."}], "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>aui-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>aui-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>aui-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>aui-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use aui-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}], "namespace": "", "module": "gallery-formmgr", "properties": {"A.FormManager.status_failure_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when\n<code>displayFormMessage()</code> is called with\n<code>error=true</code>.", "guessedname": "status_failure_class", "guessedtype": "property"}, "A.FormManager.status_marker_class": {"type": "{String}", "description": "The CSS class which marks the container for the status message within a\nrow of the form.", "guessedname": "status_marker_class", "guessedtype": "property"}, "A.FormManager.row_marker_class": {"type": "{String}", "description": "The CSS class which marks each row of the form.  Typically, each element\n(or a very tightly coupled set of elements) is placed in a separate row.", "guessedname": "row_marker_class", "guessedtype": "property"}, "A.FormManager.row_status_prefix": {"type": "{String}", "description": "The prefix for all CSS classes placed on a form row when pre-validation\nfails.  The full CSS class is formed by appending the value from\n<code>A.FormManager.status_order</code>.", "guessedname": "row_status_prefix", "guessedtype": "property"}, "A.FormManager.status_success_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when\n<code>displayFormMessage()</code> is called with\n<code>error=false</code>.", "guessedname": "status_success_class", "guessedtype": "property"}, "A.FormManager.status_none_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when it is empty.", "guessedname": "status_none_class", "guessedtype": "property"}}, "methods": {"A.FormManager.statusTakesPrecendence": {"return": {"type": "boolean", "description": "<code>true</code> if <code>new_status</code> takes precedence over <code>orig_status</code>"}, "description": "Compare two status values.", "static": "", "guessedname": "statusTakesPrecendence", "guessedtype": "function", "params": [{"type": "String", "name": "orig_status", "description": "  The name of the original status value."}, {"type": "String", "name": "new_status", "description": "  The name of the new status value."}]}, "registerButton": {"params": [{"type": "String|Object", "name": "el", "description": "  The selector for the element or the element itself"}], "description": "Register a button that can be disabled.  Buttons contained within\nthe form DOM element are automatically registered.", "guessedname": "registerButton", "guessedtype": "function"}, "postValidateForm": {"return": {"type": "boolean", "description": "<code>false</code> if validation fails"}, "description": "Hook called at the end of <code>validateForm()</code>.  This is the\nbest place to put holistic validations that touch multiple form\nelements.", "guessedname": "postValidateForm", "guessedtype": "function"}, "getForm": {"return": {"type": "DOM", "description": "The form DOM element."}, "guessedname": "getForm", "guessedtype": "function"}, "hasFileInputs": {"return": {"type": "boolean", "description": "<code>true</code> if the form contains file inputs.  These require special treatment when submitting via XHR."}, "guessedname": "hasFileInputs", "guessedtype": "function"}, "setRegex": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "String|RegExp", "name": "regex", "description": "  The regular expression to use"}, {"type": "String", "name": "flags", "description": "  If regex is a String, these are the flags used to construct a RegExp."}], "description": "<p>Set the regular expression used to validate the field value.</p>\n<p><strong>Since there is no default message for failed regular\nexpression validation, this function will complain if you have not\nalready called <code>setErrorMessages()</code> or\n<code>addErrorMessage</code> to specify an error message.</strong></p>", "guessedname": "setRegex", "guessedtype": "function"}, "enableForm": {"description": "Enable all the registered buttons.", "guessedname": "enableForm", "guessedtype": "function"}, "setErrorMessages": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "Object", "name": "map", "description": "  Map of error types to error messages."}], "description": "<p>Set the error messages for a form element.  This can be used to\noverride the default messages for individual elements</p>\n<p>The valid error types are:</p>\n<dl>\n<dt><code>required</code></dt>\n<dt><code>min_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>max_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>integer</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>decimal</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>regex</code></dt>\n<dd>This <string>must</strong> be set for elements which validate with regular expressions.</dd>\n</dl>", "guessedname": "setErrorMessages", "guessedtype": "function"}, "A.FormManager.getElementStatus": {"return": {"type": "mixed", "description": "The status (String) or <code>false</code>."}, "description": "Get the status of the given fieldset or form row.", "static": "", "guessedname": "getElementStatus", "guessedtype": "function", "params": [{"type": "String|Object", "name": "e", "description": "  The descriptor or DOM element."}]}, "setFormEnabled": {"params": [{"type": "boolean", "name": "enabled", "description": "  <code>true</code> to enable the form, <code>false</code> to disable the form"}], "description": "Set the enabled state all the registered buttons.", "guessedname": "setFormEnabled", "guessedtype": "function"}, "setFunction": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "Function|String|Object}\nThe function to call after basic validations succeed.  If this\nis a String, it is resolved in the scope of the FormManager\nobject.  If this is an object, it must be <code>{fn:,\nscope:", "name": "f", "description": " </code>.  The function will then be invoked in the\nspecified scope."}], "description": "Set the validation function for a form element.", "guessedname": "setFunction", "guessedtype": "function"}, "hasErrors": {"return": {"type": "boolean", "description": "<code>true</code> if there are any error messages displayed"}, "guessedname": "hasErrors", "guessedtype": "function"}, "clearForm": {"description": "Reset all values in the form to the defaults specified in the markup.", "guessedname": "clearForm", "guessedtype": "function"}, "prepareForm": {"return": {"type": "boolean", "description": "<code>true</code> if both pre & post hooks are happy"}, "description": "Prepare the form for display.", "guessedname": "prepareForm", "guessedtype": "function"}, "setDefaultValues": {"params": [{"type": "Object", "name": "default_value_map", "description": "  Mapping of form element names to values."}], "description": "Set the default values for all form elements.", "guessedname": "setDefaultValues", "guessedtype": "function"}, "notifyErrors": {"description": "Displays a generic message in <code>status_node</code> stating that\nthe form data failed to validate.  Override this if you want to get\nfancy.", "guessedname": "notifyErrors", "guessedtype": "function"}, "hasMessages": {"return": {"type": "boolean", "description": "<code>true</code> if there are any messages displayed, of any type"}, "guessedname": "hasMessages", "guessedtype": "function"}, "setDefaultValue": {"params": [{"type": "String", "name": "field_name", "description": "  The form element name."}, {"type": "String|Int|Float", "name": "default_value", "description": "  The default value."}], "description": "Set the default values for a single form element.", "guessedname": "setDefaultValue", "guessedtype": "function"}, "validateForm": {"description": "Validate the form.", "guessedname": "validateForm", "guessedtype": "function"}, "clearMessages": {"description": "Clear all messages in <code>status_node</code> and the form rows.", "guessedname": "clearMessages", "guessedtype": "function"}, "prePrepareForm": {"return": {"type": "boolean", "description": "<code>false</code> cancels <code>prepareForm()</code>."}, "description": "Hook called before <code>prepareForm()</code> executes.", "guessedname": "prePrepareForm", "guessedtype": "function"}, "postPrepareForm": {"return": {"type": "boolean", "description": "Return value from this function is returned by <code>prepareForm()</code>."}, "description": "Hook called after <code>prepareForm()</code> executes.", "guessedname": "postPrepareForm", "guessedtype": "function"}, "displayFormMessage": {"params": [{"type": "String", "name": "msg", "description": "  The message"}, {"type": "boolean", "name": "error", "description": "  <code>true</code> if the message is an error"}, {"type": "boolean", "name": "scroll", "description": "  <code>true</code> if <code>status_node</code> should be scrolled into view"}], "description": "Display a message in <code>status_node</code>.", "guessedname": "displayFormMessage", "guessedtype": "function"}, "postPopulateForm": {"description": "Hook for performing additional actions after\n<code>populateForm()</code> completes.", "guessedname": "postPopulateForm", "guessedtype": "function"}, "initFocus": {"description": "Set focus to first input field.  If a page contains multiple forms,\nonly call this for one of them.", "guessedname": "initFocus", "guessedtype": "function"}, "displayMessage": {"params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "msg", "description": "  The message"}, {"type": "String", "name": "type", "description": "  The message type (see A.FormManager.status_order)"}, {"type": "boolean", "name": "scroll", "description": "  <code>true</code> if the form row should be scrolled into view"}], "description": "Display a message for the form row containing the specified element.\nThe message will only be displayed if no message with a higher\nprecedence is already visible. (see A.FormManager.status_order)", "guessedname": "displayMessage", "guessedtype": "function"}, "getRowStatus": {"return": {"type": "mixed", "description": "The status (String) or <code>false</code>."}, "params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}], "description": "Get the message type displayed for the row containing the specified element.", "guessedname": "getRowStatus", "guessedtype": "function"}, "addErrorMessage": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "error_type", "description": "  The error message type.  Refer to setErrorMessages() for details."}, {"type": "String", "name": "msg", "description": "  The error message"}], "description": "Set one particular error message for a form element.", "guessedname": "addErrorMessage", "guessedtype": "function"}, "isChanged": {"return": {"type": "boolean", "description": "<code>false</code> if all form elements have the default values passed to the constructor"}, "description": "Check if form values have been modified.", "guessedname": "isChanged", "guessedtype": "function"}, "disableForm": {"description": "Disable all the registered buttons.", "guessedname": "disableForm", "guessedtype": "function"}, "populateForm": {"description": "Reset all values in the form to the defaults passed to the constructor.", "guessedname": "populateForm", "guessedtype": "function"}, "A.FormManager.getStatusPrecedence": {"return": {"type": "int", "description": "The position in the <code>status_order</code> array."}, "description": "Get the precedence of the given status name.", "static": "", "guessedname": "getStatusPrecedence", "guessedtype": "function", "params": [{"type": "String", "name": "status", "description": "  The name of the status value."}]}, "saveCurrentValuesAsDefault": {"description": "Store the current form values in <code>default_value_map</code>.", "guessedname": "saveCurrentValuesAsDefault", "guessedtype": "function"}}, "file": "aui-form-manager.js", "shortname": "FormManager", "configs": {"A.FormManager.Strings": {"type": "{Object}", "static": "", "description": "<p>Map of localizable strings used by pre-validation.</p>\n<dl>\n<dt><code>validation_error</code></dt>\n<dd>Displayed in <code>status_node</code> by <code>notifyErrors()</code> when pre-validation fails.</dd>\n<dt><code>required_string</code></dt>\n<dd>Displayed when <code>aui-required</code> fails on an input field.</dd>\n<dt><code>required_menu</code></dt>\n<dd>Displayed when <code>aui-required</code> fails on a select element.</dd>\n<dt><code>length_too_short</code>, <code>length_too_long</code>, <code>length_out_of_range</code></dt>\n<dd>Displayed when <code>aui-length</code> fails on an input field.</dd>\n<dt><code>integer</code>, <code>integer_too_small</code>, <code>integer_too_large</code>, <code>integer_out_of_range</code></dt>\n<dd>Displayed when <code>aui-integer</code> fails on an input field.</dd>\n<dt><code>decimal</code>, <code>decimal_too_small</code>, <code>decimal_too_large</code>, <code>decimal_out_of_range</code></dt>\n<dd>Displayed when <code>aui-decimal</code> fails on an input field.</dd>\n</dl>", "guessedname": "Strings", "guessedtype": "property"}, "A.FormManager.integer_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is an integer.\nThis can be localized, e.g., allow for thousands separator.", "guessedname": "integer_value_re", "guessedtype": "property"}, "A.FormManager.decimal_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is a decimal number.\nThis can be localized, e.g., use the correct decimal separator.", "guessedname": "decimal_value_re", "guessedtype": "property"}, "A.FormManager.status_order": {"type": "{Array}", "static": "", "description": "<p>Names of supported status values, highest precedence first.  Default:\n<code>[ 'error', 'warn', 'success', 'info' ]</code></p>\n<p>This is static because it links to CSS rules that define the\nappearance of each status type:  .formmgr-has{status}</p>", "guessedname": "status_order", "guessedtype": "property"}}, "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>aui-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>aui-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>aui-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>aui-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use aui-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}, "A.NodeList": {"name": "A.NodeList", "constructors": [{"description": "Augment the <a href=\"NodeList.html\">YUI3 NodeList</a> with more util methods.\nCheck the list of <a href=\"NodeList.html#methods\">Methods</a> available for\nAUI NodeList."}], "namespace": "", "module": "aui-node", "methods": {"getDoc": {"description": "Get the document node. Shortcut to <code>A.one(document)</code>.", "guessedname": "getDoc", "guessedtype": "function"}, "getWin": {"description": "Get the window node. Shortcut to <code>A.one(window)</code>.", "guessedname": "getWin", "guessedtype": "function"}, "all": {"description": "See <a href=\"Node.html#method_all\">Node all</a>.", "guessedname": "all", "guessedtype": "function"}, "getDOM": {"description": "See <a href=\"Node.html#method_getDOM\">Node getDOM</a>.", "guessedname": "getDOM", "guessedtype": "function"}, "one": {"description": "See <a href=\"Node.html#method_one\">Node one</a>.", "guessedname": "one", "guessedtype": "function"}, "getBody": {"description": "Get the body node. Shortcut to <code>A.one('body')</code>.", "guessedname": "getBody", "guessedtype": "function"}}, "uses": ["A.Node"], "file": "aui-node-base.js", "shortname": "A.NodeList", "description": "Augment the <a href=\"NodeList.html\">YUI3 NodeList</a> with more util methods.\nCheck the list of <a href=\"NodeList.html#methods\">Methods</a> available for\nAUI NodeList."}, "OverlayContextPanelManager": {"name": "OverlayContextPanelManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayContextPanelManager:"}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayContextPanelManager", "static": "", "superclass": "OverlayManager", "file": "aui-overlay-context-panel.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "OverlayContextPanelManager", "description": "A base class for OverlayContextPanelManager:"}, "DelayedTask": {"name": "DelayedTask", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}, {"type": "function", "name": "fn", "description": " Callback"}, {"type": "Object", "name": "scope", "description": " Context object. Optional."}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided to the listener."}], "description": "A base class for DelayedTask, providing:\n<ul>\n<li>Executes the supplied function in the context of the supplied object 'when' milliseconds later</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var delayed = new A.DelayedTask({\nfunction() {\n// This callback will be executed when the <code>DelayedTask</code> be invoked\n},\nscope\n});\n// executes after 1000ms the callback\ndelayed.delay(1000);\n</code></pre>\nCheck the list of <a href=\"DelayedTask.html#configattributes\">Configuration Attributes</a> available for\nDelayedTask."}], "namespace": "", "module": "aui-delayed-task", "guessedname": "DelayedTask", "methods": {"delay": {"params": [{"type": "Number", "name": "delay", "description": " Delay in milliseconds."}, {"type": "function", "name": "newFn", "description": " Callback."}, {"type": "Object", "name": "newScope", "description": " Context object. Optional."}, {"type": "", "name": "newArgs", "description": " 0..n additional arguments that should be provided to the listener."}], "description": "<p>This function is responsible to execute the user callback, passed in\nthe <code>constructor</code> after <code>delay</code> milliseconds.</p>\nExample:\n<pre><code>// executes after 1000ms the callback\ndelayed.delay(1000);</code></pre>", "guessedname": "delay", "guessedtype": "function"}, "cancel": {"description": "Cancel the delayed task in case it's running (i.e., clearInterval from\nthe current running <a href=\"DelayedTask.html#property__id\">_id</a>).", "guessedname": "cancel", "guessedtype": "function"}, "_getTime": {"protected": "", "return": {"type": "Number", "description": "Current timestamp"}, "description": "Get the current timestamp (i.e., now).", "guessedname": "_getTime", "guessedtype": "function"}}, "file": "aui-delayed-task.js", "guessedtype": "function", "shortname": "DelayedTask", "properties": {"_delay": {"description": "Stores the passed <code>delay</code> attribute.", "default": "0", "protected": "", "guessedname": "_delay", "guessedtype": "property", "type": "Number"}, "_scope": {"description": "Stores the passed <code>scope</code> attribute.", "default": "instance", "protected": "", "guessedname": "_scope", "guessedtype": "property", "type": "Object"}, "_args": {"protected": "", "type": "Object", "description": "Stores the passed <code>args</code> attribute.", "guessedname": "_args", "guessedtype": "property"}, "_time": {"description": "Stores the current timestamp given from\n<a href=\"DelayedTask.html#method__getTime\">_getTime</a>.", "default": "0", "protected": "", "guessedname": "_time", "guessedtype": "property", "type": "Number"}, "_id": {"description": "Stores the timer <code>id</code> given from the <code>setInterval</code>.", "default": "null", "protected": "", "guessedname": "_id", "guessedtype": "property", "type": "Number"}, "_fn": {"protected": "", "type": "function", "description": "Stores the passed <code>fn</code> attribute.", "guessedname": "_fn", "guessedtype": "property"}}, "description": "A base class for DelayedTask, providing:\n<ul>\n<li>Executes the supplied function in the context of the supplied object 'when' milliseconds later</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var delayed = new A.DelayedTask({\nfunction() {\n// This callback will be executed when the <code>DelayedTask</code> be invoked\n},\nscope\n});\n// executes after 1000ms the callback\ndelayed.delay(1000);\n</code></pre>\nCheck the list of <a href=\"DelayedTask.html#configattributes\">Configuration Attributes</a> available for\nDelayedTask."}, "Editable": {"name": "Editable", "configs": {"formatInput": {"default": "null", "type": "function", "description": "Function to format the input text displayed on the input.", "guessedname": "formatInput", "guessedtype": "property"}, "node": {"type": "Node", "description": "Node to setup the editable.", "guessedname": "node", "guessedtype": "property"}, "eventType": {"default": "'click'", "type": "String", "description": "Event type to initialize the editable.", "guessedname": "eventType", "guessedtype": "property"}, "cancelButton": {"default": "ToolSet constructor Object.", "type": "String", "description": "<a href=\"ToolSet.html\">ToolSet</a> constructor Object for the\ncancelButton.", "guessedname": "cancelButton", "guessedtype": "property"}, "contentText": {"default": "''", "type": "String", "description": "Content text.", "guessedname": "contentText", "guessedtype": "property"}, "formatOutput": {"default": "null", "type": "function", "description": "Function to format the output text displayed on the input.", "guessedname": "formatOutput", "guessedtype": "property"}, "saveButton": {"default": "ToolSet constructor Object.", "type": "String", "description": "<a href=\"ToolSet.html\">ToolSet</a> constructor Object for the\nsaveButton.", "guessedname": "saveButton", "guessedtype": "property"}, "renderTo": {"type": "String | Node", "description": "Node to render the editable.", "guessedname": "renderTo", "guessedtype": "property"}, "tools": {"default": "[]", "type": "Array", "description": "Array with tools for the <a href=\"ToolSet.html\">ToolSet</a>.", "guessedname": "tools", "guessedtype": "property"}, "inputType": {"default": "'text'", "type": "String", "description": "Type of the input used to edit the <a\nhref=\"Editable.html#config_node\">node</a>.", "guessedname": "inputType", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-editable/main.png\"/></p>\nA base class for Editable, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Edit in place elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Editable({\nnode: '#editor'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Editable.html#configattributes\">Configuration Attributes</a> available for\nEditable."}], "namespace": "", "module": "aui-editable", "events": {"cancelButtonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cancelButtonChange", "description": "Fires when the value for the configuration attribute 'cancelButton' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "save": {"preventable": "_defSaveFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The save event."}], "description": "Handles the save event.", "param": "{Event.Facade} event The save event.", "type": "{Event.Custom}"}, "formatInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatInputChange", "description": "Fires when the value for the configuration attribute 'formatInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "startEditing": {"preventable": "_defStartEditingFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The startEditing event."}], "description": "Handles the startEditing event.", "param": "{Event.Facade} event The startEditing event.", "type": "{Event.Custom}"}, "renderToChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "renderToChange", "description": "Fires when the value for the configuration attribute 'renderTo' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stopEditing": {"preventable": "_defStopEditingFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The stopEditing event."}], "description": "Handles the stopEditing event.", "param": "{Event.Facade} event The stopEditing event.", "type": "{Event.Custom}"}, "saveButtonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "saveButtonChange", "description": "Fires when the value for the configuration attribute 'saveButton' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "eventTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "eventTypeChange", "description": "Fires when the value for the configuration attribute 'eventType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cancel": {"preventable": "_defCancelFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The cancel event."}], "description": "Handles the cancel event.", "param": "{Event.Facade} event The cancel event.", "type": "{Event.Custom}"}, "inputTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputTypeChange", "description": "Fires when the value for the configuration attribute 'inputType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formatOutputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formatOutputChange", "description": "Fires when the value for the configuration attribute 'formatOutput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toolsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toolsChange", "description": "Fires when the value for the configuration attribute 'tools' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentTextChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentTextChange", "description": "Fires when the value for the configuration attribute 'contentText' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Editable", "methods": {"_createEvents": {"protected": "", "description": "Create the Events.", "guessedname": "_createEvents", "guessedtype": "function"}, "_defCancelFn": {"description": "Fires the cancel event.", "param": "{EventFacade} event cancel event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " cancel event facade"}], "guessedname": "_defCancelFn", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Editable UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onKeypressEditable": {"description": "Fires <code>onkeypress</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onKeypressEditable", "guessedtype": "function"}, "_onMouseEnterEditable": {"description": "Fires <code>onmouseenter</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseEnterEditable", "guessedtype": "function"}, "_toText": {"return": {"type": "String", "description": ""}, "description": "Converts HTML to text.", "param": "{String} text HTML input.", "protected": "", "params": [{"type": "String", "name": "text", "description": " HTML input."}], "guessedname": "_toText", "guessedtype": "function"}, "_toHTML": {"return": {"type": "String", "description": ""}, "description": "Converts the new lines <code>\\n</code> to <code><br/></code> (i.e.,\nnl2br).", "param": "{String} text Input text.", "protected": "", "params": [{"type": "String", "name": "text", "description": " Input text."}], "guessedname": "_toHTML", "guessedtype": "function"}, "_startEditing": {"description": "Fires when start editing.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_startEditing", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Editable instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_defSaveFn": {"description": "Fires the save event.", "param": "{EventFacade} event save event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " save event facade"}], "guessedname": "_defSaveFn", "guessedtype": "function"}, "_defStartEditingFn": {"description": "Fires the startEditing event.", "param": "{EventFacade} event startEditing event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " startEditing event facade"}], "guessedname": "_defStartEditingFn", "guessedtype": "function"}, "_setOutput": {"description": "Set the <code>innerHTML</code> of the <a\nhref=\"Editable.html#config_node\">node</a>.", "param": "{String} value", "protected": "", "params": [{"type": "String", "name": "value", "description": ""}], "guessedname": "_setOutput", "guessedtype": "function"}, "_afterFocusedChangeEditable": {"description": "Fires the <a href=\"Editable.html#event_stopEditing\">stopEditing</a>\nevent.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_afterFocusedChangeEditable", "guessedtype": "function"}, "_syncContentText": {"description": "Sync the content text.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_syncContentText", "guessedtype": "function"}, "cancel": {"description": "Cancel the editable. Return to the original state.", "guessedname": "cancel", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Editable UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_setInput": {"description": "Set the value of the <a\nhref=\"Editable.html#property_inputNode\">inputNode</a>.", "param": "{String} value Value of the input.", "protected": "", "params": [{"type": "String", "name": "value", "description": " Value of the input."}], "guessedname": "_setInput", "guessedtype": "function"}, "save": {"description": "Save the editable. Fires the\n<a href=\"Editable.html#event_save\">save</a> event.", "guessedname": "save", "guessedtype": "function"}, "_defStopEditingFn": {"description": "Fires the stopEditing event.", "param": "{EventFacade} event stopEditing event facade", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " stopEditing event facade"}], "guessedname": "_defStopEditingFn", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Editable. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_onMouseLeaveEditable": {"description": "Fires <code>onmouseleave</code> occurs on the editable element.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onMouseLeaveEditable", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-editable.js", "guessedtype": "function", "shortname": "Editable", "properties": {"Editable.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Editable.", "guessedname": "ATTRS", "guessedtype": "property"}, "Editable.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-editable/main.png\"/></p>\nA base class for Editable, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Edit in place elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Editable({\nnode: '#editor'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Editable.html#configattributes\">Configuration Attributes</a> available for\nEditable."}, "DatePickerSelect": {"name": "DatePickerSelect", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-calendar-datepicker-select/main.png\"/></p>\nA base class for DatePickerSelect, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Select a date from Calendar to select elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.DatePickerSelect({\ndisplayBoundingBox: '#displayBoundingBoxId',\n// locale: 'pt-br',\ndateFormat: '%m/%d/%y',\nyearRange: [ 1970, 2009 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"DatePickerSelect.html#configattributes\">Configuration Attributes</a> available for\nDatePickerSelect."}], "namespace": "", "module": "aui-calendar", "events": {"populateDayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateDayChange", "description": "Fires when the value for the configuration attribute 'populateDay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearFieldChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearFieldChange", "description": "Fires when the value for the configuration attribute 'yearField' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "populateYearChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateYearChange", "description": "Fires when the value for the configuration attribute 'populateYear' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dayFieldNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dayFieldNameChange", "description": "Fires when the value for the configuration attribute 'dayFieldName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "populateMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "populateMonthChange", "description": "Fires when the value for the configuration attribute 'populateMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "displayBoundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "displayBoundingBoxChange", "description": "Fires when the value for the configuration attribute 'displayBoundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthFieldNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthFieldNameChange", "description": "Fires when the value for the configuration attribute 'monthFieldName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dayFieldChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dayFieldChange", "description": "Fires when the value for the configuration attribute 'dayField' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearFieldNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearFieldNameChange", "description": "Fires when the value for the configuration attribute 'yearFieldName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerChange", "description": "Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "baseNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "baseNameChange", "description": "Fires when the value for the configuration attribute 'baseName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "appendOrderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "appendOrderChange", "description": "Fires when the value for the configuration attribute 'appendOrder' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "monthFieldChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "monthFieldChange", "description": "Fires when the value for the configuration attribute 'monthField' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "yearRangeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "yearRangeChange", "description": "Fires when the value for the configuration attribute 'yearRange' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"populateYear": {"default": "true", "type": "boolean", "description": "If true the select element for the year will be automatic\npopulated.", "guessedname": "populateYear", "guessedtype": "property"}, "dayField": {"default": "Generated HTML select element", "type": "{Node | String}", "description": "HTML element to receive the day value when a date is selected.", "guessedname": "dayField", "guessedtype": "property"}, "setValue": {"default": "false", "type": "boolean", "description": "Inherited from\n<a href=\"Calendar.html#config_setValue\">Calendar</a>.", "guessedname": "setValue", "guessedtype": "property"}, "monthFieldName": {"default": "month", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_monthField\">monthField</a>.", "guessedname": "monthFieldName", "guessedtype": "property"}, "populateDay": {"default": "true", "type": "boolean", "description": "If true the select element for the days will be automatic\npopulated.", "guessedname": "populateDay", "guessedtype": "property"}, "trigger": {"default": "Generated HTLM div element", "type": "{Node | String}", "description": "Trigger element to open the calendar. Inherited from\n<a href=\"OverlayContext.html#config_trigger\">OverlayContext</a>.", "guessedname": "trigger", "guessedtype": "property"}, "baseName": {"default": "datepicker", "type": "String", "description": "A basename to identify the select elements from this\nDatePickerSelect.", "guessedname": "baseName", "guessedtype": "property"}, "yearRange": {"default": "[ year - 10, year + 10 ]", "type": "Array", "description": "Year range to be displayed on the year select element. By default\nit displays from -10 to +10 years from the current year.", "guessedname": "yearRange", "guessedtype": "property"}, "yearFieldName": {"default": "year", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_yearField\">yearField</a>.", "guessedname": "yearFieldName", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the Calendar is visible by default after the render phase.\nInherited from\n<a href=\"OverlayContext.html#config_trigger\">OverlayContext</a>.", "guessedname": "visible", "guessedtype": "property"}, "dayFieldName": {"default": "day", "type": "String", "description": "Name attribute used on the\n<a href=\"DatePickerSelect.html#config_dayField\">dayField</a>.", "guessedname": "dayFieldName", "guessedtype": "property"}, "monthField": {"default": "Generated HTML select element", "type": "{Node | String}", "description": "HTML element to receive the month value when a date is selected.", "guessedname": "monthField", "guessedtype": "property"}, "yearField": {"default": "Generated HTML select element", "type": "{Node | String}", "description": "HTML element to receive the year value when a date is selected.", "guessedname": "yearField", "guessedtype": "property"}, "populateMonth": {"default": "true", "type": "boolean", "description": "If true the select element for the month will be automatic\npopulated.", "guessedname": "populateMonth", "guessedtype": "property"}, "appendOrder": {"default": "[ 'm', 'd', 'y' ]", "type": "Array", "description": "The order the selects elements are appended to the\n<a href=\"DatePickerSelect.html#config_displayBoundingBox\">displayBoundingBox</a>.", "guessedname": "appendOrder", "guessedtype": "property"}, "displayBoundingBox": {"default": "null", "type": "{Node | String}", "description": "The container\n<a href=\"Widget.html#config_boundingBox\">boundingBox</a> to house the\nselects and button. The\n<a href=\"Widget.html#config_boundingBox\">boundingBox</a> attribute is\nused on the Calendar Overlay.", "guessedname": "displayBoundingBox", "guessedtype": "property"}}, "methods": {"_populateMonths": {"protected": "", "description": "Populate the month select element with the correct data.", "guessedname": "_populateMonths", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the DatePickerSelect UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_selectCurrentMonth": {"protected": "", "description": "Select the current month on the respective input field.", "guessedname": "_selectCurrentMonth", "guessedtype": "function"}, "_populateDays": {"protected": "", "description": "Populate the day select element with the correct data.", "guessedname": "_populateDays", "guessedtype": "function"}, "_pupulateSelects": {"protected": "", "description": "Populate each select element with the correct data for the day, month\nand year.", "guessedname": "_pupulateSelects", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render DOM elements for the DatePickerSelect.", "guessedname": "_renderElements", "guessedtype": "function"}, "_renderTriggerButton": {"protected": "", "description": "Render DOM element for the trigger button of the DatePickerSelect.", "guessedname": "_renderTriggerButton", "guessedtype": "function"}, "_selectCurrentYear": {"protected": "", "description": "Select the current year on the respective input field.", "guessedname": "_selectCurrentYear", "guessedtype": "function"}, "_populateYears": {"protected": "", "description": "Populate the year select element with the correct data.", "guessedname": "_populateYears", "guessedtype": "function"}, "_selectCurrentValues": {"protected": "", "description": "Select the current values for the day, month and year to the respective\ninput field.", "guessedname": "_selectCurrentValues", "guessedtype": "function"}, "_populateSelect": {"return": {"type": "String", "description": ""}, "description": "Populate a select element with the data passed on the params.", "protected": "", "params": [{"type": "HTMLSelectElement", "name": "select", "description": " Select to be populated"}, {"type": "Number", "name": "fromIndex", "description": " Index to start"}, {"type": "Number", "name": "toIndex", "description": " Index to end"}, {"type": "Object", "name": "values", "description": " Object with labels to be used as content of each\noption. Optional."}], "guessedname": "_populateSelect", "guessedtype": "function"}, "_selectCurrentDay": {"protected": "", "description": "Select the current day on the respective input field.", "guessedname": "_selectCurrentDay", "guessedtype": "function"}, "_bindSelectEvents": {"protected": "", "description": "Bind events on each select element (change, keypress, etc).", "guessedname": "_bindSelectEvents", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the DatePickerSelect UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_getAppendOrder": {"protected": "", "return": {"type": "Array", "description": ""}, "description": "Gets an Array with the field elements in the correct order defined\non <a href=\"DatePickerSelect.html#config_appendOrder\">appendOrder</a>.", "guessedname": "_getAppendOrder", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the DatePickerSelect. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_onSelectChange": {"description": "Fired on any select change.", "param": "{EventFacade} event", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_onSelectChange", "guessedtype": "function"}}, "extends": "Calendar", "superclass": "Calendar", "file": "aui-calendar-datepicker-select.js", "shortname": "DatePickerSelect", "properties": {"DatePickerSelect.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "DatePickerSelect.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the DatePickerSelect.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-calendar-datepicker-select/main.png\"/></p>\nA base class for DatePickerSelect, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Select a date from Calendar to select elements</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.DatePickerSelect({\ndisplayBoundingBox: '#displayBoundingBoxId',\n// locale: 'pt-br',\ndateFormat: '%m/%d/%y',\nyearRange: [ 1970, 2009 ]\n}).render();\n</code></pre>\nCheck the list of <a href=\"DatePickerSelect.html#configattributes\">Configuration Attributes</a> available for\nDatePickerSelect."}, "ImageViewerMask": {"name": "ImageViewerMask", "constructors": [{"description": "A base class for ImageViewerMask - Controls the <a\nhref=\"ImageViewer.html#config_modal\">modal</a> attribute."}], "namespace": "", "module": "aui-image-viewer", "guessedname": "ImageViewerMask", "static": "", "superclass": "OverlayMask", "file": "aui-image-viewer-base.js", "guessedtype": "property", "extends": "OverlayMask", "shortname": "ImageViewerMask", "description": "A base class for ImageViewerMask - Controls the <a\nhref=\"ImageViewer.html#config_modal\">modal</a> attribute."}, "AutoComplete": {"name": "AutoComplete", "configs": {"queryQuestionMark": {"default": "true", "type": "Boolean", "description": "For IO DataSources, AutoComplete will automatically insert a \"?\" between the server URI and \nthe encoded query string. To prevent this behavior, you can\nset this value to false. If you need to customize this even further, you\ncan override the <a href=\"AutoComplete.html#method_generateRequest\">generateRequest</a> method.", "guessedname": "queryQuestionMark", "guessedtype": "property"}, "forceSelection": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, this\nwill clear a selection when the overlay closes unless a user explicitly selects an item.", "guessedname": "forceSelection", "guessedtype": "property"}, "typeAheadDelay": {"default": "0.2", "type": "Number", "description": "If <a href=\"AutoComplete.html#config_typeAhead\">typeAhead</a> is true, number of seconds \nto delay before updating the input. In order to prevent certain race conditions, this value must\nalways be greater than the <a href=\"AutoComplete.html#config_queryDelay\">queryDelay</a>.", "guessedname": "typeAheadDelay", "guessedtype": "property"}, "schemaType": {"default": "array", "type": "String", "description": "A valid type of <a href=\"module_datasource.html\">DataSource</a> schema plugin, such as array, json, xml, etc.", "guessedname": "schemaType", "guessedtype": "property"}, "applyLocalFilter": {"default": "true", "type": "Boolean", "description": "If set to true, the <a href=\"AutoComplete.html#method_filterResults\">filterResults</a> \nmethod will be run on the response from the data source.", "guessedname": "applyLocalFilter", "guessedtype": "property"}, "dataSourceType": {"default": "null", "type": "String", "description": "The type of the data source passed into <a href=\"AutoComplete.html#config_dataSource\">dataSource</a>.\nThis can be used to explicitly declare what kind of <a href=\"DataSource.html\">DataSource</a> object will\nbe created.", "guessedname": "dataSourceType", "guessedtype": "property"}, "queryMatchCase": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match only results with the same case.", "guessedname": "queryMatchCase", "guessedtype": "property"}, "typeAhead": {"default": "false", "type": "Boolean", "description": "If <a href=\"AutoComplete.html#config_autoHighlight\">autoHighlight</a> is enabled, whether or not the \ninput field should be automatically updated with the first result as the user types, \nautomatically selecting the portion of the text the user has not typed yet.", "guessedname": "typeAhead", "guessedtype": "property"}, "delimChar": {"default": "null", "type": "String", "description": "The character used to indicate the beginning or ending of a new value. Most commonly used\nis a \",\".", "guessedname": "delimChar", "guessedtype": "property"}, "input": {"default": "null", "type": "String | Node", "description": "The input field which will recieve the users input.", "guessedname": "input", "guessedtype": "property"}, "alwaysShowContainer": {"default": "false", "type": "Boolean", "description": "Always show the results container, instead of only showing when the \nuser is requesting them.", "guessedname": "alwaysShowContainer", "guessedtype": "property"}, "schema": {"default": "null", "type": "Object", "description": "A valid configuration object for any of <a href=\"module_datasource.html\">DataSource</a> schema plugins.", "guessedname": "schema", "guessedtype": "property"}, "minQueryLength": {"default": "1", "type": "Number", "description": "The minimum number of characters required to query the data source.", "guessedname": "minQueryLength", "guessedtype": "property"}, "matchKey": {"default": "0", "type": "String | Number", "description": "The key or numeric index in the schema to match the result against.", "guessedname": "matchKey", "guessedtype": "property"}, "queryMatchContains": {"default": "false", "type": "Boolean", "description": "When <a href=\"AutoComplete.html#config_applyLocalFilter\">applyLocalFilter</a> is true,\nsetting this to true will match results which contain the query anywhere in the text,\ninstead of just matching just items that start with the query.", "guessedname": "queryMatchContains", "guessedtype": "property"}, "suppressInputUpdate": {"default": "false", "type": "Boolean", "description": "Whether or not the input field should be updated with selections.", "guessedname": "suppressInputUpdate", "guessedtype": "property"}, "dataSource": {"default": "null", "type": "Object | String | Function | Array", "description": "The data source that results will be read from. This can either be\nan existing <a href=\"DataSource.html\">DataSource</a> object, or it can be a\nvalue that would be passed to <a href=\"DataSource.html\">DataSource</a>.", "guessedname": "dataSource", "guessedtype": "property"}, "uniqueName": {"default": "null", "type": "String", "description": "The unique ID of the input element.", "guessedname": "uniqueName", "guessedtype": "property"}, "autoHighlight": {"default": "true", "type": "Boolean", "description": "Automatically highlight the first item in the list when the results are\nmade visible.", "guessedname": "autoHighlight", "guessedtype": "property"}, "queryInterval": {"default": "0.5", "type": "Number", "description": "When IME usage is detected or interval detection is explicitly enabled,\nAutoComplete will detect the input value at the given interval and send a\nquery if the value has changed.", "guessedname": "queryInterval", "guessedtype": "property"}, "button": {"description": "To use a button", "default": "true", "deprecated": "", "guessedname": "button", "guessedtype": "property", "type": "Boolean"}, "maxResultsDisplayed": {"default": "10", "type": "Number", "description": "The maximum number of results to display.", "guessedname": "maxResultsDisplayed", "guessedtype": "property"}, "queryDelay": {"default": "0.2", "type": "Number", "description": "The amount of time in seconds to delay before submitting the query.", "guessedname": "queryDelay", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-autocomplete/main.png\"/></p>\nA base class for AutoComplete, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Presenting users choices based on their input</li>\n<li>Separating selected items</li>\n<li>Keyboard interaction for selecting items</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.AutoComplete({\ndataSource: [['AL', 'Alabama', 'The Heart of Dixie'],\n['AK', 'Alaska', 'The Land of the Midnight Sun'],\n['AZ', 'Arizona', 'The Grand Canyon State']],\nschema: {\nresultFields: ['key', 'name', 'description']\n},\nmatchKey: 'name',\ndelimChar: ',',\ntypeAhead: true,\ncontentBox: '#myAutoComplete'\n}).render();\n</code></pre>\nCheck the list of <a href=\"AutoComplete.html#configattributes\">Configuration Attributes</a> available for\nAutoComplete."}], "namespace": "", "module": "aui-autocomplete", "events": {"buttonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonChange", "description": "Fires when the value for the configuration attribute 'button' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataReturn": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataReturn event."}], "description": "Handles the dataReturn event. Fired when data successfully comes back from the data request."}, "textboxFocus": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxFocus event."}], "description": "Handles the textboxFocus event. Fired when user moves focus to the input element."}, "containerPopulate": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerPopulate event."}], "description": "Handles the containerPopulate event. Fired when the container is populated."}, "containerCollapse": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerCollapse event."}], "description": "Handles the containerCollapse event. Fired when the container is hidden."}, "selectionEnforce": {"params": [{"type": "Event.Facade", "name": "event", "description": " The selectionEnforce event."}], "description": "Handles the selectionEnforce event. Fired if <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a>\nis enabled and the users input element has been cleared because it did not match one of the results."}, "queryIntervalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryIntervalChange", "description": "Fires when the value for the configuration attribute 'queryInterval' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "matchKeyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "matchKeyChange", "description": "Fires when the value for the configuration attribute 'matchKey' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delimCharChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delimCharChange", "description": "Fires when the value for the configuration attribute 'delimChar' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataError": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataError event."}], "description": "Handles the dataError event. Fired when there is an error accessing the data."}, "forceSelectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "forceSelectionChange", "description": "Fires when the value for the configuration attribute 'forceSelection' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceChange", "description": "Fires when the value for the configuration attribute 'dataSource' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uniqueNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uniqueNameChange", "description": "Fires when the value for the configuration attribute 'uniqueName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxChange event."}], "description": "Handles the textboxChange event. Fired when the value in the input element is changed."}, "typeAhead": {"params": [{"type": "Event.Facade", "name": "event", "description": " The typeAhead event."}], "description": "Handles the typeAhead event. Fired when the input element has been pre-filled by the type-ahead feature."}, "typeAheadDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadDelayChange", "description": "Fires when the value for the configuration attribute 'typeAheadDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemArrowFrom": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowFrom event."}], "description": "Handles the itemArrowFrom event. Fired when the user navigates via the keyboard away from\na selected item."}, "maxResultsDisplayedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxResultsDisplayedChange", "description": "Fires when the value for the configuration attribute 'maxResultsDisplayed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemMouseOut": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOut event."}], "description": "Handles the itemMouseOut event. Fired when the user mouses away from an item."}, "itemArrowTo": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemArrowTo event."}], "description": "Handles the itemArrowTo event. Fired when the user navigates via the keyboard to a selected item."}, "textboxBlur": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxBlur event."}], "description": "Handles the textboxBlur event. Fired when the user leaves the input element."}, "minQueryLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minQueryLengthChange", "description": "Fires when the value for the configuration attribute 'minQueryLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "containerExpand": {"params": [{"type": "Event.Facade", "name": "event", "description": " The containerExpand event."}], "description": "Handles the containerExpand event. Fired when the container is shown."}, "applyLocalFilterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "applyLocalFilterChange", "description": "Fires when the value for the configuration attribute 'applyLocalFilter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "unmatchedItemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The unmatchedItemSelect event."}], "description": "Handles the unmatchedItemSelect event. Fired when a user selects something that does\nnot match any of the displayed results."}, "schemaTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaTypeChange", "description": "Fires when the value for the configuration attribute 'schemaType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemMouseOver": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemMouseOver event."}], "description": "Handles the itemMouseOver event. Fired when the user mouses over an item."}, "queryMatchContainsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchContainsChange", "description": "Fires when the value for the configuration attribute 'queryMatchContains' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "suppressInputUpdateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "suppressInputUpdateChange", "description": "Fires when the value for the configuration attribute 'suppressInputUpdate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeAheadChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeAheadChange", "description": "Fires when the value for the configuration attribute 'typeAhead' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryMatchCaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryMatchCaseChange", "description": "Fires when the value for the configuration attribute 'queryMatchCase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHighlightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHighlightChange", "description": "Fires when the value for the configuration attribute 'autoHighlight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataSourceTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataSourceTypeChange", "description": "Fires when the value for the configuration attribute 'dataSourceType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemSelect": {"params": [{"type": "Event.Facade", "name": "event", "description": " The itemSelect event."}], "description": "Handles the itemSelect event. Fired when an item in the list is selected."}, "queryQuestionMarkChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryQuestionMarkChange", "description": "Fires when the value for the configuration attribute 'queryQuestionMark' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "textboxKey": {"params": [{"type": "Event.Facade", "name": "event", "description": " The textboxKey event."}], "description": "Handles the textboxKey event. Fired when the input element receives key input."}, "schemaChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "schemaChange", "description": "Fires when the value for the configuration attribute 'schema' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysShowContainerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysShowContainerChange", "description": "Fires when the value for the configuration attribute 'alwaysShowContainer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "queryDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "queryDelayChange", "description": "Fires when the value for the configuration attribute 'queryDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataRequest": {"params": [{"type": "Event.Facade", "name": "event", "description": " The dataRequest event."}], "description": "Handles the dataRequest event. Fired when ever a query is sent to the data source."}}, "guessedname": "AutoComplete", "methods": {"_onTextboxKeyPress": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the key press events of the input element.", "guessedname": "_onTextboxKeyPress", "guessedtype": "function"}, "_selectText": {"protected": "", "params": [{"type": "Node", "name": "el", "description": " The input element to read the value from"}, {"type": "Number", "name": "start", "description": " The index to start the selection range from"}, {"type": "Number", "name": "end", "description": " The index to end the selection range at"}], "description": "Selects a substring of text inside of the input element.", "guessedname": "_selectText", "guessedtype": "function"}, "_clearInterval": {"private": "", "description": "Clears the query interval", "guessedname": "_clearInterval", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during AutoComplete instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_typeAhead": {"protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The selected list item"}, {"type": "String", "name": "query", "description": " The query string"}], "description": "Updates in the input element with the first result as the user types,\nselecting the text the user has not typed yet.", "guessedname": "_typeAhead", "guessedtype": "function"}, "_renderListElements": {"protected": "", "description": "Pre-populates the container with the \n<a href=\"Autocomplete.html#config_maxResultsDisplayed\">maxResultsDisplayed</a>\nnumber of list items.", "guessedname": "_renderListElements", "guessedtype": "function"}, "_toggleHighlight": {"protected": "", "params": [{"type": "Node", "name": "elNewListItem", "description": " The item to be highlighted"}, {"type": "String", "name": "action", "description": " Whether we are moving to or from an item. Valid values are \"to\" or \"from\"."}], "description": "Toggles the highlighting of a list item, and removes the highlighting from the previous item", "guessedname": "_toggleHighlight", "guessedtype": "function"}, "_onTextboxFocus": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the input element gaining focus.", "guessedname": "_onTextboxFocus", "guessedtype": "function"}, "_isIgnoreKey": {"return": {"type": "String", "description": ""}, "description": "Whether or not the pressed key triggers some functionality or if it should\nbe ignored.", "protected": "", "params": [{"type": "keyCode", "name": "Number", "description": " The numeric code of the key pressed"}], "guessedname": "_isIgnoreKey", "guessedtype": "function"}, "_renderOverlay": {"protected": "", "description": "Handles the creation of the overlay where the result list will be displayed.", "guessedname": "_renderOverlay", "guessedtype": "function"}, "_onContainerClick": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles when a user clicks on the container.", "guessedname": "_onContainerClick", "guessedtype": "function"}, "_onInterval": {"protected": "", "description": "Enables the query to be triggered based on detecting text input via intervals instead of via\nkey events.", "guessedname": "_onInterval", "guessedtype": "function"}, "filterResults": {"return": {"type": "Object", "description": "Filtered response object"}, "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Executed by the data source as a mechanism to do simple client-side\nfiltering of the results.", "guessedname": "filterResults", "guessedtype": "function"}, "_updateValue": {"protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The selected list item"}], "description": "Updates the input element with the selected query result. If\n<a href=\"Autocomplete.html#config_delimChar\">delimChar</a> has been set,\nthen the value gets appended with the delimiter.", "guessedname": "_updateValue", "guessedtype": "function"}, "_populateList": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Populates the container with list items of the query results.", "guessedname": "_populateList", "guessedtype": "function"}, "_focus": {"protected": "", "description": "Focuses the input element.", "guessedname": "_focus", "guessedtype": "function"}, "doBeforeExpandContainer": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "String", "name": "query", "description": " The query that was submitted to the data source"}, {"type": "Object", "name": "allResults", "description": " The parsed results"}], "description": "An overridable method that is executed before the result container is shown.\nThe method can return false to prevent the container from being shown.", "guessedname": "doBeforeExpandContainer", "guessedtype": "function"}, "_selectItem": {"protected": "", "params": [{"type": "Node", "name": "elListItem", "description": " The list item to select"}], "description": "Selects a list item from the query results.", "guessedname": "_selectItem", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the AutoComplete UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_onContainerMouseout": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles when a user mouses out of the container.", "guessedname": "_onContainerMouseout", "guessedtype": "function"}, "generateRequest": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String", "name": "query", "description": " The string currently being entered"}], "description": "An overridable method that creates an object to be passed to the sendRequest\nmethod of the data source object. Useful to overwrite if you wish to create\na custom request object before it's sent.", "guessedname": "generateRequest", "guessedtype": "function"}, "_sendQuery": {"protected": "", "params": [{"type": "String", "name": "query", "description": " The query string"}], "description": "Makes a query request to the data source.", "guessedname": "_sendQuery", "guessedtype": "function"}, "_moveSelection": {"protected": "", "params": [{"type": "Number", "name": "keyCode", "description": " The numeric code of the key pressed"}], "description": "Triggered by the up and down arrow keys, changes the currently selected list element item, and scrolls the\ncontainer if necessary.", "guessedname": "_moveSelection", "guessedtype": "function"}, "_realignContainer": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Realigns the container to the input element.", "guessedname": "_realignContainer", "guessedtype": "function"}, "handleResponse": {"params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the response for the display of the results. This is a callback method\nthat is fired by the sendRequest method so that results are ready to be accessed.", "guessedname": "handleResponse", "guessedtype": "function"}, "_enableIntervalDetection": {"protected": "", "description": "Enables query interval detection for IME support.", "guessedname": "_enableIntervalDetection", "guessedtype": "function"}, "sendQuery": {"params": [{"type": "String", "name": "query", "description": " Query string"}], "description": "Sends a query request to the data source object.", "guessedname": "sendQuery", "guessedtype": "function"}, "_toggleContainer": {"protected": "", "params": [{"type": "Boolean", "name": "show", "description": " Flag to force the showing or hiding of the container"}], "description": "Toggles the display of the results container.", "guessedname": "_toggleContainer", "guessedtype": "function"}, "_extractQuery": {"return": {"type": "String", "description": ""}, "description": "Extracts the right most query from the delimited string in the input.", "protected": "", "params": [{"type": "String", "name": "query", "description": " String to parse"}], "guessedname": "_extractQuery", "guessedtype": "function"}, "_onContainerScroll": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the container scroll events.", "guessedname": "_onContainerScroll", "guessedtype": "function"}, "_clearSelection": {"protected": "", "description": "When <a href=\"Autocomplete.html#config_forceSelection\">forceSelection</a> is true and\nthe user tries to leave the input element without selecting an item from the results,\nthe user selection is cleared.", "guessedname": "_clearSelection", "guessedtype": "function"}, "doBeforeLoadData": {"return": {"type": "Boolean", "description": ""}, "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "An overridable method that is executed before the result overlay is loaded with results.", "guessedname": "doBeforeLoadData", "guessedtype": "function"}, "_renderInput": {"protected": "", "description": "Handles the rendering of the input element.", "guessedname": "_renderInput", "guessedtype": "function"}, "formatResult": {"return": {"type": "String", "description": ""}, "params": [{"type": "Object", "name": "result", "description": " The result data object"}, {"type": "String", "name": "request", "description": " The current query string"}, {"type": "String", "name": "resultMatch", "description": " The string from the results that matches the query"}], "description": "An overridable method for formatting the result of the query before it's displayed in the overlay.", "guessedname": "formatResult", "guessedtype": "function"}, "_textMatchesOption": {"protected": "", "description": "Checks to see if the value typed by the user matches any of the\nquery results.", "guessedname": "_textMatchesOption", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the AutoComplete UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onTextboxKeyDown": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the keydown events on the input element for functional keys.", "guessedname": "_onTextboxKeyDown", "guessedtype": "function"}, "_createDataSource": {"protected": "", "return": {"type": "String", "description": ""}, "description": "Creates the data source object using the passed in <a href=\"Autocomplete.html#config_dataSource\">dataSource</a>,\nand if it is a string, will use the <a href=\"Autocomplete.html#config_dataSourceType\">dataSourceType</a> to\ncreate a new <a href=\"module_datasource.html\">DataSource</a> object.", "guessedname": "_createDataSource", "guessedtype": "function"}, "_onButtonMouseDown": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Called when the user mouses down on the button element in the combobox.", "guessedname": "_onButtonMouseDown", "guessedtype": "function"}, "_onTextboxBlur": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the input element losing focus.", "guessedname": "_onTextboxBlur", "guessedtype": "function"}, "_onTextboxKeyUp": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the keyup events of the input element.", "guessedname": "_onTextboxKeyUp", "guessedtype": "function"}, "_jumpSelection": {"protected": "", "description": "If there is a currently selected item, the right arrow key will select\nthat item and jump to the end of the input element, otherwise the container is closed.", "guessedname": "_jumpSelection", "guessedtype": "function"}, "_onContainerMouseover": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles when a user mouses over the container.", "guessedname": "_onContainerMouseover", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the AutoComplete. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-autocomplete.js", "guessedtype": "function", "shortname": "AutoComplete", "properties": {"AutoComplete.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the AutoComplete.", "guessedname": "ATTRS", "guessedtype": "property"}, "AutoComplete.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-autocomplete/main.png\"/></p>\nA base class for AutoComplete, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Presenting users choices based on their input</li>\n<li>Separating selected items</li>\n<li>Keyboard interaction for selecting items</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.AutoComplete({\ndataSource: [['AL', 'Alabama', 'The Heart of Dixie'],\n['AK', 'Alaska', 'The Land of the Midnight Sun'],\n['AZ', 'Arizona', 'The Grand Canyon State']],\nschema: {\nresultFields: ['key', 'name', 'description']\n},\nmatchKey: 'name',\ndelimChar: ',',\ntypeAhead: true,\ncontentBox: '#myAutoComplete'\n}).render();\n</code></pre>\nCheck the list of <a href=\"AutoComplete.html#configattributes\">Configuration Attributes</a> available for\nAutoComplete."}, "DialogMask": {"name": "DialogMask", "constructors": [{"description": "A base class for DialogMask - Controls the <a\nhref=\"Dialog.html#config_modal\">modal</a> attribute."}], "namespace": "", "module": "aui-dialog", "static": "", "superclass": "OverlayMask", "file": "aui-dialog.js", "extends": "OverlayMask", "shortname": "DialogMask", "description": "A base class for DialogMask - Controls the <a\nhref=\"Dialog.html#config_modal\">modal</a> attribute."}, "A.Plugin.IO": {"name": "A.Plugin.IO", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for IOPlugin, providing:\n<ul>\n<li>Loads the content of a URI as content of a Node or Widget</li>\n<li>Use <a href=\"ParseContent.html\">ParseContent</a> to parse the JavaScript tags from the content and evaluate them</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.one('#content').plug(A.Plugin.IO, { uri: 'assets/content.html', method: 'GET' });</code></pre>\nCheck the list of <a href=\"A.Plugin.IO.html#configattributes\">Configuration Attributes</a> available for\nIOPlugin."}], "namespace": "", "module": "aui-io", "events": {"loadingMaskChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "loadingMaskChange", "description": "Fires when the value for the configuration attribute 'loadingMask' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "failureMessageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "failureMessageChange", "description": "Fires when the value for the configuration attribute 'failureMessage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "parseContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "parseContentChange", "description": "Fires when the value for the configuration attribute 'parseContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showLoadingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showLoadingChange", "description": "Fires when the value for the configuration attribute 'showLoading' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "typeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "typeChange", "description": "Fires when the value for the configuration attribute 'type' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sectionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sectionChange", "description": "Fires when the value for the configuration attribute 'section' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "whereChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "whereChange", "description": "Fires when the value for the configuration attribute 'where' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"node": {"default": "null", "type": "Node | String", "description": "Plug IO in any object we want, the setContent will use the node to\nset the content.", "guessedname": "node", "guessedtype": "property"}, "showLoading": {"default": "true", "type": "boolean", "description": "Show the <a href=\"OverlayLoading.html\">OverlayLoading</a> covering the <a\nhref=\"A.Plugin.IO.html#config_node\">node</a> while loading.", "guessedname": "showLoading", "guessedtype": "property"}, "parseContent": {"default": "true", "type": "boolean", "description": "If true the <a href=\"ParseContent.html\">ParseContent</a> plugin\nwill be plugged to the <a href=\"A.Plugin.IO.html#config_node\">node</a>.", "guessedname": "parseContent", "guessedtype": "property"}, "where": {"default": "StdMod.REPLACE", "type": "String", "description": "Where to insert the content, AFTER, BEFORE or REPLACE.", "guessedname": "where", "guessedtype": "property"}, "section": {"default": "StdMod.BODY", "type": "String", "description": "Section where the content will be set in case you are plugging it\non a instace of <a href=\"WidgetStdMod.html\">WidgetStdMod</a>.", "guessedname": "section", "guessedtype": "property"}, "failureMessage": {"default": "'Failed to retrieve content'", "type": "String", "description": "Message to be set on the content when the transaction fails.", "guessedname": "failureMessage", "guessedtype": "property"}, "type": {"description": "Type of the <code>instance</code> we are pluggin the A.Plugin.IO.\nCould be a Node, or a Widget.", "default": "'Node'", "readonly": "", "guessedname": "type", "guessedtype": "property", "type": "String"}, "loadingMask": {"default": "{}", "type": "Object", "description": "Options passed to the <a href=\"OverlayLoading.html\">OverlayLoading</a>.", "guessedname": "loadingMask", "guessedtype": "property"}}, "methods": {"showLoading": {"description": "Invoke the <a href=\"OverlayMask.html#method_show\">OverlayMask show</a> method.", "guessedname": "showLoading", "guessedtype": "function"}, "_successHandler": {"protected": "", "params": [{"type": "EventFavade", "name": "event", "description": ""}, {"type": "String", "name": "id", "description": " Id of the IO transaction."}, {"type": "Object", "name": "obj", "description": " XHR transaction Object."}], "description": "Internal success callback for the IO transaction.", "guessedname": "_successHandler", "guessedtype": "function"}, "_failureHandler": {"protected": "", "params": [{"type": "EventFavade", "name": "event", "description": ""}, {"type": "String", "name": "id", "description": " Id of the IO transaction."}, {"type": "Object", "name": "obj", "description": " XHR transaction Object."}], "description": "Internal failure callback for the IO transaction.", "guessedname": "_failureHandler", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during A.Plugin.IO instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_getContentSetterByType": {"protected": "", "return": {"type": "function", "description": ""}, "description": "Get the appropriated <a\nhref=\"A.Plugin.IO.html#method_setContent\">setContent</a> function\nimplementation for each <a href=\"A.Plugin.IO.html#config_type\">type</a>.", "guessedname": "_getContentSetterByType", "guessedtype": "function"}, "hideLoading": {"description": "Invoke the <a href=\"OverlayMask.html#method_hide\">OverlayMask hide</a> method.", "guessedname": "hideLoading", "guessedtype": "function"}, "_onActiveChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"A.Plugin.IO.html#config_active\">active</a> attribute change.", "guessedname": "_onActiveChange", "guessedtype": "function"}, "_syncOverlayLoadingUI": {"protected": "", "description": "Sync the loading mask UI.", "guessedname": "_syncOverlayLoadingUI", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the A.Plugin.IO UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_afterInit": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the init phase of the A.Plugin.IO.", "guessedname": "_afterInit", "guessedtype": "function"}, "setContent": {"description": "Set the content of the <a href=\"A.Plugin.IO.html#config_node\">node</a>.", "guessedname": "setContent", "guessedtype": "function"}, "_bindPlugins": {"protected": "", "description": "Bind the plugins on the <code>instance</code>.", "guessedname": "_bindPlugins", "guessedtype": "function"}}, "extends": "IORequest", "superclass": "IORequest", "file": "aui-io-plugin.js", "shortname": "A.Plugin.IO", "properties": {"A.Plugin.IO.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the A.Plugin.IO.", "guessedname": "ATTRS", "guessedtype": "property"}, "A.Plugin.IO.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "A.Plugin.IO.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}}, "description": "A base class for IOPlugin, providing:\n<ul>\n<li>Loads the content of a URI as content of a Node or Widget</li>\n<li>Use <a href=\"ParseContent.html\">ParseContent</a> to parse the JavaScript tags from the content and evaluate them</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.one('#content').plug(A.Plugin.IO, { uri: 'assets/content.html', method: 'GET' });</code></pre>\nCheck the list of <a href=\"A.Plugin.IO.html#configattributes\">Configuration Attributes</a> available for\nIOPlugin."}, "ImageGallery": {"name": "ImageGallery", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-image-viewer-gallery/main.png\"/></p>\nA base class for ImageGallery, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Displays list of thumbnails of the images as a control</li>\n<li>Slide show functionalities (i.e., play, pause etc)</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageGallery({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageGallery.html#configattributes\">Configuration Attributes</a> available for\nImageGallery."}], "namespace": "", "module": "aui-image-viewer", "events": {"autoPlayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoPlayChange", "description": "Fires when the value for the configuration attribute 'autoPlay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "playingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "playingChange", "description": "Fires when the value for the configuration attribute 'playing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "repeatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "repeatChange", "description": "Fires when the value for the configuration attribute 'repeat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toolSetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toolSetChange", "description": "Fires when the value for the configuration attribute 'toolSet' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorChange", "description": "Fires when the value for the configuration attribute 'paginator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedChange", "description": "Fires when the value for the configuration attribute 'paused' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pausedLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pausedLabelChange", "description": "Fires when the value for the configuration attribute 'pausedLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delayChange", "description": "Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorElChange", "description": "Fires when the value for the configuration attribute 'paginatorEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "paginatorInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "paginatorInstanceChange", "description": "Fires when the value for the configuration attribute 'paginatorInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "useOriginalImageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "useOriginalImageChange", "description": "Fires when the value for the configuration attribute 'useOriginalImage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showPlayerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showPlayerChange", "description": "Fires when the value for the configuration attribute 'showPlayer' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toolSetInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toolSetInstanceChange", "description": "Fires when the value for the configuration attribute 'toolSetInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "playingLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "playingLabelChange", "description": "Fires when the value for the configuration attribute 'playingLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"paginator": {"default": "<a href=\"Paginator.html\">Paginator</a> configuration Object.", "type": "Object", "description": "<a href=\"Paginator.html\">Paginator</a> configuration Object. The\n<code>Paginator</code> handles the thumbnails control.", "guessedname": "paginator", "guessedtype": "property"}, "paused": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show is paused.", "guessedname": "paused", "guessedtype": "property"}, "pausedLabel": {"default": "''", "type": "String", "description": "Label to display when the slide show is paused.", "guessedname": "pausedLabel", "guessedtype": "property"}, "showPlayer": {"default": "true", "type": "boolean", "description": "Show the player controls (i.e., pause and show buttons).", "guessedname": "showPlayer", "guessedtype": "property"}, "useOriginalImage": {"default": "false", "type": "boolean", "description": "If <code>true</code> will use the original image as thumbnails.", "guessedname": "useOriginalImage", "guessedtype": "property"}, "toolSetInstance": {"default": "null", "type": "ToolSet", "description": "Stores the <a href=\"ToolSet.html\">ToolSet</a> instance.", "guessedname": "toolSetInstance", "guessedtype": "property"}, "playing": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show is playing.", "guessedname": "playing", "guessedtype": "property"}, "delay": {"default": "7000", "type": "Number", "description": "Delay in milliseconds to change to the next image.", "guessedname": "delay", "guessedtype": "property"}, "playingLabel": {"default": "'(Playing)'", "type": "String", "description": "Label to display when the slide show is playing.", "guessedname": "playingLabel", "guessedtype": "property"}, "repeat": {"default": "true", "type": "boolean", "description": "Restart the navigation when reach the last element.", "guessedname": "repeat", "guessedtype": "property"}, "toolSet": {"default": "Generated ToolSet with a play, and pause buttons.", "type": "ToolSet constructor.", "description": "<a href=\"ToolSet.html\">ToolSet</a> with a play, and pause buttons.", "guessedname": "toolSet", "guessedtype": "property"}, "paginatorInstance": {"default": "null", "type": "Paginator", "description": "Stores the <a href=\"Paginator.html\">Paginator</a> instance.", "guessedname": "paginatorInstance", "guessedtype": "property"}, "paginatorEl": {"description": "Element which contains the <a href=\"Paginator.html\">Paginator</a>\nwith the thumbnails.", "default": "Generated HTML div.", "readonly": "", "guessedname": "paginatorEl", "guessedtype": "property", "type": "Node"}, "autoPlay": {"default": "false", "type": "boolean", "description": "If <code>true</code> the slide show will be played when the\nImageGallery is displayed.", "guessedname": "autoPlay", "guessedtype": "property"}}, "methods": {"_getInfoTemplate": {"return": {"type": "String", "description": "Parsed string."}, "description": "Get the <a href=\"ImageViewer.html#config_info\">info</a> template.", "protected": "", "params": [{"type": "String", "name": "v", "description": " template"}], "guessedname": "_getInfoTemplate", "guessedtype": "function"}, "show": {"description": "<p>Show the ImageGallery.</p>\n<p><strong>NOTE:</strong>Overloads the <a\nhref=\"ImageViewer.html\">ImageViewer</a> show method to not loadImage, the\nchangeRequest now is responsible to do that if we invoke the superclass\nshow method its loading the image, and the changeRequest loads again,\navoiding double request.</p>", "guessedname": "show", "guessedtype": "function"}, "_cancelTimer": {"protected": "", "description": "Cancel the timer between slides.", "guessedname": "_cancelTimer", "guessedtype": "function"}, "pause": {"description": "Pause the slide show.", "guessedname": "pause", "guessedtype": "function"}, "_renderPaginator": {"protected": "", "description": "Render the <a href=\"Paginator.html\">Paginator</a> with the thumbnails.", "guessedname": "_renderPaginator", "guessedtype": "function"}, "_changeRequest": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Change the UI when click on a thumbnail.", "guessedname": "_changeRequest", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the ImageGallery class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "_renderPlayer": {"protected": "", "description": "Render the player controls.", "guessedname": "_renderPlayer", "guessedtype": "function"}, "_startTimer": {"protected": "", "description": "Start the timer between slides.", "guessedname": "_startTimer", "guessedtype": "function"}, "_syncSelectedThumbUI": {"protected": "", "description": "Sync the selected thumb UI.", "guessedname": "_syncSelectedThumbUI", "guessedtype": "function"}, "play": {"description": "Play the slide show.", "guessedname": "play", "guessedtype": "function"}, "_bindToolSetUI": {"protected": "", "description": "Bind the ToolSet UI for the play and pause buttons.", "guessedname": "_bindToolSetUI", "guessedtype": "function"}, "_syncControlsUI": {"protected": "", "description": "Sync the controls UI.", "guessedname": "_syncControlsUI", "guessedtype": "function"}, "_syncSlideShow": {"protected": "", "description": "Sync the slide show UI.", "guessedname": "_syncSlideShow", "guessedtype": "function"}, "_setThumbContent": {"protected": "", "params": [{"type": "Node", "name": "pageEl", "description": ""}, {"type": "Number", "name": "pageNumber", "description": ""}], "description": "See <a href=\"Paginator.html#method_pageLinkContent\">pageLinkContent</a>.", "guessedname": "_setThumbContent", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"ImageViewer.html#config_visible\">visible</a> attribute change.", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "_onPausedChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires before the value of the\n<a href=\"ImageGallery.html#config_paused\">paused</a> attribute change.", "guessedname": "_onPausedChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the ImageGallery UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "hidePaginator": {"description": "Hide the <a href=\"Paginator.html\">Paginator</a> with the thumbnails\nlist.", "guessedname": "hidePaginator", "guessedtype": "function"}, "_onPlayingChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires before the value of the\n<a href=\"ImageGallery.html#config_playing\">playing</a> attribute change.", "guessedname": "_onPlayingChange", "guessedtype": "function"}, "showPaginator": {"description": "Show the <a href=\"Paginator.html\">Paginator</a> with the thumbnails\nlist.", "guessedname": "showPaginator", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ImageGallery. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "ImageViewer", "superclass": "ImageViewer", "file": "aui-image-viewer-gallery.js", "shortname": "ImageGallery", "properties": {"_timer": {"protected": "", "type": "Number", "description": "Stores the <code>A.later</code> reference.", "guessedname": "_timer", "guessedtype": "property"}, "ImageGallery.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ImageGallery.", "guessedname": "ATTRS", "guessedtype": "property"}, "ImageGallery.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-image-viewer-gallery/main.png\"/></p>\nA base class for ImageGallery, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Displays an image in a Overlay</li>\n<li>Displays list of thumbnails of the images as a control</li>\n<li>Slide show functionalities (i.e., play, pause etc)</li>\n<li>Keyboard navigation support</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ImageGallery({\nlinks: '#gallery1 a',\ncaption: 'Liferay Champion Soccer',\ncaptionFromTitle: true,\npreloadNeighborImages: true,\npreloadAllImages: true,\nshowInfo: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"ImageGallery.html#configattributes\">Configuration Attributes</a> available for\nImageGallery."}, "OverlayBase": {"name": "OverlayBase", "constructors": [{"params": [{"type": "Object", "name": "object", "description": " The user configuration for the instance."}], "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}], "namespace": "", "module": "aui-overlay", "guessedname": "OverlayBase", "uses": ["WidgetStdMod", "WidgetPosition", "WidgetStack", "WidgetPositionAlign", "WidgetPositionConstrain"], "superclass": "Component", "file": "aui-overlay-base.js", "guessedtype": "property", "extends": "Component", "shortname": "OverlayBase", "description": "A basic Overlay Widget, which can be positioned based on Page XY co-ordinates and is stackable (z-index support).\nIt also provides alignment and centering support and uses a standard module format for it's content, with header,\nbody and footer section support."}, "IORequest": {"name": "IORequest", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for IORequest, providing:\n<ul>\n<li>Response data normalization for XML, JSON, JavaScript</li>\n<li>Cache options</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.io.request(uri, config);</code></pre>\nCheck the list of <a href=\"IORequest.html#configattributes\">Configuration Attributes</a> available for\nIORequest."}], "namespace": "", "module": "aui-io", "events": {"contextChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contextChange", "description": "Fires when the value for the configuration attribute 'context' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "timeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeoutChange", "description": "Fires when the value for the configuration attribute 'timeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "responseDataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "responseDataChange", "description": "Fires when the value for the configuration attribute 'responseData' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "xdrChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "xdrChange", "description": "Fires when the value for the configuration attribute 'xdr' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeChange", "description": "Fires when the value for the configuration attribute 'active' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoLoadChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoLoadChange", "description": "Fires when the value for the configuration attribute 'autoLoad' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "methodChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "methodChange", "description": "Fires when the value for the configuration attribute 'method' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "headersChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "headersChange", "description": "Fires when the value for the configuration attribute 'headers' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cacheChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cacheChange", "description": "Fires when the value for the configuration attribute 'cache' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uriChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uriChange", "description": "Fires when the value for the configuration attribute 'uri' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataTypeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataTypeChange", "description": "Fires when the value for the configuration attribute 'dataType' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cfgChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cfgChange", "description": "Fires when the value for the configuration attribute 'cfg' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "transactionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "transactionChange", "description": "Fires when the value for the configuration attribute 'transaction' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "argumentsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "argumentsChange", "description": "Fires when the value for the configuration attribute 'arguments' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "syncChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "syncChange", "description": "Fires when the value for the configuration attribute 'sync' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "formChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "formChange", "description": "Fires when the value for the configuration attribute 'form' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"responseData": {"default": "null", "type": "String | JSONObject | XMLDocument", "description": "This is a normalized attribute for the response data. It's useful\nto retrieve the correct type for the\n<a href=\"IORequest.html#config_dataType\">dataType</a> (i.e., in json\nrequests the <code>responseData</code>) is a JSONObject.", "guessedname": "responseData", "guessedtype": "property"}, "transaction": {"default": "null", "type": "Object", "description": "Stores the IO Object of the current transaction.", "guessedname": "transaction", "guessedtype": "property"}, "timeout": {"default": "Value mapped on AUI.defaults.io.", "type": "Number", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "timeout", "guessedtype": "property"}, "form": {"default": "Value mapped on AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "form", "guessedtype": "property"}, "dataType": {"default": "null", "type": "String", "description": "The type of the request (i.e., could be xml, json, javascript, text).", "guessedname": "dataType", "guessedtype": "property"}, "cfg": {"description": "Object containing all the\n<a href=\"io.html#configattributes\">IO Configuration Attributes</a>.\nThis Object is passed to the <code>A.io</code> internally.", "default": "Object containing all the\n<a href=\"io.html#configattributes\">IO Configuration Attributes</a>.", "readonly": "", "guessedname": "cfg", "guessedtype": "property", "type": "String"}, "cache": {"default": "true", "type": "boolean", "description": "If <code>false</code> the current timestamp will be appended to the\nurl, avoiding the url to be cached.", "guessedname": "cache", "guessedtype": "property"}, "autoLoad": {"default": "true", "type": "boolean", "description": "If <code>true</code> invoke the\n<a href=\"IORequest.html#method_start\">start</a> method automatically,\ninitializing the IO transaction.", "guessedname": "autoLoad", "guessedtype": "property"}, "uri": {"default": "null", "type": "String", "description": "URI to be requested using AJAX.", "guessedname": "uri", "guessedtype": "property"}, "sync": {"default": "Value mapped on AUI.defaults.io.", "type": "boolean", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "sync", "guessedtype": "property"}, "headers": {"default": "Object", "type": "Object", "description": "Set the correct ACCEPT header based on the dataType.", "guessedname": "headers", "guessedtype": "property"}, "arguments": {"default": "Value mapped on AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "arguments", "guessedtype": "property"}, "context": {"default": "Value mapped on AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "context", "guessedtype": "property"}, "active": {"default": "false", "type": "boolean", "description": "Whether the transaction is active or not.", "guessedname": "active", "guessedtype": "property"}, "data": {"default": "Value mapped on AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "data", "guessedtype": "property"}, "method": {"default": "Value mapped on AUI.defaults.io.", "type": "String", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "method", "guessedtype": "property"}, "xdr": {"default": "Value mapped on AUI.defaults.io.", "type": "Object", "description": "See <a href=\"http://developer.yahoo.com/yui/3/io/#configuration\">IO\nConfiguration</a>.", "guessedname": "xdr", "guessedtype": "property"}}, "methods": {"_setResponseData": {"return": {"type": "Object", "description": ""}, "description": "Setter for <a href=\"IORequest.html#config_responseData\">responseData</a>.", "protected": "", "params": [{"type": "Object", "name": "xhr", "description": " XHR Object."}], "guessedname": "_setResponseData", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during IORequest instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "stop": {"description": "Stops the IO transaction.", "guessedname": "stop", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the IORequest class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_success": {"protected": "", "params": [{"type": "Number", "name": "id", "description": " ID of the IO transaction."}, {"type": "Object", "name": "obj", "description": " IO transaction Object."}], "description": "Internal success callback for the IO transaction.", "guessedname": "_success", "guessedtype": "function"}, "start": {"description": "Starts the IO transaction. Used to refresh the content also.", "guessedname": "start", "guessedtype": "function"}, "_end": {"protected": "", "params": [{"type": "Number", "name": "id", "description": " ID of the IO transaction."}], "description": "Internal end callback for the IO transaction.", "guessedname": "_end", "guessedtype": "function"}, "_parseURL": {"return": {"type": "String", "description": ""}, "description": "Parse the <a href=\"IORequest.html#config_uri\">uri</a> to add a\ntimestamp if <a href=\"IORequest.html#config_cache\">cache</a> is\n<code>true</code>. Also applies the\n<code>AUI.defaults.io.uriFormatter</code>.", "protected": "", "params": [{"type": "String", "name": "url", "description": ""}], "guessedname": "_parseURL", "guessedtype": "function"}, "_afterInit": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the init phase of the IORequest.", "guessedname": "_afterInit", "guessedtype": "function"}}, "uses": ["io"], "superclass": "Plugin.Base", "file": "aui-io-request.js", "extends": "Plugin.Base", "shortname": "IORequest", "properties": {"IORequest.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "IORequest.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the IORequest.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "A base class for IORequest, providing:\n<ul>\n<li>Response data normalization for XML, JSON, JavaScript</li>\n<li>Cache options</li>\n</ul>\nQuick Example:<br/>\n<pre><code>A.io.request(uri, config);</code></pre>\nCheck the list of <a href=\"IORequest.html#configattributes\">Configuration Attributes</a> available for\nIORequest."}, "Panel": {"name": "Panel", "configs": {"collapsed": {"default": "false", "type": "boolean", "description": "Whether the panel is displayed collapsed.", "guessedname": "collapsed", "guessedtype": "property"}, "collapsible": {"default": "false", "type": "boolean", "description": "Whether the panel is able to be collapsed.", "guessedname": "collapsible", "guessedtype": "property"}, "tools": {"default": "[]", "type": "Array", "description": "<p>Array of <a href=\"ToolItem.html\">ToolItem</a> to be displayed as icons\non the Panel title.</p>\nExample:\n<pre><code>tools: [ { icon: 'close', id: 'close' } ]</code></pre>\nFor more information how to use this option see\n<a href=\"ToolItem.html\">ToolItem</a>.", "guessedname": "tools", "guessedtype": "property"}, "title": {"default": "''", "type": "Boolean | String", "description": "The title to be displayed on the Panel.", "guessedname": "title", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-panel/main.png\"/></p>\nA base class for Panel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Built-in expandable and collapsible behavior</li>\n<li>Prebuilt tool buttons that can be wired up to provide other customized behavior</li>\n<li>Good for building block for application-oriented user interfaces</li>\n<li>Can be easily dropped into any Container or layout</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Panel({\ncollapsible: true,\ncollapsed: true,\nheaderContent: 'Panel 1',\nbodyContent: 'Content'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Panel.html#configattributes\">Configuration Attributes</a> available for\nPanel."}], "namespace": "", "module": "aui-panel", "events": {"collapsibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsibleChange", "description": "Fires when the value for the configuration attribute 'collapsible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "collapsedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "collapsedChange", "description": "Fires when the value for the configuration attribute 'collapsed' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toolsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toolsChange", "description": "Fires when the value for the configuration attribute 'tools' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Panel", "methods": {"_afterPanelRender": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after render phase.", "guessedname": "_afterPanelRender", "guessedtype": "function"}, "_renderToolItems": {"protected": "", "description": "Render the <a href=\"Panel.html#config_tools\">tools</a>.", "guessedname": "_renderToolItems", "guessedtype": "function"}, "collapse": {"description": "Collapse the panel setting the\n<a href=\"Panel.html#config_collapsed\">collapsed</a> attribute to\n<code>true</code>.", "guessedname": "collapse", "guessedtype": "function"}, "_afterTitleChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of\n<a href=\"Panel.html#config_title\">title</a> change.", "guessedname": "_afterTitleChange", "guessedtype": "function"}, "_syncCollapsedUI": {"protected": "", "description": "Sync the UI for the collapsed status (i.e., icons, height etc).", "guessedname": "_syncCollapsedUI", "guessedtype": "function"}, "_renderHeaderText": {"protected": "", "description": "Render the Panel header text with the value of\n<a href=\"Panel.html#config_title\">title</a>.", "guessedname": "_renderHeaderText", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Panel instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_addPanelClass": {"protected": "", "params": [{"type": "String", "name": "section", "description": " <a href=\"WidgetStdMod.html\">WidgetStdMod</a> section (i.e., body, header, footer)."}], "description": "Add css classes neede for the Panel in the passed <code>section</code>.", "guessedname": "_addPanelClass", "guessedtype": "function"}, "toggle": {"description": "Toggle the visibility of the Panel toggling the value of the\n<a href=\"Widget.html#config_visible\">visible</a> attribute.", "guessedname": "toggle", "guessedtype": "function"}, "_syncTitleUI": {"protected": "", "description": "Sync the\n<a href=\"Panel.html#property_headerTextNode\">headerTextNode</a> with the\nvalue of the <a href=\"Panel.html#config_title\">title</a>.", "guessedname": "_syncTitleUI", "guessedtype": "function"}, "_afterCollapsedChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of\n<a href=\"Panel.html#config_collapsed\">collapsed</a> change.", "guessedname": "_afterCollapsedChange", "guessedtype": "function"}, "expand": {"description": "Expand the panel setting the\n<a href=\"Panel.html#config_collapsed\">collapsed</a> attribute to\n<code>false</code>.", "guessedname": "expand", "guessedtype": "function"}, "toggleCollapse": {"description": "Toggle the <a href=\"Panel.html#config_collapsed\">collapsed</a> value.\nExpanding and collapsing the Panel.", "guessedname": "toggleCollapse", "guessedtype": "function"}}, "uses": ["WidgetStdMod"], "superclass": "Component", "file": "aui-panel.js", "guessedtype": "function", "extends": "Component", "shortname": "Panel", "properties": {"headerTextNode": {"protected": "", "type": "Node", "description": "Stores the created node for the header of the Panel.", "guessedname": "headerTextNode", "guessedtype": "property"}, "Panel.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Panel.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-panel/main.png\"/></p>\nA base class for Panel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Built-in expandable and collapsible behavior</li>\n<li>Prebuilt tool buttons that can be wired up to provide other customized behavior</li>\n<li>Good for building block for application-oriented user interfaces</li>\n<li>Can be easily dropped into any Container or layout</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Panel({\ncollapsible: true,\ncollapsed: true,\nheaderContent: 'Panel 1',\nbodyContent: 'Content'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Panel.html#configattributes\">Configuration Attributes</a> available for\nPanel."}, "OverlayMask": {"name": "OverlayMask", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for OverlayMask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayMask().render();</code></pre>\nCheck the list of <a href=\"OverlayMask.html#configattributes\">Configuration Attributes</a> available for\nOverlayMask."}], "namespace": "", "module": "aui-overlay", "events": {"backgroundChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "backgroundChange", "description": "Fires when the value for the configuration attribute 'background' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "zIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexChange", "description": "Fires when the value for the configuration attribute 'zIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "opacityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "opacityChange", "description": "Fires when the value for the configuration attribute 'opacity' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "shimChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "shimChange", "description": "Fires when the value for the configuration attribute 'shim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignPointsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignPointsChange", "description": "Fires when the value for the configuration attribute 'alignPoints' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "targetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "targetChange", "description": "Fires when the value for the configuration attribute 'target' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"opacity": {"default": ".5", "type": "Number", "description": "CSS opacity of the mask.", "guessedname": "opacity", "guessedtype": "property"}, "alignPoints": {"default": "[ 'tl', 'tl' ]", "type": "Array", "description": "Points to align the <a href=\"Overlay.html\">Overlay</a> used as\nmask.", "guessedname": "alignPoints", "guessedtype": "property"}, "target": {"default": "document", "type": "Node | String", "description": "Node where the mask will be positioned and re-dimensioned. The\ndefault is the document, which means that if not specified the mask\ntakes the full screen.", "guessedname": "target", "guessedtype": "property"}, "shim": {"default": "True on IE.", "type": "boolean", "description": "Use shim option.", "guessedname": "shim", "guessedtype": "property"}, "zIndex": {"default": "1000", "type": "Number", "description": "zIndex of the OverlayMask.", "guessedname": "zIndex", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the Overlay is visible by default after the render phase.\nInherited from <a href=\"Overlay.html\">Overlay</a>.", "guessedname": "visible", "guessedtype": "property"}, "background": {"default": "null", "type": "String", "description": "Background color of the mask.", "guessedname": "background", "guessedtype": "property"}}, "methods": {"_uiSetVisible": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": ""}], "description": "Invoke the <code>OverlayMask.superclass._uiSetVisible</code>. Used to\nreset the <code>opacity</code> to work around IE bugs when set opacity\nof hidden elements.", "guessedname": "_uiSetVisible", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the OverlayMask UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "getTargetSize": {"return": {"type": "Object} Object containing the { height: height, width: width ", "description": "."}, "description": "Get the size of the\n<a href=\"OverlayMask.html#config_target\">target</a>. Used to dimension\nthe mask node.", "guessedname": "getTargetSize", "guessedtype": "function"}, "refreshMask": {"description": "Repaint the OverlayMask UI, respecting the\n<a href=\"OverlayMask.html#config_target\">target</a> size and the\n<a href=\"OverlayMask.html#config_alignPoints\">alignPoints</a>.", "guessedname": "refreshMask", "guessedtype": "function"}, "_afterVisibleChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Paginator.html#config_visible\">visible</a> attribute change.", "guessedname": "_afterVisibleChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayMask UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_setOpacity": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"Paginator.html#config_opacity\">opacity</a>.", "protected": "", "params": [{"type": "Number", "name": "v", "description": ""}], "guessedname": "_setOpacity", "guessedtype": "function"}, "_afterTargetChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Paginator.html#config_target\">target</a> attribute change.", "guessedname": "_afterTargetChange", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-overlay-mask.js", "shortname": "OverlayMask", "properties": {"OverlayMask.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayMask.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayMask.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "A base class for OverlayMask, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Cross browser mask functionality to cover an element or the entire page</li>\n<li>Customizable mask (i.e., background, opacity)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayMask().render();</code></pre>\nCheck the list of <a href=\"OverlayMask.html#configattributes\">Configuration Attributes</a> available for\nOverlayMask."}, "Rating": {"name": "Rating", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-rating/main.png\"/></p>\nA base class for Rating, providing:\n<ul>\n<li>A non-obstrusive star rating control</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Rating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Rating.html#configattributes\">Configuration Attributes</a> available for\nRating."}], "namespace": "", "module": "aui-rating", "events": {"showTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showTitleChange", "description": "Fires when the value for the configuration attribute 'showTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "canResetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "canResetChange", "description": "Fires when the value for the configuration attribute 'canReset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelElementChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelElementChange", "description": "Fires when the value for the configuration attribute 'labelElement' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputNameChange", "description": "Fires when the value for the configuration attribute 'inputName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hiddenInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hiddenInputChange", "description": "Fires when the value for the configuration attribute 'hiddenInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectedIndexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectedIndexChange", "description": "Fires when the value for the configuration attribute 'selectedIndex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemClick": {"preventable": "_defRatingItemClickFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemClick event."}], "description": "Handles the itemClick event.", "type": "{Event.Custom}"}, "itemSelect": {"preventable": "_defRatingItemSelectFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemSelect event."}], "description": "Handles the itemSelect event.", "param": "{Event.Facade} event The itemOver event.", "type": "{Event.Custom}"}, "valueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "valueChange", "description": "Fires when the value for the configuration attribute 'value' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultSelectedChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultSelectedChange", "description": "Fires when the value for the configuration attribute 'defaultSelected' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "elementsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "elementsChange", "description": "Fires when the value for the configuration attribute 'elements' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemOut": {"preventable": "_defRatingItemOutFn", "params": [{"type": "Event.Facade", "name": "event", "description": " The itemOut event."}], "description": "Handles the itemOut event.", "type": "{Event.Custom}"}, "titleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "titleChange", "description": "Fires when the value for the configuration attribute 'title' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "disabledChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "disabledChange", "description": "Fires when the value for the configuration attribute 'disabled' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "labelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "labelChange", "description": "Fires when the value for the configuration attribute 'label' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"elements": {"description": "<a href=\"NodeList.html\">NodeList</a> of elements used on the\nRating. Each element is one Star.", "writeonce": "", "readonly": "", "guessedname": "elements", "guessedtype": "property", "type": "NodeList"}, "title": {"default": "null", "type": "String", "description": "If set, will be used when there is no DOM <code>title</code> on the\nradio elements.", "guessedname": "title", "guessedtype": "property"}, "defaultSelected": {"description": "The number of selected starts when the Rating render.", "writeonce": "", "default": "0", "guessedname": "defaultSelected", "guessedtype": "property", "type": "Number"}, "inputName": {"default": "''", "type": "String", "description": "Name of the <a\nhref=\"Rating.html#config_hiddenInput\">hiddenInput</a> element. If\nnot specified will use the name of the replaced radio.", "guessedname": "inputName", "guessedtype": "property"}, "labelElement": {"type": "Node", "description": "Reference for the element which will contain the\n<a href=\"Rating.html#config_label\">label</a>.", "guessedname": "labelElement", "guessedtype": "property"}, "label": {"default": "''", "type": "String", "description": "Label to be displayed with the Rating elements.", "guessedname": "label", "guessedtype": "property"}, "disabled": {"default": "false", "type": "boolean", "description": "Whether the Rating is disabled or not. Disabled Ratings don't allow\nhover or click, just display selected stars.", "guessedname": "disabled", "guessedtype": "property"}, "hiddenInput": {"type": "Node", "description": "Hidden input to handle the selected value. This hidden input\nreplace the radio elements and keep the same name.", "guessedname": "hiddenInput", "guessedtype": "property"}, "value": {"default": "null", "type": "String", "description": "Stores the value of the current selected Rating element.", "guessedname": "value", "guessedtype": "property"}, "selectedIndex": {"default": "-1", "type": "Number", "description": "Stores the index of the selected element.", "guessedname": "selectedIndex", "guessedtype": "property"}, "size": {"default": "5", "type": "Number", "description": "Number of Rating elements to be displayed.", "guessedname": "size", "guessedtype": "property"}, "showTitle": {"default": "true", "type": "boolean", "description": "If <code>true</code> will extract the value of the\n<code>title</code> attribute on the radio, and use it on the\ngenerated Rating elements.", "guessedname": "showTitle", "guessedtype": "property"}, "canReset": {"default": "true", "type": "boolean", "description": "If <code>true</code> could be reseted (i.e., have no values\nselected).", "guessedname": "canReset", "guessedtype": "property"}}, "methods": {"_defRatingItemOverFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemOver event facade"}], "description": "Fires the itemOver event.", "guessedname": "_defRatingItemOverFn", "guessedtype": "function"}, "_handleMouseOverEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " mouseOver event facade"}], "description": "Fires the mouseOver event.", "guessedname": "_handleMouseOverEvent", "guessedtype": "function"}, "_handleClickEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " click event facade"}], "description": "Fires the click event.", "guessedname": "_handleClickEvent", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Rating instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "select": {"params": [{"type": "Number", "name": "index", "description": " Index to be selected"}], "description": "Selects the <code>index</code> Rating element.", "guessedname": "select", "guessedtype": "function"}, "_defRatingItemClickFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemClick event facade"}], "description": "Fires the itemClick event.", "guessedname": "_defRatingItemClickFn", "guessedtype": "function"}, "clearSelection": {"description": "Clear all selected starts to the default state.", "guessedname": "clearSelection", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Rating class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_defRatingItemSelectFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemSelect event facade"}], "description": "Fires the itemSelect event.", "guessedname": "_defRatingItemSelectFn", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Rating UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_parseInputElements": {"protected": "", "description": "Parse the HTML radio elements from the markup to be Rating elements.", "guessedname": "_parseInputElements", "guessedtype": "function"}, "_createEvents": {"protected": "", "description": "Create the custom events.", "guessedname": "_createEvents", "guessedtype": "function"}, "_syncElements": {"protected": "", "description": "Sync the Rating elements.", "guessedname": "_syncElements", "guessedtype": "function"}, "_canFireCustomEvent": {"return": {"type": "Boolean", "description": ""}, "description": "Check if the Rating element can fire the custom events. Disabled\nelements won't fire nothing.", "protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "guessedname": "_canFireCustomEvent", "guessedtype": "function"}, "indexOf": {"return": {"type": "Number", "description": ""}, "params": [{"type": "Node", "name": "elem", "description": " Rating element"}], "description": "Finds the index of the <code>elem</code>.", "guessedname": "indexOf", "guessedtype": "function"}, "_handleMouseOutEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " mouseOut event facade"}], "description": "Fires the mouseOut event.", "guessedname": "_handleMouseOutEvent", "guessedtype": "function"}, "_getInputData": {"protected": "", "description": "Get the <code>index</code> element input data stored on <a\nhref=\"Rating.html#property_inputElementsData\">inputElementsData</a>.", "guessedname": "_getInputData", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Rating UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "fillTo": {"params": [{"type": "Number", "name": "index", "description": " Index to be selected"}, {"type": "String", "name": "className", "description": " Class name to be applied when fill the Rating elements"}], "description": "Add the <code>className</code> on the the <code>index</code> element\nand all the previous Rating elements.", "guessedname": "fillTo", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render the Rating elements.", "guessedname": "_renderElements", "guessedtype": "function"}, "_syncLabelUI": {"protected": "", "description": "Sync the Rating label UI.", "guessedname": "_syncLabelUI", "guessedtype": "function"}, "_defRatingItemOutFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " itemOut event facade"}], "description": "Fires the itemOut event.", "guessedname": "_defRatingItemOutFn", "guessedtype": "function"}, "_afterSetLabel": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Rating.html#config_label\">label</a> attribute change.", "guessedname": "_afterSetLabel", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Rating. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-rating.js", "shortname": "Rating", "properties": {"Rating.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Rating.", "guessedname": "ATTRS", "guessedtype": "property"}, "Rating.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-rating/main.png\"/></p>\nA base class for Rating, providing:\n<ul>\n<li>A non-obstrusive star rating control</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Rating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"Rating.html#configattributes\">Configuration Attributes</a> available for\nRating."}, "DialogManager": {"name": "DialogManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for DialogManager:"}], "namespace": "", "module": "aui-dialog", "guessedname": "DialogManager", "methods": {"refreshByChild": {"params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "description": "<p>Invoke the <a href=\"IOPlugin.html#method_start\">start</a> method\nfrom the <a href=\"IOPlugin.html\">IOPlugin</a> plugged on this Dialog\ninstance. If there is no IOPlugin plugged it does nothing.</p>\nExample:\n<pre><code>A.DialogManager.refreshByChild('#dialogContent1');</code></pre>", "guessedname": "refreshByChild", "guessedtype": "function"}, "closeByChild": {"return": {"type": "Dialog", "description": ""}, "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "description": "<p>Invoke the <a href=\"Dialog.html#method_close\">close</a> method from\nthe Dialog which contains the <code>child</code> element.</p>\nExample:\n<pre><code>A.DialogManager.closeByChild('#dialogContent1');</code></pre>", "guessedname": "closeByChild", "guessedtype": "function"}, "findByChild": {"return": {"type": "Widget", "description": ""}, "params": [{"type": "Node | String", "name": "child", "description": " Child node of the Dialog."}], "description": "Find the <a href=\"Widget.html\">Widget</a> instance based on a child\nelement.", "guessedname": "findByChild", "guessedtype": "function"}}, "static": "", "superclass": "OverlayManager", "file": "aui-dialog.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "DialogManager", "description": "A base class for DialogManager:"}, "Dialog": {"name": "Dialog", "configs": {"draggable": {"default": "true", "type": "boolean", "description": "Boolean specifying if the Panel should be draggable.", "guessedname": "draggable", "guessedtype": "property"}, "dragInstance": {"default": "null", "type": "A.DD.Drag", "description": "Stores the Drag instance for the <code>A.DD.Drag</code> used by\nthis Dialog.", "guessedname": "dragInstance", "guessedtype": "property"}, "resizable": {"default": "true", "type": "boolean", "description": "Boolean specifying if the Panel should be resizable.", "guessedname": "resizable", "guessedtype": "property"}, "destroyOnClose": {"default": "false", "type": "boolean", "description": "Invoke the <a href=\"Dialog.html#method_destroy\">destroy</a>\nmethod when the dialog is closed (i.e., remove the Dialog\n<code>boundingBox</code> from the body, purge events etc).", "guessedname": "destroyOnClose", "guessedtype": "property"}, "resizableInstance": {"default": "null", "type": "Resize", "description": "Stores the Drag instance for the\n<a href=\"Resize.html\">Resize</a> used by this Dialog.", "guessedname": "resizableInstance", "guessedtype": "property"}, "buttons": {"default": "[]", "type": "Array", "description": "<p>Array of object literals, each containing a set of properties\ndefining a button to be appended into the Dialog's footer. Each\nbutton object in the buttons array can have two properties:</p>\n<dl>\n<dt>text:</dt>\n<dd>\nThe text that will display on the face of the button. The text can include\nHTML, as long as it is compliant with HTML Button specifications.\n</dd>\n<dt>handler:</dt>\n<dd>\nA reference to a function that should fire when the button is clicked.\n(In this case scope of this function is always its Dialog instance.)\n</dd>\n</dl>", "guessedname": "buttons", "guessedtype": "property"}, "modal": {"default": "false", "type": "boolean", "description": "True if the Panel should be displayed in a modal fashion,\nautomatically creating a transparent mask over the document that\nwill not be removed until the Dialog is dismissed. Uses\n<a href=\"OverlayMask.html\">OverlayMask</a>.", "guessedname": "modal", "guessedtype": "property"}, "bodyContent": {"default": "HTMLTextNode", "type": "Node | String", "description": "See <a href=\"WidgetStdMod.html#config_bodyContent\">WidgetStdMod bodyContent</a>.", "guessedname": "bodyContent", "guessedtype": "property"}, "close": {"default": "true", "type": "boolean", "description": "If <code>true</code> the close icon will be displayed on the\nDialog header.", "guessedname": "close", "guessedtype": "property"}, "constrain2view": {"type": "Object", "description": "Will attempt to constrain the dialog to the boundaries of the\nviewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If <code>true</code> give stacking habilities to the Dialog.", "guessedname": "stack", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-dialog/main.png\"/></p>\nA base class for Dialog, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Emulate the behavior of an dialog window using a floating, draggable HTML element</li>\n<li>Interface for easily gathering information from the user without leaving the underlying page context</li>\n<li>Using the <a href=\"IOPlugin.html\">IOPlugin</a>, supports the submission of form data either through an XMLHttpRequest, through a normal form submission, or through a fully script-based response</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Dialog({\nbodyContent: 'Dialog body',\ncentered: true,\nconstrain2view: true,\ndestroyOnClose: true,\ndraggable: true,\nheight: 250,\nresizable: false,\nstack: true,\ntitle: 'Dialog title',\nwidth: 500\n}).render();\n</code></pre>\nCheck the list of <a href=\"Dialog.html#configattributes\">Configuration Attributes</a> available for\nDialog."}], "namespace": "", "module": "aui-dialog", "events": {"constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "buttonsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "buttonsChange", "description": "Fires when the value for the configuration attribute 'buttons' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "destroyOnCloseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "destroyOnCloseChange", "description": "Fires when the value for the configuration attribute 'destroyOnClose' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "modalChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "modalChange", "description": "Fires when the value for the configuration attribute 'modal' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizableChange", "description": "Fires when the value for the configuration attribute 'resizable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "bodyContentChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "bodyContentChange", "description": "Fires when the value for the configuration attribute 'bodyContent' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dragInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dragInstanceChange", "description": "Fires when the value for the configuration attribute 'dragInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "closeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "closeChange", "description": "Fires when the value for the configuration attribute 'close' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "draggableChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "draggableChange", "description": "Fires when the value for the configuration attribute 'draggable' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizableInstanceChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizableInstanceChange", "description": "Fires when the value for the configuration attribute 'resizableInstance' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "Dialog", "methods": {"_setResizable": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_resizable\">resizable</a>\nattribute.", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setResizable", "guessedtype": "function"}, "_afterRenderer": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the render phase. Invoke\n<a href=\"Dialog.html#method__initButtons\">_initButtons</a>.", "guessedname": "_afterRenderer", "guessedtype": "function"}, "_afterSetVisible": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"Overlay.html#config_visible\">visible</a> attribute change.", "guessedname": "_afterSetVisible", "guessedtype": "function"}, "_setDraggable": {"return": {"type": "Object", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_draggable\">draggable</a>\nattributte. Initialize the A.DD.Drag on the Dialog.", "protected": "", "params": [{"type": "Object", "name": "value", "description": " Object to be passed to the A.DD.Drag constructor."}], "guessedname": "_setDraggable", "guessedtype": "function"}, "_initButtons": {"protected": "", "description": "Render the buttons on the footer of the Dialog.", "guessedname": "_initButtons", "guessedtype": "function"}, "_setModal": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_modal\">modal</a> attribute.", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setModal", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Dialog class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "_bindLazyComponents": {"private": "", "description": "Bind a <code>mouseenter</code> listener to the <code>boundingBox</code>\nto invoke the\n<a href=\"Dialog.html#config__initLazyComponents\">_initLazyComponents</a>.\nPerformance reasons.", "guessedname": "_bindLazyComponents", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Dialog.html#config_stack\">stack</a>\nattribute.", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Dialog UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "close": {"description": "Fires the close event to close the Dialog.", "guessedname": "close", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Dialog instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_initLazyComponents": {"private": "", "description": "Forces <code>lazyAdd:true</code> attributtes invoke the setter methods.", "guessedname": "_initLazyComponents", "guessedtype": "function"}, "_handleEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " close event facade"}], "description": "Handles the close event logic.", "guessedname": "_close", "guessedtype": "function"}}, "extends": "Panel", "superclass": "Panel", "file": "aui-dialog.js", "guessedtype": "function", "shortname": "Dialog", "properties": {"Dialog.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "Dialog.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Dialog.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-dialog/main.png\"/></p>\nA base class for Dialog, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Emulate the behavior of an dialog window using a floating, draggable HTML element</li>\n<li>Interface for easily gathering information from the user without leaving the underlying page context</li>\n<li>Using the <a href=\"IOPlugin.html\">IOPlugin</a>, supports the submission of form data either through an XMLHttpRequest, through a normal form submission, or through a fully script-based response</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.Dialog({\nbodyContent: 'Dialog body',\ncentered: true,\nconstrain2view: true,\ndestroyOnClose: true,\ndraggable: true,\nheight: 250,\nresizable: false,\nstack: true,\ntitle: 'Dialog title',\nwidth: 500\n}).render();\n</code></pre>\nCheck the list of <a href=\"Dialog.html#configattributes\">Configuration Attributes</a> available for\nDialog."}, "ParseContent": {"name": "ParseContent", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for ParseContent, providing:\n<ul>\n<li>After plug ParseContent on a A.Node instance the javascript chunks will be executed (remote and inline scripts)</li>\n<li>All the javascripts within a content will be executed according to the order of apparition</li>\n</ul>\n<p><strong>NOTE:</strong> For performance reasons on DOM manipulation,\nParseContent only parses the content passed to the\n<a href=\"Node.html#method_setContent\">setContent</a>,\n<a href=\"Node.html#method_prepend\">prepend</a> and\n<a href=\"Node.html#method_append\">append</a> methods.</p>\nQuick Example:<br/>\n<pre><code>node.plug(A.Plugin.ParseContent);</code></pre>\nCheck the list of <a href=\"ParseContent.html#configattributes\">Configuration Attributes</a> available for\nParseContent."}], "namespace": "", "module": "aui-parse-content", "methods": {"parseContent": {"return": {"type": "String", "description": ""}, "params": [{"type": "String", "name": "content", "description": " HTML string"}], "description": "Extract the <code>script</code> tags from the string content and\nevaluate the chunks.", "guessedname": "parseContent", "guessedtype": "function"}, "_bindAOP": {"protected": "", "description": "Bind listeners on the <code>insert</code> and <code>setContent</code>\nmethods of the Node instance where you are plugging the ParseContent.\nThese listeners are responsible for intercept the HTML passed and parse\nthem.", "guessedname": "_bindAOP", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during ParseContent instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "globalEval": {"params": [{"type": "String", "name": "data", "description": " JavaScript String."}], "description": "Global eval the <data>data</data> passed.", "guessedname": "globalEval", "guessedtype": "function"}, "clean": {"return": {"type": "Object", "description": ""}, "description": "Create an HTML fragment with the String passed, extract all the script\ntags and return an Object with a reference for the extracted scripts and\nthe fragment.", "protected": "", "params": [{"type": "String", "name": "content", "description": " HTML content."}], "guessedname": "_clean", "guessedtype": "function"}, "_dispatch": {"return": {"type": "String", "description": ""}, "description": "Loop trough all extracted <code>script</code> tags and evaluate them.", "protected": "", "params": [{"type": "Object", "name": "output", "description": " Object containing the reference for the fragment and the extracted <code>script</code> tags."}], "guessedname": "_dispatch", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "aui-parse-content.js", "shortname": "ParseContent", "properties": {"ParseContent.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ParseContent.", "guessedname": "ATTRS", "guessedtype": "property"}, "ParseContent.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "OverlayLoading.NS": {"type": "String", "static": "", "description": "Static property provides a string to identify the namespace.", "guessedname": "NS", "guessedtype": "property"}}, "description": "A base class for ParseContent, providing:\n<ul>\n<li>After plug ParseContent on a A.Node instance the javascript chunks will be executed (remote and inline scripts)</li>\n<li>All the javascripts within a content will be executed according to the order of apparition</li>\n</ul>\n<p><strong>NOTE:</strong> For performance reasons on DOM manipulation,\nParseContent only parses the content passed to the\n<a href=\"Node.html#method_setContent\">setContent</a>,\n<a href=\"Node.html#method_prepend\">prepend</a> and\n<a href=\"Node.html#method_append\">append</a> methods.</p>\nQuick Example:<br/>\n<pre><code>node.plug(A.Plugin.ParseContent);</code></pre>\nCheck the list of <a href=\"ParseContent.html#configattributes\">Configuration Attributes</a> available for\nParseContent."}, "AUI~event~input": {"name": "AUI~event~input", "namespace": "", "module": "aui-event", "properties": {"A.Node.DOM_EVENTS.input": {"type": "Event.Handle", "static": "", "description": "A.Node.DOM_EVENTS.input event.", "guessedname": "input", "guessedtype": "property"}}, "guessedname": "L", "methods": {"void();": {}}, "file": "aui-event-input.js", "guessedtype": "property", "shortname": "AUI~event~input", "events": {"input": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'input'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "el", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "o", "description": "  optional context object"}, {"type": "", "name": "args", "description": " 0..n additional arguments that should be provided\nto the listener."}], "description": "This event fires when the value of the element changes, either as a result of\na keystroke, or from an input event.", "guessedname": "on", "guessedtype": "function"}}, "description": "An object that encapsulates text changed events for textareas and input\nelement of type text and password. This event only occurs when the element\nis focused."}, "OverlayContext": {"name": "OverlayContext", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-context/main.png\"/></p>\nA base class for OverlayContext, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Able to display an <a href=\"Overlay.html\">Overlay</a> at a specified corner of an element <a href=\"OverlayContext.html#config_trigger\">trigger</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContext({\nboundingBox: '#OverlayBoundingBox',\nhideOn: 'mouseleave',\nshowOn: 'mouseenter',\ntrigger: '.menu-trigger'\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContext.html#configattributes\">Configuration Attributes</a> available for\nOverlayContext."}], "namespace": "", "module": "aui-overlay", "events": {"cancellableHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cancellableHideChange", "description": "Fires when the value for the configuration attribute 'cancellableHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentNodeChange", "description": "Fires when the value for the configuration attribute 'currentNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnDocumentClickChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnDocumentClickChange", "description": "Fires when the value for the configuration attribute 'hideOnDocumentClick' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showDelayChange", "description": "Fires when the value for the configuration attribute 'showDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alignChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alignChange", "description": "Fires when the value for the configuration attribute 'align' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "visibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "visibleChange", "description": "Fires when the value for the configuration attribute 'visible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideDelayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideDelayChange", "description": "Fires when the value for the configuration attribute 'hideDelay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "triggerChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "triggerChange", "description": "Fires when the value for the configuration attribute 'trigger' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"currentNode": {"default": "First item of the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a> NodeList.", "type": "Node", "description": "OverlayContext allow multiple elements to be the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a>, the\ncurrentNode stores the current active one.", "guessedname": "currentNode", "guessedtype": "property"}, "hideOn": {"default": "mouseout", "type": "String", "description": "The event which is responsible to hide the OverlayContext.", "guessedname": "hideOn", "guessedtype": "property"}, "align": {"default": "{ node: null, points: [ TL, BL ] }", "type": "Object", "description": "Inherited from <a href=\"Overlay.html#config_align\">Overlay</a>.", "guessedname": "align", "guessedtype": "property"}, "hideOnDocumentClick": {"default": "true", "type": "boolean", "description": "If true the instance is registered on the\n<a href=\"OverlayContextManager.html\">OverlayContextManager</a> static\nclass and will be hide when the user click on document.", "guessedname": "hideOnDocumentClick", "guessedtype": "property"}, "cancellableHide": {"default": "true", "type": "boolean", "description": "Cancel auto hide delay if the user interact with the Overlay\n(focus, click, mouseover)", "guessedname": "cancellableHide", "guessedtype": "property"}, "showDelay": {"default": "0", "type": "Number", "description": "Number of milliseconds after the show method is invoked to show the\nOverlayContext.", "guessedname": "showDelay", "guessedtype": "property"}, "visible": {"default": "false", "type": "boolean", "description": "If true the OverlayContext is visible by default after the render phase.\nInherited from <a href=\"Overlay.html\">Overlay</a>.", "guessedname": "visible", "guessedtype": "property"}, "trigger": {"default": "null", "type": "{Node | NodeList | String}", "description": "Node, NodeList or Selector which will be used as trigger elements\nto show or hide the OverlayContext.", "guessedname": "trigger", "guessedtype": "property"}, "showOn": {"default": "mouseover", "type": "String", "description": "The event which is responsible to show the OverlayContext.", "guessedname": "showOn", "guessedtype": "property"}, "hideDelay": {"default": "0", "type": "Number", "description": "Number of milliseconds after the hide method is invoked to hide the\nOverlayContext.", "guessedname": "hideDelay", "guessedtype": "property"}}, "methods": {"_afterTriggerChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the <a href=\"OverlayContext.html#config_trigger\">trigger</a>\nattribute change.", "guessedname": "_afterTriggerChange", "guessedtype": "function"}, "_stopTriggerEventPropagation": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Helper method to invoke event.stopPropagation().", "guessedname": "_stopTriggerEventPropagation", "guessedtype": "function"}, "hide": {"description": "Hides the OverlayContext.", "guessedname": "hide", "guessedtype": "function"}, "_beforeShowOnChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires before the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute change.", "guessedname": "_beforeShowOnChange", "guessedtype": "function"}, "_setShowOn": {"return": {"type": "String", "description": ""}, "description": "Setter for the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute.", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setShowOn", "guessedtype": "function"}, "_toggle": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Handles the logic for the\n<a href=\"OverlayContext.html#method_toggle\">toggle</a>.", "guessedname": "_toggle", "guessedtype": "function"}, "_beforeTriggerChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires before the <a href=\"OverlayContext.html#config_trigger\">trigger</a>\nattribute change.", "guessedname": "_beforeTriggerChange", "guessedtype": "function"}, "_cancelAutoHide": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Cancel hide event if the user does some interaction with the\nOverlayContext (focus, click or mouseover).", "guessedname": "_cancelAutoHide", "guessedtype": "function"}, "_invokeHideTaskOnInteraction": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Invoke the hide event when the OverlayContext looses the focus.", "guessedname": "_invokeHideTaskOnInteraction", "guessedtype": "function"}, "_afterHideOnChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute change.", "guessedname": "_afterHideOnChange", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the OverlayContext class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destructor", "guessedtype": "function"}, "toggle": {"params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Toggles visibility of the OverlayContext.", "guessedname": "toggle", "guessedtype": "function"}, "_afterShowOnChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the <a href=\"OverlayContext.html#config_showOn\">showOn</a>\nattribute change.", "guessedname": "_afterShowOnChange", "guessedtype": "function"}, "_setHideOn": {"return": {"type": "String", "description": ""}, "description": "Setter for the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute.", "param": "{boolean} value", "protected": "", "params": [{"type": "String", "name": "eventType", "description": " Event type"}], "guessedname": "_setHideOn", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayContext UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_beforeHideOnChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires before the <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>\nattribute change.", "guessedname": "_beforeHideOnChange", "guessedtype": "function"}, "updateCurrentNode": {"params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Update the\n<a href=\"OverlayContext.html#config_currentNode\">currentNode</a> with the\n<a href=\"OverlayContext.html#config_align\">align</a> node or the\nevent.currentTarget and in last case with the first item of the\n<a href=\"OverlayContext.html#config_trigger\">trigger</a>.", "guessedname": "updateCurrentNode", "guessedtype": "function"}, "refreshAlign": {"description": "Refreshes the alignment of the OverlayContext with the\n<a href=\"OverlayContext.html#config_currentNode\">currentNode</a>. See\nalso <a href=\"OverlayContext.html#config_align\">align</a>.", "guessedname": "refreshAlign", "guessedtype": "function"}, "clearIntervals": {"description": "Clear the intervals to show or hide the OverlayContext. See\n<a href=\"OverlayContext.html#config_hideDelay\">hideDelay</a> and\n<a href=\"OverlayContext.html#config_showDelay\">showDelay</a>.", "guessedname": "clearIntervals", "guessedtype": "function"}}, "extends": "OverlayBase", "superclass": "OverlayBase", "file": "aui-overlay-context.js", "shortname": "OverlayContext", "properties": {"OverlayContext.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayContext.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayContext.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-context/main.png\"/></p>\nA base class for OverlayContext, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Able to display an <a href=\"Overlay.html\">Overlay</a> at a specified corner of an element <a href=\"OverlayContext.html#config_trigger\">trigger</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContext({\nboundingBox: '#OverlayBoundingBox',\nhideOn: 'mouseleave',\nshowOn: 'mouseenter',\ntrigger: '.menu-trigger'\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContext.html#configattributes\">Configuration Attributes</a> available for\nOverlayContext."}, "A.io": {"name": "A.io", "namespace": "", "module": "aui-io", "methods": {"A.io.request": {"return": {"type": "IORequest", "description": ""}, "params": [{"type": "String", "name": "uri", "description": " URI to be requested."}, {"type": "Object", "name": "config", "description": " Configuration Object for the <a href=\"io.html\">IO</a>."}], "description": "Static method to invoke the <a href=\"IORequest.html\">IORequest</a>. Likewise <a href=\"io.html#method_io\">io</a>.", "guessedname": "request", "guessedtype": "function"}}, "static": "", "file": "aui-io-request.js", "shortname": "A.io", "description": "Alloy IO extension"}, "CalendarManager": {"name": "CalendarManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "A base class for CalendarManager:"}], "namespace": "", "module": "aui-calendar", "events": {"zIndexBaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexBaseChange", "description": "Fires when the value for the configuration attribute 'zIndexBase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CalendarManager", "static": "", "superclass": "OverlayManager", "file": "aui-calendar-base.js", "guessedtype": "property", "extends": "OverlayManager", "shortname": "CalendarManager", "configs": {"zIndexBase": {"default": "1000", "type": "Number", "description": "ZIndex default value passed to the\n<a href=\"OverlayManager.html#config_zIndexBase\">zIndexBase</a> of\n<a href=\"OverlayManager.html\">OverlayManager</a>.", "guessedname": "zIndexBase", "guessedtype": "property"}}, "description": "A base class for CalendarManager:"}, "CharCounter": {"name": "CharCounter", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-char-counter/main.png\"/></p>\nA base class for CharCounter, providing:\n<ul>\n<li>Limit the number of characters allowed in an input box</li>\n<li>Display the number of characters left</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.CharCounter({\ninput: '#elementId',\ncounter: '#counterDisplayId',\nmaxLength: 10\n});\n</code></pre>\nCheck the list of <a href=\"CharCounter.html#configattributes\">Configuration Attributes</a> available for\nCharCounter."}], "namespace": "", "module": "aui-char-counter", "events": {"counterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "counterChange", "description": "Fires when the value for the configuration attribute 'counter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxLengthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxLengthChange", "description": "Fires when the value for the configuration attribute 'maxLength' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"input": {"default": "null", "type": "{Node | String}", "description": "Node or Selector for the input field. Required.", "guessedname": "input", "guessedtype": "property"}, "counter": {"default": "null", "type": "{Node | String}", "description": "Node or Selector to display the information of the counter.", "guessedname": "counter", "guessedtype": "property"}, "maxLength": {"default": "Infinity", "type": "Number", "description": "Max number of characters the <a\nhref=\"CharCounter.html#config_input\">input</a> can have.", "guessedname": "maxLength", "guessedtype": "property"}}, "methods": {"syncUI": {"protected": "", "description": "Sync the CharCounter UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_onInputChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fired on input value change.", "guessedname": "_onInputChange", "guessedtype": "function"}, "checkLength": {"description": "Check the current value of the <a\nhref=\"CharCounter.html#config_input\">input</a>, truncate the data if\nneeded, and re-sync the UI. Fired from <a\nhref=\"CharCounter.html#method__onInputChange\">_onInputChange</a>.", "guessedname": "checkLength", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during CharCounter instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_setMaxLength": {"return": {"type": "Number", "description": ""}, "description": "Setter for <a href=\"CharCounter.html#config_maxLength\">maxLength</a>.", "protected": "", "params": [{"type": "Number", "name": "v", "description": " Value of the new <a\nhref=\"CharCounter.html#config_maxLenght\">maxLenght</a>."}], "guessedname": "_setMaxLength", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the CharCounter UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the CharCounter class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}}, "uses": ["AUI~input~handle"], "superclass": "Base", "file": "aui-char-counter.js", "extends": "Base", "shortname": "CharCounter", "properties": {"handler": {"protected": "", "type": "EventHandle", "description": "Event handler for the input <a\nhref=\"module_aui-event.html\">aui-event</a> event.", "guessedname": "handler", "guessedtype": "property"}, "CharCounter.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "CharCounter.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the CharCounter.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-char-counter/main.png\"/></p>\nA base class for CharCounter, providing:\n<ul>\n<li>Limit the number of characters allowed in an input box</li>\n<li>Display the number of characters left</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.CharCounter({\ninput: '#elementId',\ncounter: '#counterDisplayId',\nmaxLength: 10\n});\n</code></pre>\nCheck the list of <a href=\"CharCounter.html#configattributes\">Configuration Attributes</a> available for\nCharCounter."}, "ThumbRating": {"name": "ThumbRating", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-rating/thumb-rating.png\"/></p>\nA base class for ThumbRating, providing:\n<ul>\n<li>A non-obstrusive star rating control using Thumb up and Thumb down icons</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ThumbRating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ThumbRating.html#configattributes\">Configuration Attributes</a> available for\nThumbRating."}], "namespace": "", "module": "aui-rating", "events": {"sizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "sizeChange", "description": "Fires when the value for the configuration attribute 'size' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"size": {"description": "The size on ThumbRating is always 2 (i.e., thumb up and thumb down).", "default": "2", "readonly": "", "guessedname": "size", "guessedtype": "property", "type": "Number"}}, "methods": {"_syncElements": {"protected": "", "description": "Empty method, no logic needed on this method on ThumbRating.", "guessedname": "_syncElements", "guessedtype": "function"}, "fillTo": {"params": [{"type": "Number", "name": "index", "description": " Index to be selected"}, {"type": "String", "name": "className", "description": " Class name to be applied when fill the Rating elements"}], "description": "Add the <code>className</code> on the the <code>index</code> element\nand all the previous Rating elements.", "guessedname": "fillTo", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ThumbRating. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Rating", "superclass": "Rating", "file": "aui-rating.js", "shortname": "ThumbRating", "properties": {"ThumbRating.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ThumbRating.", "guessedname": "ATTRS", "guessedtype": "property"}, "ThumbRating.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-rating/thumb-rating.png\"/></p>\nA base class for ThumbRating, providing:\n<ul>\n<li>A non-obstrusive star rating control using Thumb up and Thumb down icons</li>\n<li>Could be based on a set of radio input boxes</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ThumbRating({\nboundingBox: '#rating',\ndefaultSelected: 3,\ndisabled: false,\nlabel: 'Label'\n}).render();\n</code></pre>\nCheck the list of <a href=\"ThumbRating.html#configattributes\">Configuration Attributes</a> available for\nThumbRating."}, "DataType.String": {"name": "DataType.String", "namespace": "", "module": "aui-datatype", "guessedname": "DS", "methods": {"evaluate": {"return": {"type": "boolean | null | number | String | undefined", "description": "Parsed value"}, "params": [{"type": "*", "name": "data", "description": " Input data to be evaluated."}], "description": "Evaluates a string to a primitive value (if possible). Supports\n<code>true</code> and <code>false</code> also. Unrecognized strings are\nreturned without any modification.", "guessedname": "evaluate", "guessedtype": "function"}}, "static": "", "file": "aui-datatype.js", "guessedtype": "property", "shortname": "DataType.String", "description": "DataType.String provides a set of utility to provides a simple function\nthat evaluates a string to a primitive value (if possible). Supports\n<code>true</code> and <code>false</code> also."}, "ToolItem": {"name": "ToolItem", "configs": {"defaultState": {"type": "boolean", "description": "Receives a default interaction state.", "guessedname": "defaultState", "guessedtype": "property"}, "activeState": {"type": "boolean", "description": "Receives an interaction state of active when the user clicks on it.", "guessedname": "activeState", "guessedtype": "property"}, "hoverState": {"type": "boolean", "description": "Receives an interaction state of hover during the\n<code>mouseover</code> event.", "guessedname": "hoverState", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tool-item/main.png\"/></p>\nA base class for ToolItem, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Iconic buttons that provide interaction states and event handling</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ToolItem({\nicon: 'circle-plus'\n}).render();\n</code></pre>\n<p>List of valid icons:</p>\n<ul>\n<li>carat-1-t</li>\n<li>carat-1-tr</li>\n<li>carat-1-r</li>\n<li>carat-1-br</li>\n<li>carat-1-b</li>\n<li>carat-1-bl</li>\n<li>carat-1-l</li>\n<li>carat-1-tl</li>\n<li>carat-2-t-b</li>\n<li>carat-2-r-l</li>\n<li>triangle-1-t</li>\n<li>triangle-1-tr</li>\n<li>triangle-1-r</li>\n<li>triangle-1-br</li>\n<li>triangle-1-b</li>\n<li>triangle-1-bl</li>\n<li>triangle-1-l</li>\n<li>triangle-1-tl</li>\n<li>triangle-2-t-b</li>\n<li>triangle-2-r-l</li>\n<li>arrow-1-t</li>\n<li>arrow-1-tr</li>\n<li>arrow-1-r</li>\n<li>arrow-1-br</li>\n<li>arrow-1-b</li>\n<li>arrow-1-bl</li>\n<li>arrow-1-l</li>\n<li>arrow-1-tl</li>\n<li>arrow-2-t-b</li>\n<li>arrow-2-tr-bl</li>\n<li>arrow-2-r-l</li>\n<li>arrow-2-br-tl</li>\n<li>arrowstop-1-t</li>\n<li>arrowstop-1-r</li>\n<li>arrowstop-1-b</li>\n<li>arrowstop-1-l</li>\n<li>arrowthick-1-t</li>\n<li>arrowthick-1-tr</li>\n<li>arrowthick-1-r</li>\n<li>arrowthick-1-br</li>\n<li>arrowthick-1-b</li>\n<li>arrowthick-1-bl</li>\n<li>arrowthick-1-l</li>\n<li>arrowthick-1-tl</li>\n<li>arrowthick-2-t-b</li>\n<li>arrowthick-2-tr-bl</li>\n<li>arrowthick-2-r-l</li>\n<li>arrowthick-2-br-tl</li>\n<li>arrowthickstop-1-t</li>\n<li>arrowthickstop-1-r</li>\n<li>arrowthickstop-1-b</li>\n<li>arrowthickstop-1-l</li>\n<li>arrowreturnthick-1-l</li>\n<li>arrowreturnthick-1-t</li>\n<li>arrowreturnthick-1-r</li>\n<li>arrowreturnthick-1-b</li>\n<li>arrowreturn-1-l</li>\n<li>arrowreturn-1-t</li>\n<li>arrowreturn-1-r</li>\n<li>arrowreturn-1-b</li>\n<li>arrowrefresh-1-l</li>\n<li>arrowrefresh-1-t</li>\n<li>arrowrefresh-1-r</li>\n<li>arrowrefresh-1-b</li>\n<li>arrow-4</li>\n<li>arrow-4-diag</li>\n<li>extlink</li>\n<li>newwin</li>\n<li>refresh</li>\n<li>shuffle</li>\n<li>transfer-r-l</li>\n<li>transferthick-r-l</li>\n<li>folder-collapsed</li>\n<li>folder-open</li>\n<li>document</li>\n<li>document-b</li>\n<li>note</li>\n<li>mail-closed</li>\n<li>mail-open</li>\n<li>suitcase</li>\n<li>comment</li>\n<li>person</li>\n<li>print</li>\n<li>trash</li>\n<li>locked</li>\n<li>unlocked</li>\n<li>bookmark</li>\n<li>tag</li>\n<li>home</li>\n<li>flag</li>\n<li>calendar</li>\n<li>cart</li>\n<li>pencil</li>\n<li>clock</li>\n<li>disk</li>\n<li>calculator</li>\n<li>zoomin</li>\n<li>zoomout</li>\n<li>search</li>\n<li>wrench</li>\n<li>gear</li>\n<li>heart</li>\n<li>star</li>\n<li>link</li>\n<li>cancel</li>\n<li>plus</li>\n<li>plusthick</li>\n<li>minus</li>\n<li>minusthick</li>\n<li>close</li>\n<li>closethick</li>\n<li>key</li>\n<li>lightbulb</li>\n<li>scissors</li>\n<li>clipboard</li>\n<li>copy</li>\n<li>contact</li>\n<li>image</li>\n<li>video</li>\n<li>script</li>\n<li>alert</li>\n<li>info</li>\n<li>notice</li>\n<li>help</li>\n<li>check</li>\n<li>bullet</li>\n<li>radio-off</li>\n<li>radio-on</li>\n<li>pin-l</li>\n<li>pin-b</li>\n<li>play</li>\n<li>pause</li>\n<li>seek-next</li>\n<li>seek-prev</li>\n<li>seek-end</li>\n<li>seek-first</li>\n<li>stop</li>\n<li>eject</li>\n<li>volume-off</li>\n<li>volume-on</li>\n<li>power</li>\n<li>signal-diag</li>\n<li>signal</li>\n<li>battery-0</li>\n<li>battery-1</li>\n<li>battery-2</li>\n<li>battery-3</li>\n<li>circle-plus</li>\n<li>circle-minus</li>\n<li>circle-close</li>\n<li>circle-triangle-r</li>\n<li>circle-triangle-b</li>\n<li>circle-triangle-l</li>\n<li>circle-triangle-t</li>\n<li>circle-arrow-r</li>\n<li>circle-arrow-b</li>\n<li>circle-arrow-l</li>\n<li>circle-arrow-t</li>\n<li>circle-zoomin</li>\n<li>circle-zoomout</li>\n<li>circle-check</li>\n<li>circlesmall-plus</li>\n<li>circlesmall-minus</li>\n<li>circlesmall-close</li>\n<li>squaresmall-plus</li>\n<li>squaresmall-minus</li>\n<li>squaresmall-close</li>\n<li>grip-dotted-vertical</li>\n<li>grip-dotted-horizontal</li>\n<li>grip-solid-vertical</li>\n<li>grip-solid-horizontal</li>\n<li>gripsmall-diagonal-br</li>\n<li>grip-diagonal-br</li>\n<li>loading</li>\n</ul>\nCheck the list of <a href=\"ToolItem.html#configattributes\">Configuration Attributes</a> available for\nToolItem."}], "namespace": "", "module": "aui-tool", "events": {"activeStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeStateChange", "description": "Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hoverStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoverStateChange", "description": "Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultStateChange", "description": "Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ToolItem", "methods": {"_uiSetIcon": {"protected": "", "params": [{"type": "Type", "name": "name", "description": " description"}], "description": "Sets the icon <a href=\"ToolItem.html#assets_cssClasses\">class\nname</a> on the <code>contentBox</code>.", "guessedname": "_uiSetIcon", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during ToolItem instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_afterIconChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after the value of the\n<a href=\"ToolItem.html#config_icon\">icon</a> attribute change.", "guessedname": "_afterIconChange", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the ToolItem UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the ToolItem class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ToolItem. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-tool-item.js", "guessedtype": "function", "shortname": "ToolItem", "properties": {"UI_EVENTS": {"protected": "", "type": "Object", "description": "UI_EVENTS empty. See <a href=\"Widget.html\">Widget UI_EVENTS</a>.", "guessedname": "UI_EVENTS", "guessedtype": "property"}, "ToolItem.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ToolItem.", "guessedname": "ATTRS", "guessedtype": "property"}, "ToolItem.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tool-item/main.png\"/></p>\nA base class for ToolItem, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Iconic buttons that provide interaction states and event handling</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ToolItem({\nicon: 'circle-plus'\n}).render();\n</code></pre>\n<p>List of valid icons:</p>\n<ul>\n<li>carat-1-t</li>\n<li>carat-1-tr</li>\n<li>carat-1-r</li>\n<li>carat-1-br</li>\n<li>carat-1-b</li>\n<li>carat-1-bl</li>\n<li>carat-1-l</li>\n<li>carat-1-tl</li>\n<li>carat-2-t-b</li>\n<li>carat-2-r-l</li>\n<li>triangle-1-t</li>\n<li>triangle-1-tr</li>\n<li>triangle-1-r</li>\n<li>triangle-1-br</li>\n<li>triangle-1-b</li>\n<li>triangle-1-bl</li>\n<li>triangle-1-l</li>\n<li>triangle-1-tl</li>\n<li>triangle-2-t-b</li>\n<li>triangle-2-r-l</li>\n<li>arrow-1-t</li>\n<li>arrow-1-tr</li>\n<li>arrow-1-r</li>\n<li>arrow-1-br</li>\n<li>arrow-1-b</li>\n<li>arrow-1-bl</li>\n<li>arrow-1-l</li>\n<li>arrow-1-tl</li>\n<li>arrow-2-t-b</li>\n<li>arrow-2-tr-bl</li>\n<li>arrow-2-r-l</li>\n<li>arrow-2-br-tl</li>\n<li>arrowstop-1-t</li>\n<li>arrowstop-1-r</li>\n<li>arrowstop-1-b</li>\n<li>arrowstop-1-l</li>\n<li>arrowthick-1-t</li>\n<li>arrowthick-1-tr</li>\n<li>arrowthick-1-r</li>\n<li>arrowthick-1-br</li>\n<li>arrowthick-1-b</li>\n<li>arrowthick-1-bl</li>\n<li>arrowthick-1-l</li>\n<li>arrowthick-1-tl</li>\n<li>arrowthick-2-t-b</li>\n<li>arrowthick-2-tr-bl</li>\n<li>arrowthick-2-r-l</li>\n<li>arrowthick-2-br-tl</li>\n<li>arrowthickstop-1-t</li>\n<li>arrowthickstop-1-r</li>\n<li>arrowthickstop-1-b</li>\n<li>arrowthickstop-1-l</li>\n<li>arrowreturnthick-1-l</li>\n<li>arrowreturnthick-1-t</li>\n<li>arrowreturnthick-1-r</li>\n<li>arrowreturnthick-1-b</li>\n<li>arrowreturn-1-l</li>\n<li>arrowreturn-1-t</li>\n<li>arrowreturn-1-r</li>\n<li>arrowreturn-1-b</li>\n<li>arrowrefresh-1-l</li>\n<li>arrowrefresh-1-t</li>\n<li>arrowrefresh-1-r</li>\n<li>arrowrefresh-1-b</li>\n<li>arrow-4</li>\n<li>arrow-4-diag</li>\n<li>extlink</li>\n<li>newwin</li>\n<li>refresh</li>\n<li>shuffle</li>\n<li>transfer-r-l</li>\n<li>transferthick-r-l</li>\n<li>folder-collapsed</li>\n<li>folder-open</li>\n<li>document</li>\n<li>document-b</li>\n<li>note</li>\n<li>mail-closed</li>\n<li>mail-open</li>\n<li>suitcase</li>\n<li>comment</li>\n<li>person</li>\n<li>print</li>\n<li>trash</li>\n<li>locked</li>\n<li>unlocked</li>\n<li>bookmark</li>\n<li>tag</li>\n<li>home</li>\n<li>flag</li>\n<li>calendar</li>\n<li>cart</li>\n<li>pencil</li>\n<li>clock</li>\n<li>disk</li>\n<li>calculator</li>\n<li>zoomin</li>\n<li>zoomout</li>\n<li>search</li>\n<li>wrench</li>\n<li>gear</li>\n<li>heart</li>\n<li>star</li>\n<li>link</li>\n<li>cancel</li>\n<li>plus</li>\n<li>plusthick</li>\n<li>minus</li>\n<li>minusthick</li>\n<li>close</li>\n<li>closethick</li>\n<li>key</li>\n<li>lightbulb</li>\n<li>scissors</li>\n<li>clipboard</li>\n<li>copy</li>\n<li>contact</li>\n<li>image</li>\n<li>video</li>\n<li>script</li>\n<li>alert</li>\n<li>info</li>\n<li>notice</li>\n<li>help</li>\n<li>check</li>\n<li>bullet</li>\n<li>radio-off</li>\n<li>radio-on</li>\n<li>pin-l</li>\n<li>pin-b</li>\n<li>play</li>\n<li>pause</li>\n<li>seek-next</li>\n<li>seek-prev</li>\n<li>seek-end</li>\n<li>seek-first</li>\n<li>stop</li>\n<li>eject</li>\n<li>volume-off</li>\n<li>volume-on</li>\n<li>power</li>\n<li>signal-diag</li>\n<li>signal</li>\n<li>battery-0</li>\n<li>battery-1</li>\n<li>battery-2</li>\n<li>battery-3</li>\n<li>circle-plus</li>\n<li>circle-minus</li>\n<li>circle-close</li>\n<li>circle-triangle-r</li>\n<li>circle-triangle-b</li>\n<li>circle-triangle-l</li>\n<li>circle-triangle-t</li>\n<li>circle-arrow-r</li>\n<li>circle-arrow-b</li>\n<li>circle-arrow-l</li>\n<li>circle-arrow-t</li>\n<li>circle-zoomin</li>\n<li>circle-zoomout</li>\n<li>circle-check</li>\n<li>circlesmall-plus</li>\n<li>circlesmall-minus</li>\n<li>circlesmall-close</li>\n<li>squaresmall-plus</li>\n<li>squaresmall-minus</li>\n<li>squaresmall-close</li>\n<li>grip-dotted-vertical</li>\n<li>grip-dotted-horizontal</li>\n<li>grip-solid-vertical</li>\n<li>grip-solid-horizontal</li>\n<li>gripsmall-diagonal-br</li>\n<li>grip-diagonal-br</li>\n<li>loading</li>\n</ul>\nCheck the list of <a href=\"ToolItem.html#configattributes\">Configuration Attributes</a> available for\nToolItem."}, "LiveSearch": {"name": "LiveSearch", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-live-search/main.png\"/></p>\nA base class for LiveSearch, providing:\n<ul>\n<li>Real-time filtering for DOM elements based on a input query</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.LiveSearch({\ninput: '#input',\nnodes: '#search .entry'\n});\n</code></pre>\nCheck the list of <a href=\"LiveSearch.html#configattributes\">Configuration Attributes</a> available for\nLiveSearch."}], "namespace": "", "module": "aui-live-search", "events": {"matchRegexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "matchRegexChange", "description": "Fires when the value for the configuration attribute 'matchRegex' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideChange", "description": "Fires when the value for the configuration attribute 'hide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "indexChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "indexChange", "description": "Fires when the value for the configuration attribute 'index' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delayChange", "description": "Fires when the value for the configuration attribute 'delay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputChange", "description": "Fires when the value for the configuration attribute 'input' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showChange", "description": "Fires when the value for the configuration attribute 'show' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dataChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dataChange", "description": "Fires when the value for the configuration attribute 'data' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodesChange", "description": "Fires when the value for the configuration attribute 'nodes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"index": {"default": "[]", "type": "Array", "description": "Index for the nodes content.", "guessedname": "index", "guessedtype": "property"}, "hide": {"default": "function(node) { return node.hide(); }", "type": "function", "description": "Function to be executed to hide the node when the data of that node\nnot matches with the filter.", "guessedname": "hide", "guessedtype": "property"}, "show": {"default": "function(node) { return node.show(); }", "type": "function", "description": "Function to be executed to show the node when the data of that node\nmatches with the filter.", "guessedname": "show", "guessedtype": "property"}, "delay": {"default": "250", "type": "Number", "description": "Number of milliseconds the filter will be applied to the node list\nafter the user stop typing.", "guessedname": "delay", "guessedtype": "property"}, "matchRegex": {"default": "(.)*", "type": "RegExp", "description": "The input <code>value</code> need to matches with this RegExp to be\naccept as a filter (i.e., in order to accept only digits you\ncould use /\\d+/g).", "guessedname": "matchRegex", "guessedtype": "property"}, "input": {"type": "Node | String", "description": "The <code>value</code> of this input node is used to filter the\nresults.", "guessedname": "input", "guessedtype": "property"}, "nodes": {"type": "Node | NodeList", "description": "Nodes to be indexed for the filtering.", "guessedname": "nodes", "guessedtype": "property"}, "data": {"default": "function(node) { return node.html(); }", "type": "function", "description": "<p>Function to extract the content from the node for the indexing. The\ndefault uses the <code>node.html()</code>. In case if you need to\nindex the id of the nodes, here goes one example:</p>\nExample indexing the id of the node instead of the HTML:\n<pre><code>function(node) {\nreturn node.attr('id');\n}\n</code></pre>", "guessedname": "data", "guessedtype": "property"}}, "methods": {"_setNodes": {"return": {"type": "Node | NodeList | String", "description": ""}, "description": "Setter for <a href=\"LiveSearch.html#config_nodes\">nodes</a>.", "protected": "", "params": [{"type": "Node | NodeList | String", "name": "v", "description": ""}], "guessedname": "_setNodes", "guessedtype": "function"}, "search": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " search event facade"}], "description": "Fires the search event.", "guessedname": "search", "guessedtype": "function"}, "_inputKeyUp": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " keyup event facade"}], "description": "Fires the keyup event on\n<a href=\"LiveSearch.html#config_input\">input</a>.", "guessedname": "_inputKeyUp", "guessedtype": "function"}, "refreshIndex": {"description": "Refreshes the <a href=\"LiveSearch.html#config_index\">index</a>.", "guessedname": "refreshIndex", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during LiveSearch instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "filter": {"return": {"type": "Array", "description": "Matched results."}, "params": [{"type": "String", "name": "query", "description": " Query to filter results"}], "description": "Filter the <a href=\"LiveSearch.html#config_nodes\">nodes</a> based on\nthe input value.", "guessedname": "filter", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the LiveSearch UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the LiveSearch class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "_normalizeQuery": {"return": {"type": "String", "description": ""}, "description": "Normalize the input query. With <code>trim</code>,\n<code>matchRegex</code> and replace '*' to '' (on a regex empty match\nwith everything like *).", "protected": "", "params": [{"type": "String", "name": "query", "description": " Query to filter results"}], "guessedname": "_normalizeQuery", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-live-search.js", "shortname": "LiveSearch", "properties": {"query": {"protected": "", "type": "String", "description": "Stores the query value.", "guessedname": "query", "guessedtype": "property"}, "LiveSearch.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "LiveSearch.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the LiveSearch.", "guessedname": "ATTRS", "guessedtype": "property"}, "timer": {"protected": "", "type": "Object", "description": "Handles the <a href=\"YUI.html#method_later\">later</a> Object.", "guessedname": "timer", "guessedtype": "property"}, "normalizedQuery": {"protected": "", "type": "String", "description": "Stores the normalized query value given from\n<a href=\"LiveSearch.html#config__normalizeQuery\">_normalizeQuery</a>.", "guessedname": "normalizedQuery", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-live-search/main.png\"/></p>\nA base class for LiveSearch, providing:\n<ul>\n<li>Real-time filtering for DOM elements based on a input query</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.LiveSearch({\ninput: '#input',\nnodes: '#search .entry'\n});\n</code></pre>\nCheck the list of <a href=\"LiveSearch.html#configattributes\">Configuration Attributes</a> available for\nLiveSearch."}, "Resize": {"name": "Resize", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-resize/main.png\"/></p>\nA base class for Resize, providing:\n<ul>\n<li>Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Applies drag handles to an element to make it resizable</li>\n<li>Here is the list of valid resize handles:\n<code>[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]</code>. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.</li>\n<li>The drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Resize({\nnode: '#resize1',\nproxy: true,\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\n</code></pre>\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}], "namespace": "", "module": "aui-resize", "events": {"proxyChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyChange", "description": "Fires when the value for the configuration attribute 'proxy' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapTypesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapTypesChange", "description": "Fires when the value for the configuration attribute 'wrapTypes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickYChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickYChange", "description": "Fires when the value for the configuration attribute 'tickY' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizingChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizingChange", "description": "Fires when the value for the configuration attribute 'resizing' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "handlesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "handlesChange", "description": "Fires when the value for the configuration attribute 'handles' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "constrain2regionChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2regionChange", "description": "Fires when the value for the configuration attribute 'constrain2region' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:start": {"preventable": "_defResizeStartFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize start event."}], "description": "Handles the resize start event. Fired when a handle starts to be\ndragged.", "type": "{Event.Custom}"}, "constrain2viewChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2viewChange", "description": "Fires when the value for the configuration attribute 'constrain2view' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tickXChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tickXChange", "description": "Fires when the value for the configuration attribute 'tickX' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:mouseUp": {"preventable": "_defMouseUpFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize mouseUp event."}], "description": "Handles the resize mouseUp event. Fired when a mouseUp event happens on a\nhandle.", "type": "{Event.Custom}"}, "constrain2nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "constrain2nodeChange", "description": "Fires when the value for the configuration attribute 'constrain2node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "autoHideChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "autoHideChange", "description": "Fires when the value for the configuration attribute 'autoHide' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxHeightChange", "description": "Fires when the value for the configuration attribute 'maxHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:resize": {"preventable": "_defResizeFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize event."}], "description": "Handles the resize event. Fired on each pixel when the handle is\nbeing dragged.", "type": "{Event.Custom}"}, "minWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minWidthChange", "description": "Fires when the value for the configuration attribute 'minWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resize:end": {"preventable": "_defResizeEndFn", "bubbles": "Resize", "params": [{"type": "Event.Facade", "name": "event", "description": " The resize end event."}], "description": "Handles the resize end event. Fired when a handle stop to be\ndragged.", "type": "{Event.Custom}"}, "proxyElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "proxyElChange", "description": "Fires when the value for the configuration attribute 'proxyEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nodeChange", "description": "Fires when the value for the configuration attribute 'node' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleChange", "description": "Fires when the value for the configuration attribute 'activeHandle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minHeightChange", "description": "Fires when the value for the configuration attribute 'minHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "preserveRatioChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "preserveRatioChange", "description": "Fires when the value for the configuration attribute 'preserveRatio' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapperChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapperChange", "description": "Fires when the value for the configuration attribute 'wrapper' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "activeHandleElChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeHandleElChange", "description": "Fires when the value for the configuration attribute 'activeHandleEl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxWidthChange", "description": "Fires when the value for the configuration attribute 'maxWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"activeHandle": {"description": "Stores the active handle during the resize.", "default": "null", "private": "", "guessedname": "activeHandle", "guessedtype": "property", "type": "String"}, "activeHandleEl": {"description": "Stores the active handle element during the resize.", "default": "null", "private": "", "guessedname": "activeHandleEl", "guessedtype": "property", "type": "Node"}, "constrain2region": {"default": "null", "type": "Object", "description": "Constrain the resize to a particular region. An Object Literal\ncontaining a valid region (top, right, bottom, left) of page\npositions to constrain the drag node to.", "guessedname": "constrain2region", "guessedtype": "property"}, "node": {"type": "Node", "description": "The selector or element to resize. Required.", "guessedname": "node", "guessedtype": "property"}, "wrapTypes": {"description": "Elements that requires a wrapper by default. Normally are elements\nwhich cannot have children elements.", "default": "/canvas|textarea|input|select|button|img/i", "readonly": "", "guessedname": "wrapTypes", "guessedtype": "property", "type": "Regex"}, "maxWidth": {"default": "Infinity", "type": "Number", "description": "The maximum width of the element", "guessedname": "maxWidth", "guessedtype": "property"}, "tickY": {"default": "false", "type": "Number | false", "description": "The number of y ticks to span the resize to.", "guessedname": "tickY", "guessedtype": "property"}, "tickX": {"default": "false", "type": "Number | false", "description": "The number of x ticks to span the resize to.", "guessedname": "tickX", "guessedtype": "property"}, "minHeight": {"default": "15", "type": "Number", "description": "The minimum height of the element", "guessedname": "minHeight", "guessedtype": "property"}, "constrain2node": {"default": "null", "type": "String | Node", "description": "Constrain the resize to a particular node. Will attempt to\nconstrain the drag node to the boundaries of this node.", "guessedname": "constrain2node", "guessedtype": "property"}, "maxHeight": {"default": "Infinity", "type": "Number", "description": "The maximum height of the element", "guessedname": "maxHeight", "guessedtype": "property"}, "minWidth": {"default": "15", "type": "Number", "description": "The minimum width of the element", "guessedname": "minWidth", "guessedtype": "property"}, "handles": {"default": "all", "type": "Array | String", "description": "The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl',\n'br', 'tl', 'tr'. Can use a shortcut of All.", "guessedname": "handles", "guessedtype": "property"}, "preserveRatio": {"default": "false", "type": "boolean", "description": "Maintain the element's ratio when resizing.", "guessedname": "preserveRatio", "guessedtype": "property"}, "autoHide": {"default": "false", "type": "boolean", "description": "False to ensure that the resize handles are always visible, true to\ndisplay them only when the user mouses over the resizable borders.", "guessedname": "autoHide", "guessedtype": "property"}, "resizing": {"default": "false", "type": "boolean", "description": "True when the element is being Resized.", "guessedname": "resizing", "guessedtype": "property"}, "wrap": {"default": "false", "type": "boolean", "description": "True to wrap an element with a div if needed (required for textareas\nand images, defaults to false) in favor of the handles config option.\nThe wrapper element type (default div) could be over-riden passing the\n<code>wrapper</code> attribute.", "guessedname": "wrap", "guessedtype": "property"}, "proxyEl": {"default": "Generated using an internal HTML markup", "type": "String | Node", "description": "The Resize proxy element.", "guessedname": "proxyEl", "guessedtype": "property"}, "constrain2view": {"type": "Object", "description": "Will attempt to constrain the drag node to the boundaries of the\nviewport region.", "guessedname": "constrain2view", "guessedtype": "property"}, "wrapper": {"description": "Element to wrap the <code>wrapTypes</code>. This element will house\nthe handles elements.", "writeonce": "", "default": "div", "guessedname": "wrapper", "guessedtype": "property", "type": "String | Node"}, "proxy": {"default": "false", "type": "boolean", "description": "Resize a proxy element instead of the real element.", "guessedname": "proxy", "guessedtype": "property"}}, "methods": {"_updateInfo": {"private": "", "description": "Update <a href=\"Resize.html#property_info\">info</a> values (top, left, offsetTop, offsetTop, height, width, nodeX, nodeY, lastXY).", "guessedname": "_updateInfo", "guessedtype": "function"}, "_checkRatio": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\ncalculating the correct ratio for the other values.", "guessedname": "_checkRatio", "guessedtype": "function"}, "_setupHandleDD": {"guessedname": "_setupHandleDD", "params": [{"type": "String", "name": "handle", "description": " Handle name."}, {"type": "Node", "name": "node", "description": " Node reference which the DragDrop will be created."}], "description": "Initialize the DragDrop on the handle.", "private": "", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Resize instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "_syncProxyUI": {"protected": "", "description": "Sync the proxy UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncProxyUI", "guessedtype": "function"}, "renderer": {"protected": "", "description": "Creates DOM (or manipulates DOM for progressive enhancement)\nThis method is invoked by initializer(). It's chained automatically for\nsubclasses if required.", "guessedname": "renderer", "guessedtype": "function"}, "_handleResizeEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize event facade"}], "description": "Fires the resize:resize event.", "guessedname": "_handleResizeEvent", "guessedtype": "function"}, "_syncUI": {"protected": "", "description": "Sync the Resize UI with internal values from\n<a href=\"Resize.html#property_info\">info</a>.", "guessedname": "_syncUI", "guessedtype": "function"}, "_defResizeFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:resize handler", "guessedname": "_defResizeFn", "guessedtype": "function"}, "_getInfo": {"guessedname": "_getInfo", "params": [{"type": "Node", "name": "node", "description": ""}, {"type": "EventFacade", "name": "event", "description": ""}], "description": "<p>Generates metadata to the <a href=\"Resize.html#property_info\">info</a>\nand <a href=\"Resize.html#property_originalInfo\">originalInfo</a></p>\n<pre><code>left, top, offsetLeft, offsetTop, height, width, lastXY, nodeX, nodeY</code></pre>", "private": "", "guessedtype": "function"}, "_recalculateXY": {"private": "", "description": "Update nodeX and nodeY information on\n<a href=\"Resize.html#property_info\">info</a> based on the new top and left.", "guessedname": "_recalculateXY", "guessedtype": "function"}, "_onHandleMouseOut": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseout event handler for the handles.", "guessedname": "_onHandleMouseOut", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Descructor lifecycle implementation for the Resize class. Purges events attached\nto the node (and all child nodes) and removes the Resize handles.", "guessedname": "destructor", "guessedtype": "function"}, "_buildHandle": {"protected": "", "params": [{"type": "String", "name": "handle", "description": " Handle name ('t', 'tr', 'b', ...)."}], "description": "Creates the handle element based on the handle name and initialize the\nDragDrop on it.", "guessedname": "_buildHandle", "guessedtype": "function"}, "_renderProxy": {"protected": "", "description": "Render the <a href=\"Resize.html#config_proxyEl\">proxyEl</a> element and\nmake it sibling of the <a href=\"Resize.html#config_node\">node</a>.", "guessedname": "_renderProxy", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Resize UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_checkHeight": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxHeight and minHeight.", "guessedname": "_checkHeight", "guessedtype": "function"}, "_createEvents": {"private": "", "description": "Create the custom events used on the Resize.", "guessedname": "_createEvents", "guessedtype": "function"}, "_resize": {"protected": "", "description": "Basic resize calculations.", "guessedname": "_resize", "guessedtype": "function"}, "_onHandleMouseOver": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseover event handler for the handles.", "guessedname": "_onHandleMouseOver", "guessedtype": "function"}, "_handleMouseUpEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:mouseUp event facade"}], "description": "Fires the resize:mouseUp event.", "guessedname": "_handleMouseUpEvent", "guessedtype": "function"}, "_defResizeStartFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:start handler", "guessedname": "_defResizeStartFn", "guessedtype": "function"}, "_renderHandles": {"protected": "", "description": "Responsible for loop each handle element and append to the wrapper.", "guessedname": "_renderHandles", "guessedtype": "function"}, "_defMouseUpFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:mouseUp handler", "guessedname": "_defMouseUpFn", "guessedtype": "function"}, "_onWrapperMouseEnter": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseenter event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_onWrapperMouseEnter", "guessedtype": "function"}, "_setHideHandlesUI": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to hide the handles, false to show."}], "description": "Set the visibility of the handles.", "guessedname": "_setHideHandlesUI", "guessedtype": "function"}, "eachHandle": {"params": [{"type": "function", "name": "fn", "description": " Callback function to be executed for each handle."}], "description": "<p>Loop through each handle which is being used and executes a callback.</p>\n<p>Example:</p>\n<pre><code>instance.eachHandle(\nfunction(handleName, index) { ... }\n);</code></pre>", "guessedname": "eachHandle", "guessedtype": "function"}, "_bindHandle": {"private": "", "description": "Bind the events related to the handles (_onHandleMouseOver, _onHandleMouseOut).", "guessedname": "_bindHandle", "guessedtype": "function"}, "_handleResizeEndEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:end event facade"}], "description": "Fires the resize:end event.", "guessedname": "_handleResizeEndEvent", "guessedtype": "function"}, "_checkWidth": {"protected": "", "description": "Update the current values on <a href=\"Resize.html#property_info\">info</a>\nto respect the maxWidth and minWidth.", "guessedname": "_checkWidth", "guessedtype": "function"}, "_onWrapperMouseLeave": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mouseleave event handler for the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_onWrapperMouseLeave", "guessedtype": "function"}, "_defResizeEndFn": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " The Event object"}], "description": "Default resize:end handler", "guessedname": "_defResizeEndFn", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Resize UI.", "guessedname": "syncUI", "guessedtype": "function"}, "_handleResizeStartEvent": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:start event facade"}], "description": "Fires the resize:start event.", "guessedname": "_handleResizeStartEvent", "guessedtype": "function"}, "_afterResize": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " resize:resize custom event"}], "description": "Fires after resize:resize event.", "guessedname": "_afterResize", "guessedtype": "function"}, "_setActiveHandlesUI": {"protected": "", "params": [{"type": "boolean", "name": "val", "description": " True to activate the handles, false to deactivate."}], "description": "Set the active state of the handles.", "guessedname": "_setActiveHandlesUI", "guessedtype": "function"}, "_copyStyles": {"protected": "", "params": [{"type": "Node", "name": "node", "description": " Node from."}, {"type": "Node", "name": "wrapper", "description": " Node to."}], "description": "Copy relevant styles of the <a href=\"Resize.html#config_node\">node</a>\nto the <a href=\"Resize.html#config_wrapper\">wrapper</a>.", "guessedname": "_copyStyles", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Resize. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_bindDD": {"private": "", "description": "Bind the handles DragDrop events to the Resize instance.", "guessedname": "_bindDD", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-resize.js", "shortname": "Resize", "properties": {"Resize.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "info": {"protected": "", "type": "Object", "description": "Stores the current values for the height, width, top and left. You are\nable to manipulate these values on resize in order to change the resize\nbehavior.", "guessedname": "info", "guessedtype": "property"}, "originalInfo": {"protected": "", "type": "Object", "description": "Stores the original values for the height, width, top and left, stored\non resize start.", "guessedname": "originalInfo", "guessedtype": "property"}, "Resize.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Resize.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-resize/main.png\"/></p>\nA base class for Resize, providing:\n<ul>\n<li>Basic Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Applies drag handles to an element to make it resizable</li>\n<li>Here is the list of valid resize handles:\n<code>[ 't', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl' ]</code>. You can\nread this list as top, top-right, right, bottom-right, bottom,\nbottom-left, left, top-left.</li>\n<li>The drag handles are inserted into the element and positioned\nabsolute. Some elements, such as a textarea or image, don't support\nchildren. To overcome that, set wrap:true in your config and the\nelement willbe wrapped for you automatically.</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Resize({\nnode: '#resize1',\nproxy: true,\npreserveRatio: true,\nwrap: true,\nmaxHeight: 170,\nmaxWidth: 400,\nhandles: 't, tr, r, br, b, bl, l, tl'\n});\n</code></pre>\nCheck the list of <a href=\"Resize.html#configattributes\">Configuration Attributes</a> available for\nResize."}, "DataType.Boolean": {"name": "DataType.Boolean", "namespace": "", "module": "aui-datatype", "guessedname": "DB", "methods": {"parse": {"return": {"type": "boolean", "description": "Parsed value"}, "params": [{"type": "*", "name": "data", "description": " falsey or non-falsey values (i.e., falsey values: null, false, undefined, NaN; non-falsey values: 1, true, 'abc')."}], "description": "Parses any <code>falsey</code> value to <code>false</code> and\n<code>non-falsey</code> to <code>true</code>.", "guessedname": "parse", "guessedtype": "function"}}, "static": "", "file": "aui-datatype.js", "guessedtype": "property", "shortname": "DataType.Boolean", "description": "DataType.Boolean provides a set of utility to parse <code>falsey</code>\nvalue to <code>false</code> and <code>non-falsey</code> to\n<code>true</code>."}, "ToolSet": {"name": "ToolSet", "configs": {"tools": {"default": "[]", "type": "Array", "description": "Array of <a href=\"ToolItem.html\">ToolItem</a> elements to render when\nthe ToolSet renders.", "guessedname": "tools", "guessedtype": "property"}, "defaultState": {"type": "boolean", "description": "Receives a default interaction state.", "guessedname": "defaultState", "guessedtype": "property"}, "activeState": {"type": "boolean", "description": "Receives an interaction state of active when the user clicks on it.", "guessedname": "activeState", "guessedtype": "property"}, "hoverState": {"type": "boolean", "description": "Receives an interaction state of hover during the\n<code>mouseover</code> event.", "guessedname": "hoverState", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-tool-set/main.png\"/></p>\nA base class for ToolSet, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Managed collection for <a href=\"ToolItems.html\">ToolItems</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ToolSet({\ntools: [\n{\nid: 'close',\nicon: 'close'\n},\n{\nid: 'expand',\nicon: 'plus'\n}\n]\n}).render();\n</code></pre>\nCheck the list of <a href=\"ToolSet.html#configattributes\">Configuration Attributes</a> available for\nToolSet."}], "namespace": "", "module": "aui-tool", "events": {"activeStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "activeStateChange", "description": "Fires when the value for the configuration attribute 'activeState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hoverStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hoverStateChange", "description": "Fires when the value for the configuration attribute 'hoverState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "defaultStateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "defaultStateChange", "description": "Fires when the value for the configuration attribute 'defaultState' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "toolsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "toolsChange", "description": "Fires when the value for the configuration attribute 'tools' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ToolSet", "methods": {"syncUI": {"protected": "", "description": "Sync the ToolSet UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_afterRemoveToolItem": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after remove a <a href=\"ToolItem.html\">ToolItem</a>.", "guessedname": "_afterRemoveToolItem", "guessedtype": "function"}, "_afterAddToolItem": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after add a <a href=\"ToolItem.html\">ToolItem</a>.", "guessedname": "_afterAddToolItem", "guessedtype": "function"}, "remove": {"params": [{"type": "Object", "name": "item", "description": ""}], "description": "Remove a <a href=\"ToolItem.html\">ToolItem</a> from this ToolSet.", "guessedname": "remove", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during ToolSet instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "item": {"params": [{"type": "String", "name": "key", "description": ""}], "description": "Get a <a href=\"ToolItem.html\">ToolItem</a> by its <code>key</code>.", "guessedname": "item", "guessedtype": "function"}, "add": {"params": [{"type": "Object", "name": "toolItem", "description": ""}], "description": "Add a <a href=\"ToolItem.html\">ToolItem</a> to this ToolSet.", "guessedname": "add", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the ToolSet. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}, "_createToolItem": {"return": {"type": "ToolItem", "description": ""}, "description": "Create a new <a href=\"ToolItem.html\">ToolItem</a>.", "protected": "", "params": [{"type": "Object", "name": "toolItem", "description": ""}], "guessedname": "_createToolItem", "guessedtype": "function"}}, "extends": "Component", "superclass": "Component", "file": "aui-tool-set.js", "guessedtype": "function", "shortname": "ToolSet", "properties": {"ToolSet.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}, "ToolSet.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the ToolSet.", "guessedname": "ATTRS", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-tool-set/main.png\"/></p>\nA base class for ToolSet, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Managed collection for <a href=\"ToolItems.html\">ToolItems</a></li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.ToolSet({\ntools: [\n{\nid: 'close',\nicon: 'close'\n},\n{\nid: 'expand',\nicon: 'plus'\n}\n]\n}).render();\n</code></pre>\nCheck the list of <a href=\"ToolSet.html#configattributes\">Configuration Attributes</a> available for\nToolSet."}, "Calendar": {"name": "Calendar", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-calendar/main.png\"/></p>\nA base class for Calendar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Setting Configuration Options</li>\n<li>Obtaining Selected Dates</li>\n<li>Creating International Calendars</li>\n<li>Customizing the Calendar</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Calendar({\ntrigger: '#input1',\ndates: ['09/14/2009', '09/15/2009'],\ndateFormat: '%d/%m/%y %A',\nsetValue: true,\nselectMultipleDates: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"Calendar.html#configattributes\">Configuration Attributes</a> available for\nCalendar."}], "namespace": "", "module": "aui-calendar", "events": {"dateFormatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "dateFormatChange", "description": "Fires when the value for the configuration attribute 'dateFormat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentDayChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentDayChange", "description": "Fires when the value for the configuration attribute 'currentDay' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstDayOfWeekChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstDayOfWeekChange", "description": "Fires when the value for the configuration attribute 'firstDayOfWeek' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "minDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "minDateChange", "description": "Fires when the value for the configuration attribute 'minDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "selectMultipleDatesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "selectMultipleDatesChange", "description": "Fires when the value for the configuration attribute 'selectMultipleDates' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "datesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "datesChange", "description": "Fires when the value for the configuration attribute 'dates' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentYearChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentYearChange", "description": "Fires when the value for the configuration attribute 'currentYear' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxDateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxDateChange", "description": "Fires when the value for the configuration attribute 'maxDate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentMonthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentMonthChange", "description": "Fires when the value for the configuration attribute 'currentMonth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "setValueChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "setValueChange", "description": "Fires when the value for the configuration attribute 'setValue' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"dates": {"default": "Current date", "type": "Array", "description": "Dates which the calendar will show as selected by default.", "guessedname": "dates", "guessedtype": "property"}, "setValue": {"default": "true", "type": "boolean", "description": "If true set the selected date with the correct\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> to the\nvalue of the input field which is hosting the Calendar.", "guessedname": "setValue", "guessedtype": "property"}, "dateFormat": {"default": "%m/%d/%Y", "type": "String", "description": "The default date format string which can be overriden for\nlocalization support. The format must be valid according to\n<a href=\"DataType.Date.html\">A.DataType.Date.format</a>.", "guessedname": "dateFormat", "guessedtype": "property"}, "selectMultipleDates": {"default": "false", "type": "boolean", "description": "Wether accepts to select multiple dates.", "guessedname": "selectMultipleDates", "guessedtype": "property"}, "firstDayOfWeek": {"default": "0", "type": "Number", "description": "First day of the week: Sunday is 0, Monday is 1.", "guessedname": "firstDayOfWeek", "guessedtype": "property"}, "currentYear": {"default": "Current year", "type": "Number", "description": "Current year number.", "guessedname": "currentYear", "guessedtype": "property"}, "currentDay": {"default": "Current day", "type": "Number", "description": "Current day number.", "guessedname": "currentDay", "guessedtype": "property"}, "maxDate": {"default": "null", "type": "String | Date", "description": "Maximum allowable date. Accepts String in the same format of\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> or a Date\nobject.", "guessedname": "maxDate", "guessedtype": "property"}, "currentMonth": {"default": "Current month", "type": "Number", "description": "Current month number.", "guessedname": "currentMonth", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "If true is able to do stacking with another overlays.", "guessedname": "stack", "guessedtype": "property"}, "minDate": {"default": "null", "type": "Date | String", "description": "Minimum allowable date. Accepts String in the same format of\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a> or a Date\nobject.", "guessedname": "minDate", "guessedtype": "property"}}, "methods": {"_syncHeader": {"protected": "", "description": "Sync Calendar header UI.", "guessedname": "_syncHeader", "guessedtype": "function"}, "_getDayNameShort": {"return": {"type": "String", "description": ""}, "description": "Get a short day name of the passed weekDay from the locale map.", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayNameShort", "guessedtype": "function"}, "_getDayNameMin": {"return": {"type": "String", "description": ""}, "description": "Get a very short day name of the passed weekDay from the locale map.", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayNameMin", "guessedtype": "function"}, "_syncDays": {"protected": "", "description": "Sync Calendar days UI.", "guessedname": "_syncDays", "guessedtype": "function"}, "_getDayName": {"return": {"type": "String", "description": ""}, "description": "Get the day name of the passed weekDay from the locale map.", "protected": "", "params": [{"type": "Number", "name": "weekDay", "description": ""}], "guessedname": "_getDayName", "guessedtype": "function"}, "_getLocaleMap": {"protected": "", "return": {"type": "Object", "description": ""}, "description": "Get the locale map containing the respective values for the\n<a href=\"Widget.html#config_locale\">locale</a> used.\n<pre><code>A.DataType.Date.Locale['pt-br'] = A.merge(\nA.DataType.Date.Locale['en'], {\na: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Fri', 'Sat'],\nA: ['Domingo','Segunda-feira','Ter&ccedil;a-feira','Quarta-feira','Quinta-feira','Sexta-feira','Sabado'],\nb: ['Jan','Fev','Mar','Abr','Mai','Jun', 'Jul','Ago','Set','Out','Nov','Dez'],\nB: ['Janeiro','Fevereiro','Mar&ccedil;o','Abril','Maio','Junho', 'Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'],\nc: '%a %d %b %Y %T %Z',\np: ['AM', 'PM'],\nP: ['am', 'pm'],\nr: '%I:%M:%S %p',\nx: '%d/%m/%y',\nX: '%T'\n}\n);</code></pre>", "guessedname": "_getLocaleMap", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during Calendar instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "getDaysInMonth": {"return": {"type": "Number", "description": ""}, "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "description": "Get the number of days in the passed year and month.", "guessedname": "getDaysInMonth", "guessedtype": "function"}, "formatDate": {"return": {"type": "String", "description": ""}, "params": [{"type": "Date", "name": "date", "description": ""}, {"type": "String", "name": "mask", "description": " See <a href=\"Calendar.html#config_dateFormat\">dateFormat</a>."}], "description": "Format a date with the passed mask. Used on\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a>.", "guessedname": "formatDate", "guessedtype": "function"}, "alreadySelected": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "Date", "name": "date", "description": " Date to be checked."}], "description": "Check if a date is already selected.", "guessedname": "alreadySelected", "guessedtype": "function"}, "getCurrentDate": {"return": {"type": "Date", "description": ""}, "description": "Get current date.", "guessedname": "getCurrentDate", "guessedtype": "function"}, "_selectPrevMonth": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Navigate to the previous month. Fired from the previous icon on the\nCalendar header.", "guessedname": "_selectPrevMonth", "guessedtype": "function"}, "_renderMonthDays": {"protected": "", "description": "Render Calendar DOM month days elements.", "guessedname": "_renderMonthDays", "guessedtype": "function"}, "parseDate": {"return": {"type": "Date", "description": ""}, "params": [{"type": "String", "name": "dateString", "description": ""}], "description": "Parse a string to a Date object.", "guessedname": "parseDate", "guessedtype": "function"}, "_syncSelectedDays": {"protected": "", "description": "Sync Calendar selected days UI.", "guessedname": "_syncSelectedDays", "guessedtype": "function"}, "_restrictDate": {"protected": "", "params": [{"type": "Date", "name": "currentDate", "description": " Current date showed on the Calendar."}, {"type": "Node", "name": "monthDayNode", "description": " Day node to be disabled."}], "description": "Util method to disable day nodes between\n<a href=\"Calendar.html#config_minDate\">minDate</a> and\n<a href=\"Calendar.html#config_maxDate\">maxDate</a>.", "guessedname": "_restrictDate", "guessedtype": "function"}, "getFormattedSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get the selected dates formatted by the\n<a href=\"Calendar.html#config_dateFormat\">dateFormat</a>.", "guessedname": "getFormattedSelectedDates", "guessedtype": "function"}, "_getMonthNameShort": {"return": {"type": "String", "description": ""}, "description": "Get a short month name of the passed month from the locale map.", "protected": "", "params": [{"type": "Number", "name": "month", "description": ""}], "guessedname": "_getMonthNameShort", "guessedtype": "function"}, "getFirstDate": {"return": {"type": "Date", "description": ""}, "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "description": "Get the Date for the first day of the passed year and month.", "guessedname": "getFirstDate", "guessedtype": "function"}, "getLastDate": {"return": {"type": "Date", "description": ""}, "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "description": "Get the Date for the last day of the passed year and month.", "guessedname": "getLastDate", "guessedtype": "function"}, "_normalizeYearMonth": {"return": {"type": "Object", "description": ""}, "description": "Returns an Object with the current day, month and year.", "protected": "", "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}, {"type": "Number", "name": "day", "description": ""}], "guessedname": "_normalizeYearMonth", "guessedtype": "function"}, "_compareDates": {"return": {"type": "boolean", "description": ""}, "description": "Compare two dates.", "protected": "", "params": [{"type": "Date", "name": "d1", "description": ""}, {"type": "Date", "name": "d2", "description": ""}], "guessedname": "_compareDates", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the Calendar UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "_renderCalendar": {"protected": "", "description": "Render Calendar DOM elements.", "guessedname": "_renderCalendar", "guessedtype": "function"}, "_renderBlankDays": {"protected": "", "description": "Render Calendar DOM blank days elements. Blank days are used to align\nwith the week day column.", "guessedname": "_renderBlankDays", "guessedtype": "function"}, "_selectNextMonth": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Navigate to the next month. Fired from the next icon on the Calendar\nheader.", "guessedname": "_selectNextMonth", "guessedtype": "function"}, "_bindDelegateMonthDays": {"private": "", "description": "Delegate DOM events to the UI.", "guessedname": "_bindDelegateMonthDays", "guessedtype": "function"}, "_onMouseLeaveDays": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires on mouseleave days elements.", "guessedname": "_onMouseLeaveDays", "guessedtype": "function"}, "_eachSelectedDate": {"protected": "", "params": [{"type": "function", "name": "fn", "description": " Callback to be executed for each date."}, {"type": "Dates", "name": "dates", "description": " Optional dates Array to loop through. If not passed it will use\nthe <a href=\"Calendar.html#config_dates\">dates</a>."}], "description": "Loop each date from <a href=\"Calendar.html#config_dates\">dates</a> and\nexecutes a callback.", "guessedname": "_eachSelectedDate", "guessedtype": "function"}, "_selectDate": {"protected": "", "description": "Select the current date returned by\n<a href=\"Calendar.html#method_getCurrentDate\">getCurrentDate</a>.", "guessedname": "_selectDate", "guessedtype": "function"}, "getDetailedSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get an Array with selected dates with detailed information (day, month, year).\n<pre><code>[{\nyear: date.getFullYear(),\nmonth: date.getMonth(),\nday: date.getDate()\n}]</code></pre>", "guessedname": "getDetailedSelectedDates", "guessedtype": "function"}, "_afterSetDates": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": " select custom event"}], "description": "Fires after select event.", "guessedname": "_afterSetDates", "guessedtype": "function"}, "_onMouseEnterDays": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires on mouseenter days elements.", "guessedname": "_onMouseEnterDays", "guessedtype": "function"}, "_bindDOMEvents": {"private": "", "description": "Bind DOM events to the UI.", "guessedname": "_bindDOMEvents", "guessedtype": "function"}, "_onClickDays": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires on click days elements.", "guessedname": "_onClickDays", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_stack\">stack</a> attribute.", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "getSelectedDates": {"return": {"type": "Array", "description": ""}, "description": "Get the selected dates.", "guessedname": "getSelectedDates", "guessedtype": "function"}, "_getMonthName": {"return": {"type": "String", "description": ""}, "description": "Get a month name of the passed month from the locale map.", "protected": "", "params": [{"type": "Number", "name": "month", "description": ""}], "guessedname": "_getMonthName", "guessedtype": "function"}, "_setDates": {"return": {"type": "Array", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_dates\">dates</a> attribute.", "protected": "", "params": [{"type": "Array", "name": "value", "description": ""}], "guessedname": "_setDates", "guessedtype": "function"}, "_syncView": {"protected": "", "description": "Sync Calendar header, days and selected days UI.", "guessedname": "_syncView", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the Calendar UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_setMinMaxDate": {"return": {"type": "Date", "description": ""}, "description": "Setter for the <a href=\"Calendar.html#config_maxDates\">maxDates</a> or\n<a href=\"Calendar.html#config_mainDates\">minDates</a> attributes.", "protected": "", "params": [{"type": "Date", "name": "value", "description": ""}], "guessedname": "_setMinMaxDate", "guessedtype": "function"}, "_renderWeekDays": {"protected": "", "description": "Render Calendar DOM week days elements.", "guessedname": "_renderWeekDays", "guessedtype": "function"}, "getFirstDayOfWeek": {"return": {"type": "Number", "description": ""}, "params": [{"type": "Number", "name": "year", "description": " Year in the format YYYY."}, {"type": "Number", "name": "month", "description": " 0 for January 11 for December."}], "description": "Get the first day of week of the passed year and month.", "guessedname": "getFirstDayOfWeek", "guessedtype": "function"}, "_navigateMonth": {"protected": "", "params": [{"type": "Number", "name": "offset", "description": " Offset of the number of months to navigate.\nCould be a positive or a negative offset."}], "description": "Navigate through months and re-sync the UI.", "guessedname": "_navigateMonth", "guessedtype": "function"}, "_removeDate": {"protected": "", "params": [{"type": "Date", "name": "date", "description": " Date to remove"}], "description": "Remove the passed date from\n<a href=\"Calendar.html#config_dates\">dates</a>.", "guessedname": "_removeDate", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the Calendar. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayContext", "superclass": "OverlayContext", "file": "aui-calendar-base.js", "shortname": "Calendar", "properties": {"weekDaysNode": {"protected": "", "type": "Node", "description": "Container for house the week days elements.", "guessedname": "weekDaysNode", "guessedtype": "property"}, "monthDaysNode": {"protected": "", "type": "Node", "description": "Container for house the month days elements.", "guessedname": "monthDaysNode", "guessedtype": "property"}, "headerContentNode": {"protected": "", "type": "Node", "description": "This node is the WidgetStdMod.HEADER of the Calendar Overlay.\nContainer to the\n<a href=\"Calendar.html#property_headertitleNode\">headertitleNode</a>.", "guessedname": "headerContentNode", "guessedtype": "property"}, "headerTitleNode": {"protected": "", "type": "Node", "description": "Header title Node.", "guessedname": "headerTitleNode", "guessedtype": "property"}, "Calendar.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the Calendar.", "guessedname": "ATTRS", "guessedtype": "property"}, "Calendar.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-calendar/main.png\"/></p>\nA base class for Calendar, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Setting Configuration Options</li>\n<li>Obtaining Selected Dates</li>\n<li>Creating International Calendars</li>\n<li>Customizing the Calendar</li>\n</ul>\nQuick Example:\n<pre><code>var instance = new A.Calendar({\ntrigger: '#input1',\ndates: ['09/14/2009', '09/15/2009'],\ndateFormat: '%d/%m/%y %A',\nsetValue: true,\nselectMultipleDates: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"Calendar.html#configattributes\">Configuration Attributes</a> available for\nCalendar."}, "OverlayManager": {"name": "OverlayManager", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-manager/main.png\"/></p>\nA base class for OverlayManager, providing:\n<ul>\n<li>Grouping overlays</li>\n<li>Show or hide the entire group of registered overlays</li>\n<li>Basic Overlay Stackability (zIndex support)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var groupOverlayManager = new A.OverlayManager();\ngroupOverlayManager.register([overlay1, overlay2, overlay3]);\ngroupOverlayManager.hideAll();\n</code></pre>\nCheck the list of <a href=\"OverlayManager.html#configattributes\">Configuration Attributes</a> available for\nOverlayManager."}], "namespace": "", "module": "aui-overlay", "events": {"zIndexBaseChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "zIndexBaseChange", "description": "Fires when the value for the configuration attribute 'zIndexBase' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"zIndexBase": {"default": "1000", "type": "Number", "description": "The zIndex base to be used on the stacking for all overlays\nregistered on the OverlayManager.", "guessedname": "zIndexBase", "guessedtype": "property"}}, "methods": {"_onFocusedChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires when the <a href=\"Widget.html#config_focused\">focused</a>\nattribute change. Used to invoke\n<a href=\"OverlayManager.html#method_bringToTop\">bringToTop</a>.", "guessedname": "_onFocusedChange", "guessedtype": "function"}, "hideAll": {"description": "Invoke the <a href=\"Overlay.html#method_hide\">hide</a> method from\nall registered Overlays.", "guessedname": "hideAll", "guessedtype": "function"}, "_registered": {"return": {"type": "boolean", "description": ""}, "description": "Check if the overlay is registered.", "protected": "", "params": [{"type": "Overlay", "name": "overlay", "description": " Overlay"}], "guessedname": "_registered", "guessedtype": "function"}, "_onMouseDown": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Mousedown event handler, used to invoke\n<a href=\"OverlayManager.html#method_bringToTop\">bringToTop</a>.", "guessedname": "_onMouseDown", "guessedtype": "function"}, "register": {"return": {"type": "Array", "description": "Registered overlays"}, "params": [{"type": "Overlay", "name": "overlay", "description": " <a href=\"Overlay.html\">Overlay</a> instance to be registered"}], "description": "Register the passed <a href=\"Overlay.html\">Overlay</a> to this\nOverlayManager.", "guessedname": "register", "guessedtype": "function"}, "showAll": {"description": "Invoke the <a href=\"Overlay.html#method_show\">show</a> method from\nall registered Overlays.", "guessedname": "showAll", "guessedtype": "function"}, "remove": {"return": {"type": "null", "description": ""}, "params": [{"type": "Overlay", "name": "overlay", "description": " <a href=\"Overlay.html\">Overlay</a> instance to be removed"}], "description": "Remove the passed <a href=\"Overlay.html\">Overlay</a> from this\nOverlayManager.", "guessedname": "remove", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Construction logic executed during OverlayManager instantiation. Lifecycle.", "guessedname": "initializer", "guessedtype": "function"}, "bringToTop": {"params": [{"type": "Overlay", "name": "overlay", "description": " Instance of\n<a href=\"Overlay.html\">Overlay</a>."}], "description": "Set the passed overlay zIndex to the highest value.", "guessedname": "bringToTop", "guessedtype": "function"}, "each": {"return": {"type": "null", "description": ""}, "params": [{"type": "function", "name": "fn", "description": " Callback to be executed on the\n<a href=\"Array.html#method_each\">Array.each</a>"}], "description": "Loop through all registered <a href=\"Overlay.html\">Overlay</a> and\nexecute a callback.", "guessedname": "each", "guessedtype": "function"}, "destroy": {"protected": "", "description": "Descructor lifecycle implementation for the OverlayManager class.\nPurges events attached to the node (and all child nodes).", "guessedname": "destroy", "guessedtype": "function"}, "sortByZIndexDesc": {"return": {"type": "Number", "description": ""}, "params": [{"type": "Overlay", "name": "a", "description": " Overlay"}, {"type": "Overlay", "name": "b", "description": " Overlay"}], "description": "zIndex comparator. Used on Array.sort.", "guessedname": "sortByZIndexDesc", "guessedtype": "function"}}, "extends": "Base", "superclass": "Base", "file": "aui-overlay-manager.js", "shortname": "OverlayManager", "properties": {"OverlayManager.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayManager.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayManager.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-manager/main.png\"/></p>\nA base class for OverlayManager, providing:\n<ul>\n<li>Grouping overlays</li>\n<li>Show or hide the entire group of registered overlays</li>\n<li>Basic Overlay Stackability (zIndex support)</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var groupOverlayManager = new A.OverlayManager();\ngroupOverlayManager.register([overlay1, overlay2, overlay3]);\ngroupOverlayManager.hideAll();\n</code></pre>\nCheck the list of <a href=\"OverlayManager.html#configattributes\">Configuration Attributes</a> available for\nOverlayManager."}, "OverlayContextPanel": {"name": "OverlayContextPanel", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying widget configuration properties."}], "description": "<p><img src=\"assets/images/aui-overlay-context-panel/main.png\"/></p>\nA base class for OverlayContextPanel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Customizable arrow</li>\n<li>Optional animation when show or hide</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContextPanel({\nbodyContent: 'Here s a sample OverlayContextPanel.',\nboundingBox: '#overlay-context-panel',\ntrigger: '#triggerButton',\ncancellableHide: true,\nhideDelay: 200,\nhideOnDocumentClick: false,\nanim: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContextPanel.html#configattributes\">Configuration Attributes</a> available for\nOverlayContextPanel."}], "namespace": "", "module": "aui-overlay", "events": {"arrowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "arrowChange", "description": "Fires when the value for the configuration attribute 'arrow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showArrowChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showArrowChange", "description": "Fires when the value for the configuration attribute 'showArrow' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "showOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "showOnChange", "description": "Fires when the value for the configuration attribute 'showOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "animChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "animChange", "description": "Fires when the value for the configuration attribute 'anim' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "stackChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "stackChange", "description": "Fires when the value for the configuration attribute 'stack' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "hideOnChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "hideOnChange", "description": "Fires when the value for the configuration attribute 'hideOn' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "configs": {"anim": {"default": "{ show: false }", "type": "Object", "description": "Enable or disable the animation for hide and show. Used as the\n<a href=\"Anim.html\">Anim</a> configuration attributes.\n<pre><code>anim: {\nshow: {\nduration: .9\n},\nhide: {\nduration: .2\n}\n}\n</code></pre>", "guessedname": "anim", "guessedtype": "property"}, "hideOn": {"default": "click", "type": "String", "description": "See <a href=\"OverlayContext.html#config_hideOn\">hideOn</a>.", "guessedname": "hideOn", "guessedtype": "property"}, "arrow": {"default": "null", "type": "String", "description": "Position where the arrow will be placed. See\n<a href=\"OverlayContextPanel.html#config_showArrow\">showArrow</a>. If it's\nnot set, it will get the value set on the\n<a href=\"OverlayContext.html#config_align\">align</a> point. Here is a\nlist of valid arrows 'bc', 'bl', 'br', 'cc', 'lb', 'lc', 'lt', 'rb',\n'rc', 'rl'.", "guessedname": "arrow", "guessedtype": "property"}, "showOn": {"default": "click", "type": "String", "description": "See <a href=\"OverlayContext.html#config_showOn\">showOn</a>.", "guessedname": "showOn", "guessedtype": "property"}, "stack": {"default": "true", "type": "boolean", "description": "Gives stacking habilities to the OverlayContextPanel.", "guessedname": "stack", "guessedtype": "property"}, "showArrow": {"default": "true", "type": "boolean", "description": "If true the OverlayContextPanel will show an arrow positioned on the\n<a href=\"OverlayContextPanel.html#config_arrow\">arrow</a> point.", "guessedname": "showArrow", "guessedtype": "property"}}, "methods": {"fixPointerColor": {"description": "OverlayContextPanel uses a imageless arrow, which involves some CSS technics.\nThis method is meant to fix the color of the borders of the arrow.", "guessedname": "fixPointerColor", "guessedtype": "function"}, "hide": {"params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Hides the OverlayContextPanel.", "guessedname": "hide", "guessedtype": "function"}, "syncUI": {"protected": "", "description": "Sync the OverlayContextPanel UI. Lifecycle.", "guessedname": "syncUI", "guessedtype": "function"}, "_syncElements": {"protected": "", "description": "Sync the UI of the OverlayContextPanel elements.", "guessedname": "_syncElements", "guessedtype": "function"}, "getAlignPoint": {"return": {"type": "String", "description": ""}, "description": "Normalize the align point value. The align point 'cc' is not a valid\nposition for the arrow and then it's normalized to the 'bc' point.", "guessedname": "getAlignPoint", "guessedtype": "function"}, "_renderElements": {"protected": "", "description": "Render DOM elements for the OverlayContextPanel.", "guessedname": "_renderElements", "guessedtype": "function"}, "_setAnim": {"return": {"type": "Object", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContextPanel.html#config_anim\">anim</a> attribute.", "protected": "", "params": [{"type": "Object", "name": "value", "description": ""}], "guessedname": "_setAnim", "guessedtype": "function"}, "_beforeShow": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires before show the OverlayContextPanel.", "guessedname": "_beforeShow", "guessedtype": "function"}, "_afterShowArrowChange": {"protected": "", "params": [{"type": "EventFacade", "name": "event", "description": ""}], "description": "Fires after showArrow attribute changes.", "guessedname": "_afterShowArrowChange", "guessedtype": "function"}, "_setStack": {"return": {"type": "boolean", "description": ""}, "description": "Setter for the\n<a href=\"OverlayContextPanel.html#config_stack\">stack</a> attribute.", "protected": "", "params": [{"type": "boolean", "name": "value", "description": ""}], "guessedname": "_setStack", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Bind the events on the OverlayContextPanel UI. Lifecycle.", "guessedname": "bindUI", "guessedtype": "function"}, "align": {"params": [{"type": "Node | String | null", "name": "node", "description": " A reference (or selector string) for\nthe Node which with the OverlayContextPanel is to be aligned."}, {"type": "Array[2]", "name": "points", "description": " A two element array, specifying the points on\nthe OverlayContextPanel and node/viewport which need to be aligned."}], "description": "Aligns the OverlayContextPanel to the provided node (or viewport) using the\nprovided points. Inherited from\n<a href=\"Overlay.html#method_align\">Overlay</a>.", "guessedname": "align", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Create the DOM structure for the OverlayContextPanel. Lifecycle.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "OverlayContext", "superclass": "OverlayContext", "file": "aui-overlay-context-panel.js", "shortname": "OverlayContextPanel", "properties": {"OverlayContextPanel.ATTRS": {"type": "Object", "static": "", "description": "Static property used to define the default attribute\nconfiguration for the OverlayContextPanel.", "guessedname": "ATTRS", "guessedtype": "property"}, "OverlayContextPanel.NAME": {"type": "String", "static": "", "description": "Static property provides a string to identify the class.", "guessedname": "NAME", "guessedtype": "property"}}, "description": "<p><img src=\"assets/images/aui-overlay-context-panel/main.png\"/></p>\nA base class for OverlayContextPanel, providing:\n<ul>\n<li>Widget Lifecycle (initializer, renderUI, bindUI, syncUI, destructor)</li>\n<li>Customizable arrow</li>\n<li>Optional animation when show or hide</li>\n</ul>\nQuick Example:<br/>\n<pre><code>var instance = new A.OverlayContextPanel({\nbodyContent: 'Here s a sample OverlayContextPanel.',\nboundingBox: '#overlay-context-panel',\ntrigger: '#triggerButton',\ncancellableHide: true,\nhideDelay: 200,\nhideOnDocumentClick: false,\nanim: true\n}).render();\n</code></pre>\nCheck the list of <a href=\"OverlayContextPanel.html#configattributes\">Configuration Attributes</a> available for\nOverlayContextPanel."}}, "version": "0.1a", "modules": {"aui-tool": {"name": "aui-tool", "submodules": ["aui-tool-item", "aui-tool-set"], "classlist": ["ToolItem", "ToolSet"], "filelist": ["aui-tool-set.js", "aui-tooltip.js"], "subdata": {"aui-tool-set": {"name": "ToolSet", "description": "The ToolSet Utility is a managed collection of <a\nhref=\"ToolItem.html\">ToolItems</a>."}, "aui-tool-item": {"name": "ToolItem", "description": "The ToolItem Utility - ToolItems are iconic buttons that provide\ninteraction states and event handling"}}, "guessedname": "Lang", "guessedtype": "property", "description": "The ToolItem Utility - ToolItems are iconic buttons that provide\ninteraction states and event handling"}, "aui-resize": {"description": "The Resize Utility allows you to make an HTML element resizable.", "submodules": [], "classlist": ["Resize"], "filelist": ["aui-sortable.js", "aui-state-interaction.js", "aui-swf.js", "aui-tabs.js", "aui-textboxlist.js", "aui-tool-item.js"], "subdata": {}, "name": "aui-resize"}, "aui-datatype": {"description": "The Datatype Utility", "submodules": [], "classlist": ["DataType.Boolean", "DataType.String"], "filelist": ["aui-delayed-task.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-datatype"}, "aui-editable": {"description": "The Editable Utility", "submodules": [], "classlist": ["Editable"], "filelist": ["aui-editable-min.js", "aui-editable.js", "aui-event-input.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-editable"}, "aui-io": {"name": "aui-io", "submodules": ["aui-io-plugin", "aui-io-request"], "classlist": ["A.Plugin.IO", "IORequest", "A.io"], "filelist": ["aui-io-request.js", "aui-live-search.js"], "subdata": {"aui-io-plugin": {"name": "A.Plugin.IO", "description": "The IOPlugin Utility - When plugged to a Node or Widget loads the content\nof a URI and set as its content, parsing the <code>script</code> tags if\npresent on the code."}, "aui-io-request": {"name": "A.io", "description": "The IORequest Utility - Provides response data normalization for XML, JSON,\nJavaScript and cache option."}}, "guessedname": "L", "guessedtype": "property", "description": "The IOPlugin Utility - When plugged to a Node or Widget loads the content\nof a URI and set as its content, parsing the <code>script</code> tags if\npresent on the code."}, "aui-rating": {"description": "The Rating Utility - The Star Rating creates a non-obstrusive star rating\ncontrol, could be based on a set of radio input boxes.", "submodules": [], "classlist": ["Rating", "ThumbRating"], "filelist": ["aui-resize.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-rating"}, "aui-paginator": {"description": "The Paginator Utility - The Paginator widget provides a set of controls to navigate through paged data.", "submodules": [], "classlist": ["Paginator"], "filelist": ["aui-panel.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-paginator"}, "aui-parse-content": {"description": "The ParseContent Utility - Parse a content in a way of all the javascripts\nwithin a content will be executed according to the order of apparition.", "submodules": [], "classlist": ["ParseContent"], "filelist": ["aui-portal-layout.js", "aui-rating.js"], "subdata": {}, "name": "aui-parse-content"}, "aui-live-search": {"description": "The LiveSearch Utility allow real-time filtering for DOM elements based on\na input query.", "submodules": [], "classlist": ["LiveSearch"], "filelist": ["aui-nested-list.js", "aui-node-base.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-live-search"}, "aui-image-viewer": {"name": "aui-image-viewer", "submodules": ["aui-image-viewer-base", "aui-image-viewer-gallery"], "classlist": ["ImageViewer", "ImageViewerMask", "ImageGallery"], "filelist": ["aui-image-viewer-gallery.js", "aui-io-plugin.js"], "subdata": {"aui-image-viewer-base": {"name": "ImageViewerMask", "description": "The ImageViewer Utility"}, "aui-image-viewer-gallery": {"name": "ImageGallery", "description": "The ImageGallery Utility"}}, "guessedname": "L", "guessedtype": "property", "description": "The ImageViewer Utility"}, "aui-char-counter": {"description": "The CharCounter Utility", "submodules": [], "classlist": ["CharCounter"], "filelist": ["aui-chart.js", "aui-color-picker.js", "aui-component.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-char-counter"}, "aui-dialog": {"description": "The Dialog Utility - The Dialog component is an extension of Panel that is\nmeant to emulate the behavior of an dialog window using a floating,\ndraggable HTML element.", "submodules": [], "classlist": ["Dialog", "DialogManager", "DialogMask"], "filelist": ["aui-editable-debug.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-dialog"}, "aui-delayed-task": {"description": "The DelayedTask Utility - Executes the supplied function in the context of\nthe supplied object 'when' milliseconds later", "submodules": [], "classlist": ["DelayedTask"], "filelist": ["aui-dialog.js"], "subdata": {}, "name": "aui-delayed-task"}, "aui-event": {"classlist": ["AUI~event~input"], "subdata": {"aui-event-input": {"name": "AUI~event~input", "description": "An object that encapsulates text changed events for textareas and input\nelement of type text and password. This event only occurs when the element\nis focused."}}, "name": "aui-event", "filelist": ["aui-form-base.js", "aui-form-combobox.js", "aui-form-field.js", "aui-form-manager.js"], "submodules": ["aui-event-input"]}, "aui-overlay": {"description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming).", "submodules": ["aui-overlay-base", "aui-overlay-context-panel", "aui-overlay-context", "aui-overlay-loading", "aui-overlay-manager", "aui-overlay-mask"], "classlist": ["OverlayBase", "OverlayContextPanel", "OverlayContextPanelManager", "OverlayContext", "OverlayContextManager", "OverlayLoading", "OverlayManager", "OverlayMask"], "filelist": ["aui-overlay-context-panel.js", "aui-overlay-context.js", "aui-overlay-loading.js", "aui-overlay-manager.js", "aui-overlay-mask.js", "aui-paginator.js"], "subdata": {"aui-overlay-loading": {"name": "OverlayLoading", "description": "The OverlayLoading Utility"}, "aui-overlay-context-panel": {"name": "OverlayContextPanelManager", "description": "The OverlayContextPanel Utility"}, "aui-overlay-context": {"name": "OverlayContextManager", "description": "The OverlayContext Utility"}, "aui-overlay-manager": {"name": "OverlayManager", "description": "The OverlayManager Utility"}, "aui-overlay-base": {"name": "OverlayBase", "description": "Provides a basic Overlay widget, with Standard Module content support. The Overlay widget\nprovides Page XY positioning support, alignment and centering support along with basic \nstackable support (z-index and shimming)."}, "aui-overlay-mask": {"name": "OverlayMask", "description": "The OverlayMask Utility"}}, "guessedname": "L", "guessedtype": "property", "name": "aui-overlay"}, "aui-autocomplete": {"description": "The AutoComplete Utility", "submodules": [], "classlist": ["AutoComplete"], "filelist": ["aui-autocomplete.js", "aui-base-debug.js", "aui-base-min.js", "aui-base.js", "aui-core.js", "aui-calendar-base.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-autocomplete"}, "aui-node": {"name": "aui-node", "submodules": ["aui-node-base", "aui-node-html5"], "classlist": ["A.Node", "A.NodeList", "A.HTML5"], "filelist": ["aui-node-fx.js", "aui-node-html5.js", "aui-overlay-base.js"], "subdata": {"aui-node-html5": {"name": "A.HTML5", "description": "aui-node-html5 provides support for HTML shiv natively on the Alloy dom\nmethods. The HTML5 shiv just affects IE."}, "aui-node-base": {"name": "A.NodeList", "description": "aui-node-base A set of utility methods to the Node."}}, "guessedname": "Lang", "guessedtype": "property", "description": "aui-node-base A set of utility methods to the Node."}, "gallery-formmgr": {"description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>aui-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>aui-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>aui-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>aui-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use aui-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>", "submodules": [], "classlist": ["FormManager"], "filelist": ["aui-form-textarea.js", "aui-form-textfield.js", "aui-image-viewer-base.js"], "subdata": {}, "name": "gallery-formmgr"}, "aui-component": {"description": "The Component Utility", "submodules": [], "classlist": ["Component"], "filelist": ["aui-data-set.js", "aui-datatype.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-component"}, "aui-calendar": {"name": "aui-calendar", "submodules": ["aui-calendar-base", "aui-calendar-datepicker-select"], "classlist": ["Calendar", "CalendarManager", "DatePickerSelect"], "filelist": ["aui-calendar-datepicker-select.js", "calendar-pt-br.js", "aui-char-counter.js"], "subdata": {"aui-calendar-datepicker-select": {"name": "DatePickerSelect", "description": "The DatePickerSelect Utility"}, "aui-calendar-base": {"name": "CalendarManager", "description": "The Calendar component is a UI control that enables users to choose one or\nmore dates from a graphical calendar presented in a single month or multi\nmonth interface. Calendars are generated entirely via script and can be\nnavigated without any page refreshes."}}, "guessedname": "L", "guessedtype": "property", "description": "The Calendar component is a UI control that enables users to choose one or\nmore dates from a graphical calendar presented in a single month or multi\nmonth interface. Calendars are generated entirely via script and can be\nnavigated without any page refreshes."}, "aui-tooltip": {"description": "The Tooltip Utility - A standard tooltip implementation for providing additional information when hovering over a target element.", "submodules": [], "classlist": ["Tooltip"], "filelist": ["aui-tree-data.js", "aui-tree-node.js", "aui-tree-view.js"], "subdata": {}, "guessedname": "L", "guessedtype": "property", "name": "aui-tooltip"}, "aui-panel": {"description": "The Panel Utility - Panel is a container that has specific functionality\nand structural components that make it the good for building block for\napplication-oriented user interfaces. Panel also provides built-in\nexpandable and collapsible behavior, along with a variety of prebuilt tool\nbuttons that can be wired up to provide other customized behavior. Panels\ncan be easily dropped into any Container or layout.", "submodules": [], "classlist": ["Panel"], "filelist": ["aui-parse-content.js"], "subdata": {}, "guessedname": "Lang", "guessedtype": "property", "name": "aui-panel"}}, "filemap": {"aui-datatype.js": {"classlist": ["DataType.Boolean", "DataType.String"], "name": "aui-datatype.js", "module": "aui-component"}, "aui-form-base.js": {"name": "aui-form-base.js", "classlist": [], "module": "aui-event", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-base-min.js": {"name": "aui-base-min.js", "classlist": [], "module": "aui-autocomplete", "guessedname": "D", "guessedtype": "function", "method": "D"}, "aui-base-debug.js": {"classlist": [], "name": "aui-base-debug.js", "module": "aui-autocomplete"}, "aui-event-input.js": {"classlist": ["AUI~event~input"], "name": "aui-event-input.js", "module": "aui-editable"}, "aui-image-viewer-base.js": {"classlist": ["ImageViewer", "ImageViewerMask"], "name": "aui-image-viewer-base.js", "module": "gallery-formmgr"}, "aui-editable-debug.js": {"classlist": ["Editable"], "name": "aui-editable-debug.js", "module": "aui-dialog"}, "aui-form-manager.js": {"classlist": ["FormManager"], "name": "aui-form-manager.js", "module": "aui-event"}, "aui-editable-min.js": {"name": "aui-editable-min.js", "classlist": [], "module": "aui-editable", "guessedname": "H", "guessedtype": "function", "method": "H"}, "calendar-pt-br.js": {"classlist": [], "name": "calendar-pt-br.js", "module": "aui-calendar"}, "aui-core.js": {"classlist": [], "name": "aui-core.js", "module": "aui-autocomplete"}, "aui-node-base.js": {"classlist": ["A.Node", "A.NodeList"], "name": "aui-node-base.js", "module": "aui-live-search"}, "aui-nested-list.js": {"name": "aui-nested-list.js", "classlist": [], "module": "aui-live-search", "guessedname": "L", "guessedtype": "property", "property": "L"}, "aui-node-fx.js": {"classlist": [], "name": "aui-node-fx.js", "module": "aui-node"}, "aui-component.js": {"classlist": ["Component"], "name": "aui-component.js", "module": "aui-char-counter"}, "aui-rating.js": {"classlist": ["Rating", "ThumbRating"], "name": "aui-rating.js", "module": "aui-parse-content"}, "aui-form-textfield.js": {"name": "aui-form-textfield.js", "classlist": [], "module": "gallery-formmgr", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-portal-layout.js": {"name": "aui-portal-layout.js", "classlist": [], "module": "aui-parse-content", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-form-combobox.js": {"name": "aui-form-combobox.js", "classlist": [], "module": "aui-event", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-overlay-loading.js": {"classlist": ["OverlayLoading"], "name": "aui-overlay-loading.js", "module": "aui-overlay"}, "aui-tooltip.js": {"classlist": ["Tooltip"], "name": "aui-tooltip.js", "module": "aui-tool"}, "aui-swf.js": {"name": "aui-swf.js", "classlist": [], "module": "aui-resize", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-node-html5.js": {"classlist": ["A.HTML5"], "name": "aui-node-html5.js", "module": "aui-node"}, "aui-overlay-base.js": {"classlist": ["OverlayBase"], "name": "aui-overlay-base.js", "module": "aui-node"}, "aui-color-picker.js": {"name": "aui-color-picker.js", "classlist": [], "module": "aui-char-counter", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-dialog.js": {"classlist": ["Dialog", "DialogManager", "DialogMask"], "name": "aui-dialog.js", "module": "aui-delayed-task"}, "aui-sortable.js": {"name": "aui-sortable.js", "classlist": [], "module": "aui-resize", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-overlay-context.js": {"classlist": ["OverlayContext", "OverlayContextManager"], "name": "aui-overlay-context.js", "module": "aui-overlay"}, "aui-tabs.js": {"name": "aui-tabs.js", "classlist": [], "module": "aui-resize", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-overlay-manager.js": {"classlist": ["OverlayManager"], "name": "aui-overlay-manager.js", "module": "aui-overlay"}, "aui-char-counter.js": {"classlist": ["CharCounter"], "name": "aui-char-counter.js", "module": "aui-calendar"}, "aui-state-interaction.js": {"name": "aui-state-interaction.js", "classlist": [], "module": "aui-resize", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-calendar-datepicker-select.js": {"classlist": ["DatePickerSelect"], "name": "aui-calendar-datepicker-select.js", "module": "aui-calendar"}, "aui-editable.js": {"classlist": ["Editable"], "name": "aui-editable.js", "module": "aui-editable"}, "aui-panel.js": {"classlist": ["Panel"], "name": "aui-panel.js", "module": "aui-paginator"}, "aui-tree-data.js": {"name": "aui-tree-data.js", "classlist": [], "module": "aui-tooltip", "guessedname": "L", "guessedtype": "property", "property": "L"}, "aui-autocomplete.js": {"classlist": ["AutoComplete"], "name": "aui-autocomplete.js", "module": "aui-autocomplete"}, "aui-live-search.js": {"classlist": ["LiveSearch"], "name": "aui-live-search.js", "module": "aui-io"}, "aui-overlay-context-panel.js": {"classlist": ["OverlayContextPanel", "OverlayContextPanelManager"], "name": "aui-overlay-context-panel.js", "module": "aui-overlay"}, "aui-tool-set.js": {"classlist": ["ToolSet"], "name": "aui-tool-set.js", "module": "aui-tool"}, "aui-chart.js": {"name": "aui-chart.js", "classlist": [], "module": "aui-char-counter", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-base.js": {"classlist": [], "name": "aui-base.js", "module": "aui-autocomplete"}, "aui-calendar-base.js": {"classlist": ["Calendar", "CalendarManager"], "name": "aui-calendar-base.js", "module": "aui-autocomplete"}, "aui-paginator.js": {"classlist": ["Paginator"], "name": "aui-paginator.js", "module": "aui-overlay"}, "aui-textboxlist.js": {"name": "aui-textboxlist.js", "classlist": [], "module": "aui-resize", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-data-set.js": {"name": "aui-data-set.js", "classlist": [], "module": "aui-component", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-tree-node.js": {"name": "aui-tree-node.js", "classlist": [], "module": "aui-tooltip", "guessedname": "L", "guessedtype": "property", "property": "L"}, "aui-io-plugin.js": {"classlist": ["A.Plugin.IO"], "name": "aui-io-plugin.js", "module": "aui-image-viewer"}, "aui-form-textarea.js": {"name": "aui-form-textarea.js", "classlist": [], "module": "gallery-formmgr", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-io-request.js": {"classlist": ["IORequest", "A.io"], "name": "aui-io-request.js", "module": "aui-io"}, "aui-overlay-mask.js": {"classlist": ["OverlayMask"], "name": "aui-overlay-mask.js", "module": "aui-overlay"}, "aui-image-viewer-gallery.js": {"classlist": ["ImageGallery"], "name": "aui-image-viewer-gallery.js", "module": "aui-image-viewer"}, "aui-form-field.js": {"name": "aui-form-field.js", "classlist": [], "module": "aui-event", "guessedname": "Lang", "guessedtype": "property", "property": "Lang"}, "aui-tool-item.js": {"classlist": ["ToolItem"], "name": "aui-tool-item.js", "module": "aui-resize"}, "aui-resize.js": {"classlist": ["Resize"], "name": "aui-resize.js", "module": "aui-rating"}, "aui-parse-content.js": {"classlist": ["ParseContent"], "name": "aui-parse-content.js", "module": "aui-panel"}, "aui-delayed-task.js": {"classlist": ["DelayedTask"], "name": "aui-delayed-task.js", "module": "aui-datatype"}, "aui-tree-view.js": {"name": "aui-tree-view.js", "classlist": [], "module": "aui-tooltip", "guessedname": "L", "guessedtype": "property", "property": "L"}}}