<?xml version="1.0"?>
<project name="AlloyMacrolib">
	<property name="regex.clean.vars" value="^component\.details\..*|details\.list|details|component\.(rollup|use|supersedes|requires|optional|lang|skinnable)$"/>

	<!-- Overwriting default YUI tasks -->
	<presetdef name="addlang">
		<addmodule
			dest="@{dest}"
			details="@{details}"
			dir="@{dir}"
			lang="@{lang}"
			langtemplate="${project.dir}/resources/builder/templates/langtemplate.txt"
			module="@{module}"
		/>
	</presetdef>

	<presetdef name="addmodule">
		<addmodule
			details="@{details}"
			file="@{file}"
			module="@{module}"
			moduletemplate="${project.dir}/resources/builder/templates/moduletemplate.txt"
		/>
	</presetdef>

	<presetdef name="addrollup">
		<addrollup
			details="@{details}"
			file="@{file}"
			module="@{module}"
			rolluptemplate="${project.dir}/resources/builder/templates/rolluptemplate.txt"
		/>
	</presetdef>

	<!-- Alloy Macrodef utilities -->
	<macrodef name="clean-variables" description="Clean all properties which match with the regex attribute">
		<attribute name="regex"/>
		<sequential>
			<propertyselector
				casesensitive="false"
				delimiter=","
				match="@{regex}"
				override="true"
				property="aui.reset.list"
				select="\0"
			/>
			<if>
				<isset property="aui.reset.list"/>
				<then>
					<for list="${aui.reset.list}" param="val">
						<sequential>
							<var name="@{val}" unset="true" value=""/>
						</sequential>
					</for>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="create-module-details">
		<sequential>
			<var name="submodule.module.name" value="${component}"/>
			<var name="submodule.module.details.hash" value="${component.details.hash}"/>

			<loadfile
				srcFile="${project.dir}/resources/builder/templates/moduledeftemplate.txt"
				property="module.deftemplate.content"
			/>

			<if>
				<equals arg1="${component.rollup}" arg2="true"/>
				<then>
					<var name="submodule.details.hash" value=""/>

					<for list="${component.use}" param="file" trim="true">
						<sequential>
							<clean-variables regex="${regex.clean.vars}"/>
							<var file="${project.dir}/src/${submodule.module.name}/build.@{file}.properties"/>
							<createdetails/>
							<var name="submodule.details.hash" value="'${component}': ${component.details.hash}, ${submodule.details.hash}"/>
						</sequential>
					</for>

					<propertyregex
						casesensitive="false"
						input="${submodule.module.details.hash}"
						override="true"
						property="component.details.hash"
						regexp="^\{"
						replace="{submodules: {${submodule.details.hash}}, "
					/>
				</then>
			</if>

			<replaceregexp match="([\s\t\n]+)(@MODULES@)" replace="\1${module.deftemplate.content}\2" flags="g" byline="false">
				<fileset dir="${project.dir}/resources/temp/" includes="defaults.js"/>
			</replaceregexp>

			<replace file="${project.dir}/resources/temp/defaults.js">
				<replacefilter token="@MODULE@" value="${submodule.module.name}"/>
				<replacefilter token="@DETAILS@" value="${component.details.hash}"/>
			</replace>
		</sequential>
	</macrodef>

	<macrodef name="create-module-list">
		<sequential>
			<clean-variables regex="${regex.clean.vars}"/>

			<if>
				<available file="${project.dir}/src/${build.aui.prefix}aui-base/build_tmp/" />
				<then>
					<copy
						file="${project.dir}/resources/builder/templates/moduledefaults.txt"
						tofile="${project.dir}/resources/temp/defaults.js"
						overwrite="true"
					/>

					<for param="file">
						<path>
							<fileset dir="${project.dir}/src" includes="**/build.properties,**/build.all-css.properties" excludes="**/_diffs/build.properties"/>
						</path>
						<sequential>
							<var file="@{file}"/>
							<createdetails />
							<create-module-details/>
							<clean-variables regex="${regex.clean.vars}"/>
						</sequential>
					</for>

					<format-module-list/>

					<property name="aui.base.component.dir" value="${global.build.base}/${build.aui.prefix}aui-base/" />
					<property name="aui.base.component.tmp.dir" value="${project.dir}/src/${build.aui.prefix}aui-base/build_tmp/" />
					<property name="aui.temp.dir" value="${project.dir}/resources/temp/" />

					<delete file="${aui.base.component.dir}/defaults.js"/>
					<concat destfile="${aui.base.component.dir}/${build.aui.prefix}aui-base.js" fixlastline="yes">
						<header file="${aui.temp.dir}/defaults.js"/>
						<fileset dir="${aui.base.component.tmp.dir}" includes="${build.aui.prefix}aui-base.js"/>
					</concat>
					<concat destfile="${aui.base.component.dir}/${build.aui.prefix}aui-base-debug.js" fixlastline="yes">
						<header file="${aui.temp.dir}/defaults.js"/>
						<fileset dir="${aui.base.component.tmp.dir}" includes="${build.aui.prefix}aui-base-debug.js"/>
					</concat>
					<concat destfile="${aui.base.component.dir}/${build.aui.prefix}aui-base-min.js" fixlastline="yes">
						<header file="${aui.temp.dir}/defaults.js"/>
						<fileset dir="${aui.base.component.tmp.dir}" includes="${build.aui.prefix}aui-base-min.js"/>
					</concat>

					<yuicompress
						args="${yuicompressor.js.args.internal}"
						dest="${project.dir}/build/${build.aui.prefix}aui-base/${build.aui.prefix}aui-base-min.js"
						src="${aui.base.component.dir}/${build.aui.prefix}aui-base.js"
					/>

					<mkdir dir="${global.build.base}/${build.aui.prefix}aui" />

					<var name="aui.combined.dir" value="${global.build.base}/${build.aui.prefix}aui/" />
					<var name="aui.combined.file" value="${aui.combined.dir}/${build.aui.prefix}aui.js" />
					<var name="aui.combined.min.file" value="${aui.combined.dir}/${build.aui.prefix}aui-min.js" />

					<delete>
						<fileset dir="${aui.combined.dir}" includes="aui*.js"/>
					</delete>

					<concat destfile="${aui.combined.file}" fixlastline="yes">
						<header file="${global.build.base}/yui/yui.js"/>
						<fileset dir="${global.build.base}/${build.aui.prefix}aui-base" includes="${build.aui.prefix}aui-base.js"/>
					</concat>
					<concat destfile="${aui.combined.min.file}" fixlastline="yes">
						<header file="${global.build.base}/yui/yui-min.js"/>
						<fileset dir="${global.build.base}/${build.aui.prefix}aui-base" includes="${build.aui.prefix}aui-base-min.js"/>
					</concat>

					<var name="aui.detect.path.regex.from" value="/^(.*)yui\/yui([\.\-].*)js(\?.*)?$/"/>
					<var name="aui.detect.path.regex.to" value="/^(.*)[ay]ui\/[ay]ui([\.\-].*)js(\?.*)?$/"/>

					<var name="aui.detect.path.combo.regex.from" value="/^(.*\?)(.*\&amp;)(.*)yui\/yui[\.\-].*js(\?.*)?$/"/>
					<var name="aui.detect.path.combo.regex.to" value="/^(.*\?)(.*\&amp;)(.*)[ay]ui\/[ay]ui[\.\-].*js(\?.*)?$/"/>

					<replace file="${aui.combined.file}">
						<replacefilter token="${aui.detect.path.regex.from}" value="${aui.detect.path.regex.to}" />
					</replace>

					<replace file="${aui.combined.file}">
						<replacefilter token="${aui.detect.path.combo.regex.from}" value="${aui.detect.path.combo.regex.to}" />
					</replace>

					<replace file="${aui.combined.min.file}">
						<replacefilter token="${aui.detect.path.regex.from}" value="${aui.detect.path.regex.to}" />
					</replace>

					<replace file="${aui.combined.min.file}">
						<replacefilter token="${aui.detect.path.combo.regex.from}" value="${aui.detect.path.combo.regex.to}" />
					</replace>

					<delete dir="${aui.temp.dir}"/>
				</then>
				<else>
					<subant target="local">
						<fileset dir="${project.dir}/src/${build.aui.prefix}aui-base/">
							<include name="build.xml"/>
						</fileset>
					</subant>

					<create-module-list/>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="format-module-list">
		<sequential>
			<replace file="${project.dir}/resources/temp/defaults.js">
				<replacefilter token=": ," value=": "/>
			</replace>
			<replaceregexp match="@MODULES@[\r\n]" replace="" flags="g" byline="false">
				<fileset dir="${project.dir}/resources/temp/" includes="defaults.js"/>
			</replaceregexp>
			<replaceregexp match="\},([\s\t\n]+)}" replace="}\1}" flags="g" byline="false">
				<fileset dir="${project.dir}/resources/temp/" includes="defaults.js"/>
			</replaceregexp>
		</sequential>
	</macrodef>
</project>
