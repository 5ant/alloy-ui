<?xml version="1.0"?>
<project name="Alloy" basedir="." default="release">
	<property name="project.dir" value="."/>
	<property name="release.name" value="alloy" />
	<property name="release.temp.dir" value="${project.dir}/resources/temp/alloy/" />
	<property name="release.version" value="1.0pr"/>
	<property name="yui3.build.version" value="nightly"/>
	<property name="yui3.dir" value="${project.dir}/lib/yui3/" />
	<property name="yui3.file" value="yui3.zip" />
	<property name="yui3.version" value="3.1.0"/>

	<import file="resources/builder/bootstrap.xml"/>

	<target name="all" depends="build-aui, init-yui"/>

	<target name="build-aui" depends="build-components, build-modules, build-skins, clean"/>

	<target name="build-gallery" depends="build-gallery-templates, build-gallery-components, build-gallery-modules, clean-gallery-templates" />

	<target name="build-gallery-templates">
		<echo>Backing up templates</echo>

		<copy todir="${project.dir}/resources/builder/_new_templates">
			<fileset dir="${project.dir}/resources/builder/templates"/>

			<filterset begintoken="(@" endtoken="@)">
				<filter token="YUIVAR" value="(A)"/>
			</filterset>
		</copy>

		<move todir="${project.dir}/resources/builder/_old_templates">
			<fileset dir="${project.dir}/resources/builder/templates"/>
		</move>

		<move todir="${project.dir}/resources/builder/templates">
			<fileset dir="${project.dir}/resources/builder/_new_templates"/>
		</move>
	</target>

	<target name="clean-gallery-templates">
		<echo>Cleaning up templates</echo>

		<move todir="${project.dir}/resources/builder/templates" overwrite="true">
			<fileset dir="${project.dir}/resources/builder/_old_templates"/>
		</move>
	</target>

	<target name="build-gallery-components" depends="remove-whitespace">
		<subant target="all">
			<property name="yui.variable" value="Y"/>

			<fileset
				dir="${project.dir}/src/"
				excludes="build.xml"
				includes="**/build.xml"
			/>
		</subant>
	</target>

	<target name="build-gallery-modules">
		<subant target="all">
			<property name="yui.variable" value="Y"/>
			<property name="component.jsfiles" value="aui-core.js, aui-base.js" />
			<property name="component.prependfiles" value="" />

			<fileset
				dir="${project.dir}/src/aui-base/"
				includes="**/build.xml"
			/>
		</subant>

		<create-module-list/>
	</target>

	<target name="build-components" depends="remove-whitespace">
		<subant target="all">
			<fileset
				dir="${project.dir}/src/"
				excludes="build.xml"
				includes="**/build.xml"
			/>
		</subant>
	</target>

	<target name="build-modules">
		<subant target="all">
			<fileset
				dir="${project.dir}/src/aui-base/"
				includes="**/build.xml"
			/>
		</subant>

		<create-module-list/>
	</target>

	<target name="build-skins">
		<copy todir="${project.dir}/build/aui-skins" overwrite="true">
			<fileset dir="${project.dir}/src/aui-skins"/>
		</copy>
	</target>

	<target name="build-yui">
		<subant target="all">
			<fileset
				dir="${project.dir}/lib/yui3/src"
				excludes="build.xml"
				includes="**/build.xml"
			/>
		</subant>
		<subant target="init-yui"/>
	</target>

	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${project.dir}/src/" defaultexcludes="false">
				<include name="**/*build_tmp*/**" />
				<include name="**/*build_rollup_tmp*/**" />
			</fileset>
		</delete>
	</target>

	<target name="clean-release">
		<delete dir="${release.temp.dir}" />
		<delete file="${project.dir}/${release.name}-${release.version}.zip" />
	</target>

	<target name="init-yui">
		<echo>Initializing YUI Library.</echo>

		<delete dir="${yui3.dir}" />
		<unzip src="${project.dir}/lib/${yui3.file}" dest="${project.dir}/lib/" />

		<echo>Adding patches to [${project.dir}/lib/yui3/build]</echo>

		<!-- IO Patch for AUI-17 -->
		<replace file="${project.dir}/lib/yui3/src/io/js/io-base.js">
			<replacetoken>r = Y.mix(r, d, false, ['status', 'statusText', 'responseText', 'responseXML']);</replacetoken>
			<replacevalue>
				r.status = d.status;
				r.statusText = d.statusText;
				r.responseText = d.responseText;
				r.responseXML = d.responseXML;
			</replacevalue>
		</replace>

		<subant target="all" failonerror="false">
			<property name="lint.skip" value="true"/>
			<fileset
				dir="${project.dir}/lib/yui3/src/io"
				includes="build.xml"
			/>
		</subant>
		<!-- /End IO Patch -->

		<echo>Copying files from [${project.dir}/lib/yui3/build] to [${project.dir}/build].</echo>
		<copy todir="${project.dir}/build" overwrite="true">
			<fileset dir="${project.dir}/lib/yui3/build">
				<include name="**/*"/>
			</fileset>
		</copy>
		<echo>Adding YUI Copyright information</echo>
		<copy todir="${project.dir}/build" includeEmptyDirs="false" overwrite="true" encoding="UTF-8">
			<fileset dir="${project.dir}/lib/yui3/build">
				<or>
					<filename name="**/*.css"/>
					<filename name="**/*.js"/>
				</or>
			</fileset>
			<filterchain>
				<concatfilter prepend="${project.dir}/resources/builder/templates/yui-copyright.txt"/>
				<replacetokens>
					<token key="VERSION" value="${yui3.version}"/>
					<token key="BUILD" value="${yui3.build.version}"/>
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="release" depends="clean-release">
		<copy todir="${release.temp.dir}">
			<fileset dir="${project.dir}">
				<include name="api/**" />
				<include name="build/**" />
				<include name="demos/**" />
				<include name="lib/yui-combo/**" />
				<include name="sandbox/**" />
				<include name="*.txt" />
			</fileset>
		</copy>

		<echo>Replacing @VERSION@ tokens</echo>

		<replaceregexp match="@VERSION@" replace="${release.version}" flags="g" byline="true">
			<fileset dir="${release.temp.dir}/build/" includes="**/aui-*.js"/>
        </replaceregexp>

		<!-- <replaceregexp match="combine: ?false," replace="combine:true," flags="g" byline="true">
			<fileset dir="${release.temp.dir}/build/aui-base/" includes="*.js"/>
        </replaceregexp>

		<replaceregexp match="filter: ?'raw'," replace="filter:'min'," flags="g" byline="true">
			<fileset dir="${release.temp.dir}/build/aui-base/" includes="*.js"/>
        </replaceregexp> -->

		<echo>Creating Zip file ${release.name}.zip</echo>

		<zip basedir="${release.temp.dir}" destfile="${project.dir}/${release.name}-${release.version}.zip" />

		<delete dir="${release.temp.dir}" />
	</target>

	<target name="remove-whitespace">
		<echo>Removing trailing spaces of the source files.</echo>

		<replaceregexp match="[\t ]+$" replace="" flags="g" byline="true">
			<fileset dir="${project.dir}/src/" includes="*.js"/>
		</replaceregexp>
	</target>


	<!--
		YUI Docs ant tasks
	-->
	<property name="project.name" value="Alloy UI" />
	<property name="project.url" value="http://alloy.liferay.com/deploy/api" />
	<property name="project.docs.dir" value="${project.dir}/resources/docs" />
	<property name="yui.version" location="3.0.0" />

	<property name="yuidoc.output.dir" location="${project.dir}/_api" />
	<property name="yuidoc.home" location="${project.dir}/lib/yui-yuidoc" />
	<property name="yuidoc.exec" location="${yuidoc.home}/bin/yuidoc.py" />
	<property name="yuidoc.tmpdir" location="${project.docs.dir}/temp" />
	<property name="yuidoc.parsein.dir" location="${project.dir}/build" />
	<property name="yuidoc.template.dir" location="${project.docs.dir}/template" />

	<target name="build-doc" depends="clean-doc">
		<echo>Deleting old API files</echo>
		<delete>
			<fileset dir="${project.dir}/api" includes="**/*" />
		</delete>

		<mkdir dir="${yuidoc.tmpdir}" />
		<mkdir dir="${yuidoc.tmpdir}/parsertmp" />

		<echo>Generating ${project.name} Documentation</echo>
		<var name="yuidoc.modules.list" value=""/>
		<for param="dir">
			<path>
				<dirset
					dir="${project.dir}/build"
					includes="*"
				/>
			</path>
			<sequential>
				<var name="yuidoc.modules.list" value="@{dir} ${yuidoc.modules.list}"/>
			</sequential>
		</for>
		<exec executable="${yuidoc.exec}">
			<arg line="${yuidoc.modules.list}"/>
			<arg value="-p"/>
			<arg value="${yuidoc.tmpdir}/parsertmp"/>
			<arg value="-o" />
			<arg value="${yuidoc.output.dir}" />
			<arg value="-t" />
			<arg value="${yuidoc.template.dir}" />
			<arg value="-m" />
			<arg value="${project.name}" />
			<arg value="-Y" />
			<arg value="${yui.version}" />
			<arg value="-v" />
			<arg value="${release.version}" />
			<arg value="-u" />
			<arg value="${project.url}" />
		</exec>

		<copy todir="${project.dir}/api" overwrite="true">
			<fileset dir="${project.dir}/_api" includes="**/*" />
		</copy>

		<echo>Removing Temp Built Files from ${yuidoc.tmpdir}</echo>
		<delete dir="${yuidoc.tmpdir}" />
		<delete dir="${project.dir}/_api" />
	</target>

	<target name="clean-doc" description="Clean out build">
		<echo>Removing Documentation Built Files</echo>
		<delete dir="${yuidoc.tmpdir}" />
		<delete dir="${project.dir}/_api" />
	</target>
</project>
